{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# MeraDhan CRM - Online Bond Provider Platform\n\n## Overview\n\nMeraDhan CRM is a production-grade, horizontally scalable Customer Relationship Management application for an Online Bond Provider Platform (OBPP) in India. The application is built using a modern full-stack TypeScript architecture with a focus on security, scalability, and compliance with SEBI regulations.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript\n- **Build Tool**: Vite for fast development and optimized production builds\n- **UI Library**: Shadcn/ui components built on Radix UI primitives\n- **Styling**: Tailwind CSS with CSS variables for theming\n- **State Management**: TanStack Query for server state management\n- **Routing**: Wouter for lightweight client-side routing\n- **Form Handling**: React Hook Form with Zod validation\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js framework\n- **Language**: TypeScript with ES modules\n- **Database ORM**: Drizzle ORM for type-safe database operations\n- **Database**: PostgreSQL (configured for Neon serverless)\n- **Authentication**: JWT-based stateless authentication with OTP verification\n- **Email Service**: Nodemailer for OTP delivery and notifications\n\n### Database Design\n- **Primary Database**: PostgreSQL with Drizzle ORM\n- **Connection**: Neon serverless PostgreSQL for scalability\n- **Schema Management**: Drizzle Kit for migrations and schema management\n- **Key Tables**: users, leads, customers, rfqs, support_tickets, email_templates, otps, login_logs, activity_logs\n\n## Key Components\n\n### Authentication System\n- **OTP-based Login**: Email-only authentication without passwords\n- **Role-Based Access Control**: Admin, Sales, Support, Relationship Manager (RM), Viewer roles\n- **Session Management**: JWT tokens for stateless horizontal scaling\n- **Security Features**: Login history tracking, IP and user-agent logging, OTP expiration\n- **Admin Protection**: Main admin account (vikas.kukreja@meradhan.co) cannot be deactivated for system security\n\n### CRM Modules\n1. **Dashboard**: Interactive charts and KPI widgets using Recharts\n2. **Lead Management**: Lead capture, tracking, and conversion pipeline\n3. **Customer Management**: Customer profiles with KYC status tracking\n4. **Sales Pipeline**: Visual pipeline management with conversion metrics\n5. **RFQ Management**: Request for Quote handling with NSE integration\n6. **Support Tickets**: Customer support ticket system with priority management\n7. **Email Templates**: Templated communication system\n8. **Reports**: Analytics and reporting with data visualization\n9. **User Management**: Admin-only user and role management\n\n### UI/UX Design\n- **Design System**: Consistent design using Shadcn/ui component library\n- **Responsive Design**: Mobile-first approach with adaptive layouts\n- **Dark/Light Theme**: CSS variables-based theming system\n- **Accessibility**: ARIA-compliant components from Radix UI\n\n## Data Flow\n\n### Authentication Flow\n1. User enters email address\n2. System generates and sends 6-digit OTP via email\n3. User enters OTP for verification\n4. System validates OTP and generates JWT token\n5. JWT token used for subsequent API requests\n\n### Lead to Customer Conversion\n1. Lead captured through various sources (website, referral, etc.)\n2. Lead assigned to sales representative\n3. Lead qualification and follow-up process\n4. Lead conversion to customer with KYC completion\n5. Customer onboarding and relationship management\n\n### RFQ Process\n1. Customer submits Request for Quote\n2. Internal processing and validation\n3. Submission to NSE platform\n4. Quote execution and settlement tracking\n\n## External Dependencies\n\n### Core Dependencies\n- **Database**: @neondatabase/serverless for PostgreSQL connection\n- **ORM**: drizzle-orm for database operations\n- **Authentication**: jsonwebtoken for JWT handling\n- **Email**: nodemailer for SMTP email delivery\n- **UI Components**: @radix-ui/* for accessible component primitives\n- **Charts**: recharts for data visualization\n- **Forms**: react-hook-form with @hookform/resolvers for validation\n\n### Development Dependencies\n- **Build**: Vite for frontend bundling, esbuild for backend bundling\n- **TypeScript**: Full TypeScript support across frontend and backend\n- **Validation**: Zod for runtime type validation\n- **Styling**: Tailwind CSS with PostCSS\n\n### Third-party Integrations\n- **Email Service**: SMTP-based email delivery (configurable provider)\n- **NSE Platform**: Mock integration for bond trading (RFQ submission)\n- **Database Hosting**: Neon serverless PostgreSQL\n\n## Deployment Strategy\n\n### Development Environment\n- **Local Development**: tsx for TypeScript execution in development\n- **Hot Reload**: Vite HMR for frontend, tsx watch mode for backend\n- **Database**: Drizzle Kit for schema management and migrations\n\n### Production Build\n- **Frontend**: Vite production build with optimization\n- **Backend**: esbuild bundling for Node.js deployment\n- **Database**: Environment-based connection strings for different stages\n\n### Scalability Features\n- **Stateless Backend**: JWT-based authentication for horizontal scaling\n- **Database Connection Pooling**: Neon serverless with connection pooling\n- **CDN-Ready**: Static asset optimization for CDN deployment\n- **Environment Configuration**: Environment-based configuration for different deployment stages\n\n### Security Measures\n- **Input Validation**: Zod schemas for API request validation\n- **SQL Injection Protection**: Drizzle ORM parameterized queries\n- **CORS Configuration**: Proper CORS setup for API security\n- **Rate Limiting**: Prepared for rate limiting implementation\n- **Audit Trail**: Comprehensive logging for compliance requirements\n\nThe application is designed to be production-ready with proper error handling, type safety, and scalability considerations built into the architecture from the ground up.\n\n## Recent Changes\n\n### July 21, 2025 - IST Timezone Fix\n- **Issue Resolved**: Double IST conversion causing timestamps to display 5.5 hours ahead\n- **Root Cause**: Frontend was adding timezone offset to already-converted IST times from database\n- **Solution Implemented**: \n  - Fixed database schema to allow explicit IST timestamp storage\n  - Updated backend to store proper IST times (UTC + 5:30)\n  - Added frontend safety checks with 'Z' suffix to prevent browser timezone interference\n  - Verified timestamps now display correct IST time matching user's local time\n- **Components Fixed**: Session analytics, audit logs, login history, activity tracking\n- **Verification**: User confirmed timestamps now match actual IST (15:51 displayed = 15:51 actual)\n\n### July 21, 2025 - Session Management Improvements\n- **Session Token Reuse**: Fixed page refresh creating duplicate sessions - now reuses existing tokens\n- **Logout Tracking**: Fixed logout events not being recorded - added Authorization header to session-end requests\n- **Session Analytics UX**: Removed 5-second auto-refresh per user request to allow uninterrupted scrolling through session history\n- **Manual Refresh**: Kept manual refresh button for on-demand updates\n- **Session Persistence**: Sessions now properly maintain continuity across page refreshes\n\n### July 22, 2025 - Role-Based Dashboard Activities\n- **Privacy Enhancement**: Implemented role-based filtering for recent activities on dashboard\n- **Admin Access**: Admin users continue to see all activities from all users\n- **Non-Admin Privacy**: Non-admin users (sales, support, RM, viewer) now see only their own activities\n- **Data Security**: Prevents unauthorized access to other users' activity information\n- **Compliance**: Aligns with data privacy requirements for multi-user CRM systems","size_bytes":7801},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":2627},"test-logout-scenarios.md":{"content":"# Logout Scenarios Test Plan\n\n## Current Session State\n- Session 93: Active (ID: 93, Token: session_1753096020207_a1zqdj89n)\n- Session 92: Still showing as active - should be cleaned up\n\n## Test Scenarios\n\n### 1. Manual Logout Test\n- Action: Click logout button in header\n- Expected: Session ends with reason 'logout', proper timestamp recorded\n- Status: PENDING\n\n### 2. 15-minute Inactivity Timeout Test\n- Action: Leave browser inactive for 15+ minutes\n- Expected: Session ends with reason 'timeout', automatic logout\n- Status: PENDING\n\n### 3. Browser/Tab Close Test\n- Action: Close browser tab or window\n- Expected: Session ends with reason 'browser_close' via sendBeacon\n- Status: PENDING\n\n### 4. Tab Hidden Timeout Test\n- Action: Switch to another tab for 15+ minutes\n- Expected: Session ends with reason 'browser_close' after visibility timeout\n- Status: PENDING\n\n### 5. Session Persistence Test\n- Action: Refresh page multiple times\n- Expected: Same session maintained, no duplicates created\n- Status: PENDING\n\n## Issues to Fix\n1. Multiple active sessions (92, 93) - should have only one\n2. Session reuse logic needs refinement\n3. Verify all logout methods properly extract and send sessionToken","size_bytes":1201},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":971},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });","size_bytes":482},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedDatabase } from \"./seed\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Seed the database with initial data\n  await seedDatabase();\n  \n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2173},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { z } from \"zod\";\nimport { insertLeadSchema, insertCustomerSchema, insertRfqSchema, insertSupportTicketSchema, insertEmailTemplateSchema, insertLeadFollowUpSchema, userSessions, pageViews, insertUserSessionSchema, insertPageViewSchema } from \"@shared/schema\";\nimport { authMiddleware, requireRole } from \"./middleware/auth\";\nimport { otpService } from \"./services/otpService\";\nimport { emailService } from \"./services/emailService\";\nimport jwt from \"jsonwebtoken\";\nimport { toZonedTime } from 'date-fns-tz';\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\n// Helper function to get real client IP address\nfunction getClientIP(req: any): string {\n  return req.get('X-Forwarded-For')?.split(',')[0]?.trim() || \n         req.get('X-Real-IP') || \n         req.get('CF-Connecting-IP') ||\n         req.ip || \n         req.connection.remoteAddress || \n         \"unknown\";\n}\n\n// Browser detection utility\nfunction parseBrowserInfo(userAgent: string) {\n  let browserName = 'Unknown';\n  let deviceType = 'desktop';\n  let operatingSystem = 'Unknown';\n\n  // Detect browser\n  if (userAgent.includes('Chrome') && !userAgent.includes('Edg')) {\n    browserName = 'Chrome';\n  } else if (userAgent.includes('Firefox')) {\n    browserName = 'Firefox';\n  } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\n    browserName = 'Safari';\n  } else if (userAgent.includes('Edg')) {\n    browserName = 'Edge';\n  } else if (userAgent.includes('Opera') || userAgent.includes('OPR')) {\n    browserName = 'Opera';\n  }\n\n  // Detect device type\n  if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {\n    if (/iPad|Tablet/i.test(userAgent)) {\n      deviceType = 'tablet';\n    } else {\n      deviceType = 'mobile';\n    }\n  }\n\n  // Detect operating system\n  if (userAgent.includes('Windows')) {\n    operatingSystem = 'Windows';\n  } else if (userAgent.includes('Mac')) {\n    operatingSystem = 'macOS';\n  } else if (userAgent.includes('Linux')) {\n    operatingSystem = 'Linux';\n  } else if (userAgent.includes('Android')) {\n    operatingSystem = 'Android';\n  } else if (userAgent.includes('iPhone') || userAgent.includes('iPad')) {\n    operatingSystem = 'iOS';\n  }\n\n  return { browserName, deviceType, operatingSystem };\n}\n\n// Validation schemas\nconst loginSchema = z.object({\n  email: z.string().email(),\n});\n\nconst verifyOTPSchema = z.object({\n  email: z.string().email(),\n  otp: z.string().length(6),\n});\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Authentication routes\n  app.post(\"/api/auth/request-otp\", async (req, res) => {\n    try {\n      const { email } = loginSchema.parse(req.body);\n      \n      // Check if user exists\n      const user = await storage.getUserByEmail(email);\n      if (!user) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n\n      // Generate and send OTP\n      const otp = otpService.generateOTP();\n      const expiresAt = new Date(Date.now() + 10 * 60 * 1000); // 10 minutes\n      \n      await storage.createOTP(email, otp, expiresAt);\n      await emailService.sendOTP(email, otp);\n      \n      // Log attempt\n      const clientIP = req.ip || req.connection.remoteAddress || \"unknown\";\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      const browserInfo = parseBrowserInfo(userAgent);\n      await storage.createLoginLog(user.id, email, clientIP, userAgent, browserInfo.browserName, browserInfo.deviceType, browserInfo.operatingSystem, 'otp_request', false);\n\n      res.json({ message: \"OTP sent successfully\" });\n    } catch (error) {\n      console.error(\"Request OTP error:\", error);\n      res.status(500).json({ message: \"Failed to send OTP\" });\n    }\n  });\n\n  app.post(\"/api/auth/verify-otp\", async (req, res) => {\n    try {\n      const { email, otp } = verifyOTPSchema.parse(req.body);\n      \n      // Verify OTP\n      const validOTP = await storage.getValidOTP(email, otp);\n      if (!validOTP) {\n        return res.status(400).json({ message: \"Invalid or expired OTP\" });\n      }\n\n      // Get user\n      const user = await storage.getUserByEmail(email);\n      if (!user || !user.isActive) {\n        return res.status(401).json({ message: \"User not found or inactive\" });\n      }\n\n      // Mark OTP as used\n      await storage.markOTPAsUsed(validOTP.id);\n      \n      // Update last login\n      await storage.updateUser(user.id, { lastLogin: new Date() });\n\n      // Generate JWT token with session tracking\n      const sessionToken = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n      const token = jwt.sign(\n        { userId: user.id, email: user.email, role: user.role, sessionToken },\n        JWT_SECRET,\n        { expiresIn: \"24h\" }\n      );\n\n      // Enhanced login logging with browser detection\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      \n      // Parse browser info from user agent\n      const browserInfo = parseBrowserInfo(userAgent);\n      \n      // Create new user session\n      await storage.createUserSession({\n        userId: user.id,\n        sessionToken,\n        startTime: new Date(),\n        ipAddress: clientIP,\n        userAgent,\n        browserName: browserInfo.browserName,\n        deviceType: browserInfo.deviceType,\n        operatingSystem: browserInfo.operatingSystem,\n        totalPages: 0\n      });\n      \n      await storage.createLoginLog(\n        user.id, \n        email, \n        clientIP, \n        userAgent, \n        browserInfo.browserName,\n        browserInfo.deviceType,\n        browserInfo.operatingSystem,\n        'login',\n        true\n      );\n      \n      // Log to activity logs as well\n      await storage.createActivityLog(\n        user.id,\n        'user',\n        user.id,\n        'login',\n        { \n          browserName: browserInfo.browserName,\n          deviceType: browserInfo.deviceType,\n          operatingSystem: browserInfo.operatingSystem\n        },\n        clientIP,\n        userAgent\n      );\n\n      res.json({\n        message: \"Login successful\",\n        token,\n        user: {\n          id: user.id,\n          email: user.email,\n          name: user.name,\n          role: user.role,\n        },\n      });\n    } catch (error) {\n      console.error(\"Verify OTP error:\", error);\n      res.status(500).json({ message: \"Login failed\" });\n    }\n  });\n\n  app.post(\"/api/auth/logout\", authMiddleware, async (req, res) => {\n    // In a production app, you might want to maintain a token blacklist\n    res.json({ message: \"Logout successful\" });\n  });\n\n  app.post(\"/api/auth/session-end\", async (req, res) => {\n    try {\n      console.log('📥 Session end request received:', req.body);\n      console.log('📥 Request headers:', req.headers);\n      \n      const { reason, timestamp, sessionDuration, token, sessionToken: sessionTokenFromBody } = req.body;\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      const browserInfo = parseBrowserInfo(userAgent);\n      \n      // Extract user info from token if available\n      let userId, userEmail, decoded, sessionTokenFromJWT;\n      let authToken = token; // Try token from body first (for sendBeacon)\n      \n      if (!authToken) {\n        // Fallback to Authorization header\n        const authHeader = req.get(\"Authorization\");\n        if (authHeader?.startsWith(\"Bearer \")) {\n          authToken = authHeader.substring(7);\n        }\n      }\n      \n      if (authToken) {\n        try {\n          decoded = jwt.verify(authToken, JWT_SECRET) as any;\n          userId = decoded.userId;\n          userEmail = decoded.email;\n          sessionTokenFromJWT = decoded.sessionToken;\n          console.log(`🔑 Token verified for session end - User: ${userEmail}, SessionToken: ${sessionTokenFromJWT}`);\n        } catch (jwtError: any) {\n          // Token might be expired or invalid, but we still want to log the session end attempt\n          console.log(\"❌ Invalid token for session end:\", jwtError.message);\n          console.log(\"Token being verified:\", authToken?.substring(0, 50) + \"...\");\n        }\n      } else {\n        console.log(\"❌ No authToken found for session end\");\n      }\n      \n      // If we have user info, log the session end\n      if (userId && userEmail) {\n        // Log session end in login logs\n        await storage.createLoginLog(\n          userId,\n          userEmail,\n          clientIP,\n          userAgent,\n          browserInfo.browserName,\n          browserInfo.deviceType,\n          browserInfo.operatingSystem,\n          reason || 'logout',\n          true\n        );\n        \n        // Create detailed audit log entry for automatic session termination\n        const auditDetails = {\n          reason,\n          timestamp: timestamp || new Date().toISOString(),\n          sessionDuration: sessionDuration || 0,\n          browserName: browserInfo.browserName,\n          deviceType: browserInfo.deviceType,\n          operatingSystem: browserInfo.operatingSystem,\n          clientIP,\n          userAgent\n        };\n        \n        let actionDescription = 'logout';\n        if (reason === 'timeout') {\n          actionDescription = 'auto_logout_timeout';\n        } else if (reason === 'browser_close') {\n          actionDescription = 'auto_logout_browser_close';\n        } else if (reason === 'logout') {\n          actionDescription = 'logout';\n        }\n        \n        // End the user session - try sessionToken first, then fallback to most recent active session\n        const sessionTokenToUse = sessionTokenFromBody || sessionTokenFromJWT;\n        let session = null;\n        \n        if (sessionTokenToUse) {\n          session = await storage.getUserSessionByToken(sessionTokenToUse);\n          if (session) {\n            await storage.endUserSession(session.id, reason || 'logout');\n            console.log(`📋 Session ${session.id} ended for user ${userEmail} - Reason: ${reason || 'logout'}`);\n          } else {\n            console.log(`⚠️ Session not found for token: ${sessionTokenToUse}, trying fallback...`);\n          }\n        }\n        \n        // Fallback: Find most recent active session for this user\n        if (!session && userId) {\n          const activeSessions = await storage.getActiveUserSessions(userId);\n          if (activeSessions.length > 0) {\n            const mostRecentSession = activeSessions[0]; // Most recent first\n            await storage.endUserSession(mostRecentSession.id, reason || 'logout');\n            console.log(`📋 Fallback: Session ${mostRecentSession.id} ended for user ${userEmail} - Reason: ${reason || 'logout'}`);\n          } else {\n            console.log(`⚠️ No active sessions found for user ${userEmail}`);\n          }\n        }\n        \n        // Log to activity logs with detailed audit information\n        await storage.createActivityLog(\n          userId,\n          'user',\n          userId,\n          actionDescription,\n          auditDetails,\n          clientIP,\n          userAgent\n        );\n        \n        console.log(`📋 Session ended for user ${userEmail} (ID: ${userId}) - Reason: ${reason}`);\n      } else {\n        console.log(`⚠️ Session end attempt without valid user context - Reason: ${reason}`);\n      }\n      \n      res.json({ message: \"Session ended\" });\n    } catch (error) {\n      console.error(\"Session end error:\", error);\n      res.status(500).json({ message: \"Failed to end session\" });\n    }\n  });\n\n  app.get(\"/api/auth/me\", authMiddleware, async (req, res) => {\n    const user = await storage.getUser((req as any).user.userId);\n    if (!user) {\n      return res.status(404).json({ message: \"User not found\" });\n    }\n    \n    res.json({\n      id: user.id,\n      email: user.email,\n      name: user.name,\n      role: user.role,\n    });\n  });\n\n  // Dashboard routes\n  app.get(\"/api/dashboard/kpis\", authMiddleware, async (req, res) => {\n    try {\n      const kpis = await storage.getDashboardKPIs();\n      res.json(kpis);\n    } catch (error) {\n      console.error(\"Dashboard KPIs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch KPIs\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/lead-sources\", authMiddleware, async (req, res) => {\n    try {\n      const leadSources = await storage.getLeadSourceAnalytics();\n      res.json(leadSources);\n    } catch (error) {\n      console.error(\"Lead sources error:\", error);\n      res.status(500).json({ message: \"Failed to fetch lead sources\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/sales-performance\", authMiddleware, async (req, res) => {\n    try {\n      const performance = await storage.getSalesPerformance();\n      res.json(performance);\n    } catch (error) {\n      console.error(\"Sales performance error:\", error);\n      res.status(500).json({ message: \"Failed to fetch sales performance\" });\n    }\n  });\n\n  app.get(\"/api/dashboard/recent-activities\", authMiddleware, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      let activities;\n      \n      if (user.role === 'admin') {\n        // Admin sees all activities\n        activities = await storage.getRecentActivities(10);\n      } else {\n        // Non-admin users see only their own activities\n        activities = await storage.getRecentActivitiesByUser(user.userId, 10);\n      }\n      \n      res.json(activities);\n    } catch (error) {\n      console.error(\"Recent activities error:\", error);\n      res.status(500).json({ message: \"Failed to fetch recent activities\" });\n    }\n  });\n\n  // Leads routes\n  app.get(\"/api/leads\", authMiddleware, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      let leads;\n      \n      if (user.role === 'admin') {\n        leads = await storage.getAllLeads();\n      } else {\n        leads = await storage.getLeadsByAssignee(user.userId);\n      }\n      \n      res.json(leads);\n    } catch (error) {\n      console.error(\"Get leads error:\", error);\n      res.status(500).json({ message: \"Failed to fetch leads\" });\n    }\n  });\n\n  app.post(\"/api/leads\", authMiddleware, requireRole(['admin', 'sales']), async (req, res) => {\n    try {\n      const leadData = insertLeadSchema.parse(req.body);\n      const lead = await storage.createLead(leadData);\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'lead',\n        lead.id,\n        'create',\n        { leadName: lead.name },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(lead);\n    } catch (error) {\n      console.error(\"Create lead error:\", error);\n      res.status(500).json({ message: \"Failed to create lead\" });\n    }\n  });\n\n  app.put(\"/api/leads/:id\", authMiddleware, requireRole(['admin', 'sales']), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const leadData = insertLeadSchema.partial().parse(req.body);\n      const lead = await storage.updateLead(id, leadData);\n      \n      if (!lead) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'lead',\n        lead.id,\n        'update',\n        { updates: leadData },\n        clientIP,\n        userAgent\n      );\n      \n      res.json(lead);\n    } catch (error) {\n      console.error(\"Update lead error:\", error);\n      res.status(500).json({ message: \"Failed to update lead\" });\n    }\n  });\n\n  app.delete(\"/api/leads/:id\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const success = await storage.deleteLead(id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Lead not found\" });\n      }\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'lead',\n        id,\n        'delete',\n        {},\n        clientIP,\n        userAgent\n      );\n      \n      res.json({ message: \"Lead deleted successfully\" });\n    } catch (error) {\n      console.error(\"Delete lead error:\", error);\n      res.status(500).json({ message: \"Failed to delete lead\" });\n    }\n  });\n\n  // Customers routes\n  app.get(\"/api/customers\", authMiddleware, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      let customers;\n      \n      if (user.role === 'admin') {\n        customers = await storage.getAllCustomers();\n      } else if (user.role === 'rm') {\n        customers = await storage.getCustomersByRM(user.userId);\n      } else {\n        customers = await storage.getAllCustomers();\n      }\n      \n      res.json(customers);\n    } catch (error) {\n      console.error(\"Get customers error:\", error);\n      res.status(500).json({ message: \"Failed to fetch customers\" });\n    }\n  });\n\n  app.post(\"/api/customers\", authMiddleware, requireRole(['admin', 'sales', 'rm']), async (req, res) => {\n    try {\n      const customerData = insertCustomerSchema.parse(req.body);\n      const customer = await storage.createCustomer(customerData);\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'customer',\n        customer.id,\n        'create',\n        { customerName: customer.name },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(customer);\n    } catch (error) {\n      console.error(\"Create customer error:\", error);\n      res.status(500).json({ message: \"Failed to create customer\" });\n    }\n  });\n\n  app.put(\"/api/customers/:id\", authMiddleware, async (req, res) => {\n    try {\n      const id = parseInt(req.params.id);\n      const customerData = insertCustomerSchema.partial().parse(req.body);\n      const customer = await storage.updateCustomer(id, customerData);\n      \n      if (!customer) {\n        return res.status(404).json({ message: \"Customer not found\" });\n      }\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'customer',\n        customer.id,\n        'update',\n        { updates: customerData },\n        clientIP,\n        userAgent\n      );\n      \n      res.json(customer);\n    } catch (error) {\n      console.error(\"Update customer error:\", error);\n      res.status(500).json({ message: \"Failed to update customer\" });\n    }\n  });\n\n  // RFQ routes\n  app.get(\"/api/rfqs\", authMiddleware, async (req, res) => {\n    try {\n      const rfqs = await storage.getAllRFQs();\n      res.json(rfqs);\n    } catch (error) {\n      console.error(\"Get RFQs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch RFQs\" });\n    }\n  });\n\n  app.post(\"/api/rfqs\", authMiddleware, requireRole(['admin', 'sales', 'rm']), async (req, res) => {\n    try {\n      const rfqData = insertRfqSchema.parse(req.body);\n      // Generate RFQ number\n      const rfqNumber = `RFQ-${Date.now()}`;\n      const rfq = await storage.createRFQ({ ...rfqData, rfqNumber });\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'rfq',\n        rfq.id,\n        'create',\n        { rfqNumber: rfq.rfqNumber },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(rfq);\n    } catch (error) {\n      console.error(\"Create RFQ error:\", error);\n      res.status(500).json({ message: \"Failed to create RFQ\" });\n    }\n  });\n\n  // Support tickets routes\n  app.get(\"/api/support-tickets\", authMiddleware, async (req, res) => {\n    try {\n      const user = (req as any).user;\n      let tickets;\n      \n      if (user.role === 'admin' || user.role === 'support') {\n        tickets = await storage.getAllSupportTickets();\n      } else {\n        tickets = await storage.getTicketsByAssignee(user.userId);\n      }\n      \n      res.json(tickets);\n    } catch (error) {\n      console.error(\"Get support tickets error:\", error);\n      res.status(500).json({ message: \"Failed to fetch support tickets\" });\n    }\n  });\n\n  app.post(\"/api/support-tickets\", authMiddleware, async (req, res) => {\n    try {\n      const ticketData = insertSupportTicketSchema.parse(req.body);\n      // Generate ticket number\n      const ticketNumber = `TKT-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n      const ticket = await storage.createSupportTicket({ ...ticketData, ticketNumber } as any);\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'ticket',\n        ticket.id,\n        'create',\n        { ticketNumber: ticket.ticketNumber },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(ticket);\n    } catch (error) {\n      console.error(\"Create support ticket error:\", error);\n      res.status(500).json({ message: \"Failed to create support ticket\" });\n    }\n  });\n\n  // Email templates routes\n  app.get(\"/api/email-templates\", authMiddleware, async (req, res) => {\n    try {\n      const templates = await storage.getAllEmailTemplates();\n      res.json(templates);\n    } catch (error) {\n      console.error(\"Get email templates error:\", error);\n      res.status(500).json({ message: \"Failed to fetch email templates\" });\n    }\n  });\n\n  app.post(\"/api/email-templates\", authMiddleware, requireRole(['admin', 'sales']), async (req, res) => {\n    try {\n      const templateData = insertEmailTemplateSchema.parse(req.body);\n      const template = await storage.createEmailTemplate(templateData);\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'template',\n        template.id,\n        'create',\n        { templateName: template.name },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(template);\n    } catch (error) {\n      console.error(\"Create email template error:\", error);\n      res.status(500).json({ message: \"Failed to create email template\" });\n    }\n  });\n\n  // User management routes (admin only)\n  app.get(\"/api/users\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const users = await storage.getAllUsers();\n      res.json(users);\n    } catch (error) {\n      console.error(\"Get users error:\", error);\n      res.status(500).json({ message: \"Failed to fetch users\" });\n    }\n  });\n\n  app.post(\"/api/users\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const userData = req.body;\n      const user = await storage.createUser(userData);\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'user',\n        user.id,\n        'create',\n        { userName: user.name, userRole: user.role },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(user);\n    } catch (error) {\n      console.error(\"Create user error:\", error);\n      res.status(500).json({ message: \"Failed to create user\" });\n    }\n  });\n\n  app.put(\"/api/users/:id\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const userId = parseInt(req.params.id);\n      const userData = req.body;\n      \n      // Check if trying to deactivate the main admin account\n      if (userData.hasOwnProperty('isActive') && !userData.isActive) {\n        const targetUser = await storage.getUser(userId);\n        if (targetUser && targetUser.email === 'vikas.kukreja@meradhan.co') {\n          return res.status(403).json({ \n            message: \"Cannot deactivate the main administrator account\" \n          });\n        }\n      }\n      \n      const updatedUser = await storage.updateUser(userId, userData);\n      if (!updatedUser) {\n        return res.status(404).json({ message: \"User not found\" });\n      }\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'user',\n        userId,\n        'update',\n        { userName: updatedUser.name, changes: Object.keys(userData) },\n        clientIP,\n        userAgent\n      );\n      \n      res.json(updatedUser);\n    } catch (error) {\n      console.error(\"Update user error:\", error);\n      res.status(500).json({ message: \"Failed to update user\" });\n    }\n  });\n\n  // Lead follow-up routes\n  app.get(\"/api/leads/:id/follow-ups\", authMiddleware, async (req, res) => {\n    try {\n      const leadId = parseInt(req.params.id);\n      const followUps = await storage.getLeadFollowUps(leadId);\n      res.json(followUps);\n    } catch (error) {\n      console.error(\"Get lead follow-ups error:\", error);\n      res.status(500).json({ message: \"Failed to fetch follow-ups\" });\n    }\n  });\n\n  app.post(\"/api/leads/:id/follow-ups\", authMiddleware, async (req, res) => {\n    try {\n      const leadId = parseInt(req.params.id);\n      const followUpData = insertLeadFollowUpSchema.parse({\n        ...req.body,\n        leadId,\n        createdBy: (req as any).user.userId,\n      });\n      \n      const followUp = await storage.createLeadFollowUp(followUpData);\n      \n      // Log activity\n      const clientIP = getClientIP(req);\n      const userAgent = req.get(\"User-Agent\") || \"unknown\";\n      await storage.createActivityLog(\n        (req as any).user.userId,\n        'lead',\n        leadId,\n        'update',\n        { action: 'follow_up_added', note: followUpData.note },\n        clientIP,\n        userAgent\n      );\n      \n      res.status(201).json(followUp);\n    } catch (error) {\n      console.error(\"Create follow-up error:\", error);\n      res.status(500).json({ message: \"Failed to create follow-up\" });\n    }\n  });\n\n  // Activity logs routes (admin only)\n  app.get(\"/api/activity-logs\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const logs = await storage.getRecentActivities(50);\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Get activity logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch activity logs\" });\n    }\n  });\n\n  // Login logs routes (admin only)\n  app.get(\"/api/login-logs\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const logs = await storage.getAllLoginLogs();\n      res.json(logs);\n    } catch (error) {\n      console.error(\"Get login logs error:\", error);\n      res.status(500).json({ message: \"Failed to fetch login logs\" });\n    }\n  });\n\n  // Page tracking routes\n  app.post(\"/api/page-tracking/start\", authMiddleware, async (req: any, res) => {\n    try {\n      const { sessionToken, pagePath, pageTitle, referrer } = req.body;\n      const userId = req.user!.userId;\n      const ipAddress = getClientIP(req);\n      const userAgent = req.get('User-Agent') || 'Unknown';\n\n      // Get or create session - first check by token, then by active sessions for this user\n      let session = await storage.getUserSessionByToken(sessionToken);\n      if (!session) {\n        // Check if there's already an active session for this user\n        const activeSessions = await storage.getActiveUserSessions(userId);\n        if (activeSessions.length > 0) {\n          // Reuse the most recent active session\n          session = activeSessions[0];\n          console.log(`🔄 Reusing existing active session ${session.id} for user ${userId}`);\n        } else {\n          // Create new session only if no active sessions exist\n          const browserInfo = parseBrowserInfo(userAgent);\n          session = await storage.createUserSession({\n            userId,\n            sessionToken,\n            ipAddress,\n            userAgent,\n            browserName: browserInfo.browserName,\n            deviceType: browserInfo.deviceType,\n            operatingSystem: browserInfo.operatingSystem,\n          });\n          console.log(`✨ Created new session ${session.id} for user ${userId}`);\n        }\n      } else {\n        console.log(`♻️ Found existing session ${session.id} for token ${sessionToken}`);\n      }\n\n      // Create page view record\n      const pageView = await storage.createPageView({\n        sessionId: session.id,\n        userId,\n        pagePath,\n        pageTitle,\n        referrer: referrer || null,\n      });\n\n      res.json({ pageViewId: pageView.id, sessionId: session.id });\n    } catch (error) {\n      console.error(\"Error starting page tracking:\", error);\n      res.status(500).json({ message: \"Failed to start page tracking\" });\n    }\n  });\n\n  app.post(\"/api/page-tracking/end\", async (req, res) => {\n    try {\n      let { pageViewId, exitTime, duration, scrollDepth, interactions, token } = req.body;\n\n      // Handle sendBeacon requests (from beforeunload)\n      if (!token && req.headers.authorization) {\n        token = req.headers.authorization.replace('Bearer ', '');\n      }\n\n      if (!token) {\n        return res.status(401).json({ message: \"Access token required\" });\n      }\n\n      // Verify token\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      if (!decoded) {\n        return res.status(401).json({ message: \"Invalid token\" });\n      }\n\n      await storage.endPageView(pageViewId, {\n        exitTime: new Date(exitTime),\n        duration,\n        scrollDepth: scrollDepth || 0,\n        interactions: interactions || 0,\n      });\n\n      res.json({ message: \"Page tracking ended successfully\" });\n    } catch (error) {\n      console.error(\"Error ending page tracking:\", error);\n      res.status(500).json({ message: \"Failed to end page tracking\" });\n    }\n  });\n\n  // Update page tracking (for special actions like logout)\n  app.post(\"/api/page-tracking/update\", authMiddleware, async (req: any, res) => {\n    try {\n      const { pageViewId, interactions, action } = req.body;\n      \n      await storage.updatePageView(pageViewId, {\n        interactions,\n        action,\n      });\n\n      res.json({ message: \"Page tracking updated successfully\" });\n    } catch (error) {\n      console.error('Page tracking update error:', error);\n      res.status(500).json({ error: \"Failed to update page tracking\" });\n    }\n  });\n\n  // Get session analytics\n  app.get(\"/api/session-analytics\", authMiddleware, requireRole(['admin']), async (req, res) => {\n    try {\n      const { startDate, endDate, userId } = req.query;\n      const sessions = await storage.getSessionAnalytics({\n        startDate: startDate ? new Date(startDate as string) : undefined,\n        endDate: endDate ? new Date(endDate as string) : undefined,\n        userId: userId ? parseInt(userId as string) : undefined,\n      });\n      res.json(sessions);\n    } catch (error) {\n      console.error(\"Error fetching session analytics:\", error);\n      res.status(500).json({ message: \"Failed to fetch session analytics\" });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":31622},"server/seed.ts":{"content":"import { db } from \"./db\";\nimport { users } from \"@shared/schema\";\nimport { eq } from \"drizzle-orm\";\n\nexport async function seedDatabase() {\n  try {\n    // Check if admin user already exists\n    const existingAdmin = await db.select().from(users).where(eq(users.email, \"vikas.kukreja@meradhan.co\"));\n    \n    if (existingAdmin.length === 0) {\n      // Create default admin user\n      const [adminUser] = await db.insert(users).values({\n        email: \"vikas.kukreja@meradhan.co\",\n        name: \"Vikas Kukreja\",\n        role: \"admin\",\n        isActive: true,\n      }).returning();\n      \n      console.log(\"✅ Default admin user created:\", adminUser.email);\n    } else {\n      console.log(\"ℹ️ Admin user already exists\");\n    }\n  } catch (error) {\n    console.error(\"❌ Error seeding database:\", error);\n  }\n}","size_bytes":814},"server/storage.ts":{"content":"import { \n  users, \n  leads, \n  customers, \n  rfqs, \n  supportTickets, \n  emailTemplates, \n  subscriptions, \n  otps, \n  loginLogs, \n  activityLogs,\n  leadFollowUps,\n  userSessions,\n  pageViews,\n  type User, \n  type InsertUser,\n  type Lead,\n  type InsertLead,\n  type Customer,\n  type InsertCustomer,\n  type RFQ,\n  type InsertRFQ,\n  type SupportTicket,\n  type InsertSupportTicket,\n  type EmailTemplate,\n  type InsertEmailTemplate,\n  type Subscription,\n  type InsertSubscription,\n  type OTP,\n  type LoginLog,\n  type ActivityLog,\n  type LeadFollowUp,\n  type InsertLeadFollowUp,\n  type UserSession,\n  type InsertUserSession,\n  type PageView,\n  type InsertPageView\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, and, desc, asc, like, sql, count, isNull } from \"drizzle-orm\";\n\nexport interface IStorage {\n  // User methods\n  getUser(id: number): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined>;\n  getAllUsers(): Promise<User[]>;\n  \n  // OTP methods\n  createOTP(email: string, otp: string, expiresAt: Date): Promise<OTP>;\n  getValidOTP(email: string, otp: string): Promise<OTP | undefined>;\n  markOTPAsUsed(id: number): Promise<void>;\n  \n  // Login log methods\n  createLoginLog(userId: number | null, email: string, ipAddress: string, userAgent: string, browserName?: string, deviceType?: string, operatingSystem?: string, sessionType?: string, success?: boolean): Promise<LoginLog>;\n  getAllLoginLogs(): Promise<LoginLog[]>;\n  \n  // Lead methods\n  getAllLeads(): Promise<Lead[]>;\n  getLeadById(id: number): Promise<Lead | undefined>;\n  createLead(lead: InsertLead): Promise<Lead>;\n  updateLead(id: number, lead: Partial<InsertLead>): Promise<Lead | undefined>;\n  deleteLead(id: number): Promise<boolean>;\n  getLeadsByAssignee(userId: number): Promise<Lead[]>;\n  \n  // Customer methods\n  getAllCustomers(): Promise<Customer[]>;\n  getCustomerById(id: number): Promise<Customer | undefined>;\n  createCustomer(customer: InsertCustomer): Promise<Customer>;\n  updateCustomer(id: number, customer: Partial<InsertCustomer>): Promise<Customer | undefined>;\n  deleteCustomer(id: number): Promise<boolean>;\n  getCustomersByRM(rmId: number): Promise<Customer[]>;\n  \n  // RFQ methods\n  getAllRFQs(): Promise<RFQ[]>;\n  getRFQById(id: number): Promise<RFQ | undefined>;\n  createRFQ(rfq: InsertRFQ): Promise<RFQ>;\n  updateRFQ(id: number, rfq: Partial<InsertRFQ>): Promise<RFQ | undefined>;\n  deleteRFQ(id: number): Promise<boolean>;\n  getRFQsByCustomer(customerId: number): Promise<RFQ[]>;\n  \n  // Support ticket methods\n  getAllSupportTickets(): Promise<SupportTicket[]>;\n  getSupportTicketById(id: number): Promise<SupportTicket | undefined>;\n  createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket>;\n  updateSupportTicket(id: number, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket | undefined>;\n  deleteSupportTicket(id: number): Promise<boolean>;\n  getTicketsByAssignee(userId: number): Promise<SupportTicket[]>;\n  \n  // Email template methods\n  getAllEmailTemplates(): Promise<EmailTemplate[]>;\n  getEmailTemplateById(id: number): Promise<EmailTemplate | undefined>;\n  createEmailTemplate(template: InsertEmailTemplate): Promise<EmailTemplate>;\n  updateEmailTemplate(id: number, template: Partial<InsertEmailTemplate>): Promise<EmailTemplate | undefined>;\n  deleteEmailTemplate(id: number): Promise<boolean>;\n  \n  // Subscription methods\n  getAllSubscriptions(): Promise<Subscription[]>;\n  getSubscriptionsByCustomer(customerId: number): Promise<Subscription[]>;\n  createSubscription(subscription: InsertSubscription): Promise<Subscription>;\n  updateSubscription(id: number, subscription: Partial<InsertSubscription>): Promise<Subscription | undefined>;\n  \n  // Activity log methods\n  createActivityLog(userId: number, entityType: string, entityId: number, action: string, details: any, ipAddress: string, userAgent: string): Promise<ActivityLog>;\n  getActivityLogs(limit?: number): Promise<ActivityLog[]>;\n  \n  // Session tracking methods\n  createUserSession(session: InsertUserSession): Promise<UserSession>;\n  getUserSessionByToken(sessionToken: string): Promise<UserSession | undefined>;\n  endUserSession(sessionId: number, endReason: string): Promise<void>;\n  getSessionAnalytics(params: { startDate?: Date; endDate?: Date; userId?: number }): Promise<any[]>;\n  \n  // Page tracking methods\n  createPageView(pageView: InsertPageView): Promise<PageView>;\n  endPageView(pageViewId: number, updates: { exitTime: Date; duration: number; scrollDepth: number; interactions: number }): Promise<void>;\n  \n  // Dashboard/Analytics methods\n  getDashboardKPIs(): Promise<{\n    activeLeads: number;\n    activeCustomers: number;\n    totalInvestment: string;\n    pendingRFQs: number;\n  }>;\n  \n  getLeadSourceAnalytics(): Promise<{source: string, count: number}[]>;\n  getSalesPerformance(): Promise<{period: string, amount: string}[]>;\n  getRecentActivities(limit?: number): Promise<any[]>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  // User methods\n  async getUser(id: number): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user || undefined;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user || undefined;\n  }\n\n  async createUser(user: InsertUser): Promise<User> {\n    const [newUser] = await db.insert(users).values({\n      ...user,\n      updatedAt: new Date(),\n    }).returning();\n    return newUser;\n  }\n\n  async updateUser(id: number, user: Partial<InsertUser>): Promise<User | undefined> {\n    const [updatedUser] = await db.update(users)\n      .set({ ...user, updatedAt: new Date() })\n      .where(eq(users.id, id))\n      .returning();\n    return updatedUser || undefined;\n  }\n\n  async getAllUsers(): Promise<User[]> {\n    return await db.select().from(users).orderBy(asc(users.name));\n  }\n\n  // OTP methods\n  async createOTP(email: string, otp: string, expiresAt: Date): Promise<OTP> {\n    const [newOTP] = await db.insert(otps).values({\n      email,\n      otp,\n      expiresAt,\n    }).returning();\n    return newOTP;\n  }\n\n  async getValidOTP(email: string, otp: string): Promise<OTP | undefined> {\n    const [validOTP] = await db.select().from(otps)\n      .where(\n        and(\n          eq(otps.email, email),\n          eq(otps.otp, otp),\n          eq(otps.isUsed, false),\n          sql`${otps.expiresAt} > NOW()`\n        )\n      );\n    return validOTP || undefined;\n  }\n\n  async markOTPAsUsed(id: number): Promise<void> {\n    await db.update(otps).set({ isUsed: true }).where(eq(otps.id, id));\n  }\n\n  // Login log methods\n  async createLoginLog(userId: number | null, email: string, ipAddress: string, userAgent: string, browserName?: string, deviceType?: string, operatingSystem?: string, sessionType: string = 'login', success: boolean = true): Promise<LoginLog> {\n    // Convert to IST (UTC+5:30) - simple and reliable  \n    const now = new Date();\n    const istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n    const [loginLog] = await db.insert(loginLogs).values({\n      userId,\n      email,\n      ipAddress,\n      userAgent,\n      browserName,\n      deviceType,\n      operatingSystem,\n      sessionType,\n      success,\n      createdAt: istTime,\n    }).returning();\n    return loginLog;\n  }\n\n  async getAllLoginLogs(): Promise<LoginLog[]> {\n    return await db.select().from(loginLogs).orderBy(desc(loginLogs.createdAt));\n  }\n\n  // Lead methods\n  async getAllLeads(): Promise<Lead[]> {\n    return await db.select().from(leads).orderBy(desc(leads.createdAt));\n  }\n\n  async getLeadById(id: number): Promise<Lead | undefined> {\n    const [lead] = await db.select().from(leads).where(eq(leads.id, id));\n    return lead || undefined;\n  }\n\n  async createLead(lead: InsertLead): Promise<Lead> {\n    const [newLead] = await db.insert(leads).values({\n      ...lead,\n      updatedAt: new Date(),\n    }).returning();\n    return newLead;\n  }\n\n  async updateLead(id: number, lead: Partial<InsertLead>): Promise<Lead | undefined> {\n    const [updatedLead] = await db.update(leads)\n      .set({ ...lead, updatedAt: new Date() })\n      .where(eq(leads.id, id))\n      .returning();\n    return updatedLead || undefined;\n  }\n\n  async deleteLead(id: number): Promise<boolean> {\n    const result = await db.delete(leads).where(eq(leads.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getLeadsByAssignee(userId: number): Promise<Lead[]> {\n    return await db.select().from(leads).where(eq(leads.assignedTo, userId)).orderBy(desc(leads.createdAt));\n  }\n\n  // Lead follow-up methods\n  async getLeadFollowUps(leadId: number): Promise<LeadFollowUp[]> {\n    return await db.select({\n      id: leadFollowUps.id,\n      leadId: leadFollowUps.leadId,\n      note: leadFollowUps.note,\n      followUpDate: leadFollowUps.followUpDate,\n      createdBy: leadFollowUps.createdBy,\n      createdAt: leadFollowUps.createdAt,\n      createdByName: users.name,\n    }).from(leadFollowUps)\n    .leftJoin(users, eq(leadFollowUps.createdBy, users.id))\n    .where(eq(leadFollowUps.leadId, leadId))\n    .orderBy(desc(leadFollowUps.createdAt));\n  }\n\n  async createLeadFollowUp(followUp: InsertLeadFollowUp): Promise<LeadFollowUp> {\n    const [newFollowUp] = await db.insert(leadFollowUps).values(followUp).returning();\n    return newFollowUp;\n  }\n\n  // Customer methods\n  async getAllCustomers(): Promise<Customer[]> {\n    return await db.select().from(customers).orderBy(desc(customers.createdAt));\n  }\n\n  async getCustomerById(id: number): Promise<Customer | undefined> {\n    const [customer] = await db.select().from(customers).where(eq(customers.id, id));\n    return customer || undefined;\n  }\n\n  async createCustomer(customer: InsertCustomer): Promise<Customer> {\n    const [newCustomer] = await db.insert(customers).values({\n      ...customer,\n      updatedAt: new Date(),\n    }).returning();\n    return newCustomer;\n  }\n\n  async updateCustomer(id: number, customer: Partial<InsertCustomer>): Promise<Customer | undefined> {\n    const [updatedCustomer] = await db.update(customers)\n      .set({ ...customer, updatedAt: new Date() })\n      .where(eq(customers.id, id))\n      .returning();\n    return updatedCustomer || undefined;\n  }\n\n  async deleteCustomer(id: number): Promise<boolean> {\n    const result = await db.delete(customers).where(eq(customers.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getCustomersByRM(rmId: number): Promise<Customer[]> {\n    return await db.select().from(customers).where(eq(customers.relationshipManager, rmId)).orderBy(desc(customers.createdAt));\n  }\n\n  // RFQ methods\n  async getAllRFQs(): Promise<RFQ[]> {\n    return await db.select().from(rfqs).orderBy(desc(rfqs.createdAt));\n  }\n\n  async getRFQById(id: number): Promise<RFQ | undefined> {\n    const [rfq] = await db.select().from(rfqs).where(eq(rfqs.id, id));\n    return rfq || undefined;\n  }\n\n  async createRFQ(rfq: InsertRFQ): Promise<RFQ> {\n    const [newRFQ] = await db.insert(rfqs).values({\n      ...rfq,\n      updatedAt: new Date(),\n    }).returning();\n    return newRFQ;\n  }\n\n  async updateRFQ(id: number, rfq: Partial<InsertRFQ>): Promise<RFQ | undefined> {\n    const [updatedRFQ] = await db.update(rfqs)\n      .set({ ...rfq, updatedAt: new Date() })\n      .where(eq(rfqs.id, id))\n      .returning();\n    return updatedRFQ || undefined;\n  }\n\n  async deleteRFQ(id: number): Promise<boolean> {\n    const result = await db.delete(rfqs).where(eq(rfqs.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getRFQsByCustomer(customerId: number): Promise<RFQ[]> {\n    return await db.select().from(rfqs).where(eq(rfqs.customerId, customerId)).orderBy(desc(rfqs.createdAt));\n  }\n\n  // Support ticket methods\n  async getAllSupportTickets(): Promise<SupportTicket[]> {\n    return await db.select().from(supportTickets).orderBy(desc(supportTickets.createdAt));\n  }\n\n  async getSupportTicketById(id: number): Promise<SupportTicket | undefined> {\n    const [ticket] = await db.select().from(supportTickets).where(eq(supportTickets.id, id));\n    return ticket || undefined;\n  }\n\n  async createSupportTicket(ticket: InsertSupportTicket): Promise<SupportTicket> {\n    // Generate unique ticket number\n    const ticketNumber = `TKT-${Date.now()}-${Math.random().toString(36).substr(2, 5).toUpperCase()}`;\n    const [newTicket] = await db.insert(supportTickets).values({\n      ...ticket,\n      ticketNumber,\n      updatedAt: new Date(),\n    }).returning();\n    return newTicket;\n  }\n\n  async updateSupportTicket(id: number, ticket: Partial<InsertSupportTicket>): Promise<SupportTicket | undefined> {\n    const [updatedTicket] = await db.update(supportTickets)\n      .set({ ...ticket, updatedAt: new Date() })\n      .where(eq(supportTickets.id, id))\n      .returning();\n    return updatedTicket || undefined;\n  }\n\n  async deleteSupportTicket(id: number): Promise<boolean> {\n    const result = await db.delete(supportTickets).where(eq(supportTickets.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  async getTicketsByAssignee(userId: number): Promise<SupportTicket[]> {\n    return await db.select().from(supportTickets).where(eq(supportTickets.assignedTo, userId)).orderBy(desc(supportTickets.createdAt));\n  }\n\n  // Email template methods\n  async getAllEmailTemplates(): Promise<EmailTemplate[]> {\n    return await db.select().from(emailTemplates).where(eq(emailTemplates.isActive, true)).orderBy(asc(emailTemplates.name));\n  }\n\n  async getEmailTemplateById(id: number): Promise<EmailTemplate | undefined> {\n    const [template] = await db.select().from(emailTemplates).where(eq(emailTemplates.id, id));\n    return template || undefined;\n  }\n\n  async createEmailTemplate(template: InsertEmailTemplate): Promise<EmailTemplate> {\n    const [newTemplate] = await db.insert(emailTemplates).values({\n      ...template,\n      updatedAt: new Date(),\n    }).returning();\n    return newTemplate;\n  }\n\n  async updateEmailTemplate(id: number, template: Partial<InsertEmailTemplate>): Promise<EmailTemplate | undefined> {\n    const [updatedTemplate] = await db.update(emailTemplates)\n      .set({ ...template, updatedAt: new Date() })\n      .where(eq(emailTemplates.id, id))\n      .returning();\n    return updatedTemplate || undefined;\n  }\n\n  async deleteEmailTemplate(id: number): Promise<boolean> {\n    const result = await db.update(emailTemplates).set({ isActive: false }).where(eq(emailTemplates.id, id));\n    return (result.rowCount ?? 0) > 0;\n  }\n\n  // Subscription methods\n  async getAllSubscriptions(): Promise<Subscription[]> {\n    return await db.select().from(subscriptions).orderBy(desc(subscriptions.createdAt));\n  }\n\n  async getSubscriptionsByCustomer(customerId: number): Promise<Subscription[]> {\n    return await db.select().from(subscriptions).where(eq(subscriptions.customerId, customerId));\n  }\n\n  async createSubscription(subscription: InsertSubscription): Promise<Subscription> {\n    const [newSubscription] = await db.insert(subscriptions).values({\n      ...subscription,\n      updatedAt: new Date(),\n    }).returning();\n    return newSubscription;\n  }\n\n  async updateSubscription(id: number, subscription: Partial<InsertSubscription>): Promise<Subscription | undefined> {\n    const [updatedSubscription] = await db.update(subscriptions)\n      .set({ ...subscription, updatedAt: new Date() })\n      .where(eq(subscriptions.id, id))\n      .returning();\n    return updatedSubscription || undefined;\n  }\n\n  // Activity log methods\n  async createActivityLog(userId: number, entityType: string, entityId: number, action: string, details: any, ipAddress: string, userAgent: string): Promise<ActivityLog> {\n    // Convert to IST (UTC+5:30) - simple and reliable\n    const now = new Date();\n    const istTime = new Date(now.getTime() + (5.5 * 60 * 60 * 1000));\n    const [activityLog] = await db.insert(activityLogs).values({\n      userId,\n      entityType,\n      entityId,\n      action,\n      details,\n      ipAddress,\n      userAgent,\n      createdAt: istTime,\n    }).returning();\n    return activityLog;\n  }\n\n  async getActivityLogs(limit: number = 50): Promise<any[]> {\n    return await db.select({\n      id: activityLogs.id,\n      userId: activityLogs.userId,\n      action: activityLogs.action,\n      entityType: activityLogs.entityType,\n      entityId: activityLogs.entityId,\n      details: activityLogs.details,\n      ipAddress: activityLogs.ipAddress,\n      userAgent: activityLogs.userAgent,\n      createdAt: activityLogs.createdAt,\n      userName: users.name,\n    })\n    .from(activityLogs)\n    .leftJoin(users, eq(activityLogs.userId, users.id))\n    .orderBy(desc(activityLogs.createdAt))\n    .limit(limit);\n  }\n\n  // Dashboard/Analytics methods\n  async getDashboardKPIs(): Promise<{\n    activeLeads: number;\n    activeCustomers: number;\n    totalInvestment: string;\n    pendingRFQs: number;\n  }> {\n    const [activeLeadsResult] = await db.select({ count: count() }).from(leads).where(eq(leads.status, 'new'));\n    const [activeCustomersResult] = await db.select({ count: count() }).from(customers).where(eq(customers.status, 'active'));\n    const [totalInvestmentResult] = await db.select({ sum: sql<string>`COALESCE(SUM(${customers.totalInvestment}), 0)` }).from(customers);\n    const [pendingRFQsResult] = await db.select({ count: count() }).from(rfqs).where(eq(rfqs.status, 'pending'));\n\n    return {\n      activeLeads: activeLeadsResult.count,\n      activeCustomers: activeCustomersResult.count,\n      totalInvestment: totalInvestmentResult.sum || '0',\n      pendingRFQs: pendingRFQsResult.count,\n    };\n  }\n\n  async getLeadSourceAnalytics(): Promise<{source: string, count: number}[]> {\n    return await db.select({\n      source: leads.source,\n      count: count(),\n    }).from(leads).groupBy(leads.source);\n  }\n\n  async getSalesPerformance(): Promise<{period: string, amount: string}[]> {\n    // This is a simplified version - in production you'd want more sophisticated time-based aggregation\n    return await db.select({\n      period: sql<string>`DATE_TRUNC('week', ${customers.createdAt})`,\n      amount: sql<string>`COALESCE(SUM(${customers.totalInvestment}), 0)`,\n    }).from(customers)\n    .groupBy(sql`DATE_TRUNC('week', ${customers.createdAt})`)\n    .orderBy(sql`DATE_TRUNC('week', ${customers.createdAt})`);\n  }\n\n  async getRecentActivities(limit: number = 10): Promise<any[]> {\n    return await db.select({\n      id: activityLogs.id,\n      userId: activityLogs.userId,\n      action: activityLogs.action,\n      entityType: activityLogs.entityType,\n      entityId: activityLogs.entityId,\n      details: activityLogs.details,\n      ipAddress: activityLogs.ipAddress,\n      userAgent: activityLogs.userAgent,\n      createdAt: activityLogs.createdAt,\n      userName: users.name,\n    })\n    .from(activityLogs)\n    .leftJoin(users, eq(activityLogs.userId, users.id))\n    .orderBy(desc(activityLogs.createdAt))\n    .limit(limit);\n  }\n\n  async getRecentActivitiesByUser(userId: number, limit: number = 10): Promise<any[]> {\n    return await db.select({\n      id: activityLogs.id,\n      userId: activityLogs.userId,\n      action: activityLogs.action,\n      entityType: activityLogs.entityType,\n      entityId: activityLogs.entityId,\n      details: activityLogs.details,\n      ipAddress: activityLogs.ipAddress,\n      userAgent: activityLogs.userAgent,\n      createdAt: activityLogs.createdAt,\n      userName: users.name,\n    })\n    .from(activityLogs)\n    .leftJoin(users, eq(activityLogs.userId, users.id))\n    .where(eq(activityLogs.userId, userId))\n    .orderBy(desc(activityLogs.createdAt))\n    .limit(limit);\n  }\n\n  // Session tracking methods\n  async createUserSession(session: InsertUserSession): Promise<UserSession> {\n    // Convert to IST (UTC+5:30) before storing\n    const istTime = new Date(new Date().getTime() + (5.5 * 60 * 60 * 1000));\n    const [newSession] = await db.insert(userSessions).values({\n      ...session,\n      startTime: istTime\n    }).returning();\n    return newSession;\n  }\n\n  async getUserSessionByToken(sessionToken: string): Promise<UserSession | undefined> {\n    const [session] = await db.select().from(userSessions).where(eq(userSessions.sessionToken, sessionToken));\n    return session || undefined;\n  }\n\n  async getActiveUserSessions(userId: number): Promise<UserSession[]> {\n    return await db.select()\n      .from(userSessions)\n      .where(and(\n        eq(userSessions.userId, userId),\n        isNull(userSessions.endTime)\n      ))\n      .orderBy(desc(userSessions.startTime));\n  }\n\n  async endUserSession(sessionId: number, endReason: string): Promise<void> {\n    // Convert to IST (UTC+5:30) before storing\n    const istEndTime = new Date(new Date().getTime() + (5.5 * 60 * 60 * 1000));\n    await db.update(userSessions)\n      .set({ \n        endTime: istEndTime,\n        endReason,\n        duration: sql`EXTRACT(EPOCH FROM (${istEndTime} - start_time))::integer`\n      })\n      .where(eq(userSessions.id, sessionId));\n  }\n\n  async getSessionAnalytics(params: { startDate?: Date; endDate?: Date; userId?: number }): Promise<any[]> {\n    let conditions: any[] = [];\n    \n    if (params.startDate) {\n      conditions.push(sql`${userSessions.startTime} >= ${params.startDate}`);\n    }\n    if (params.endDate) {\n      conditions.push(sql`${userSessions.startTime} <= ${params.endDate}`);\n    }\n    if (params.userId) {\n      conditions.push(eq(userSessions.userId, params.userId));\n    }\n\n    // First get all sessions\n    let sessionsQuery = db.select({\n      id: userSessions.id,\n      userId: userSessions.userId,\n      userName: users.name,\n      userEmail: users.email,\n      startTime: userSessions.startTime,\n      endTime: userSessions.endTime,\n      duration: userSessions.duration,\n      totalPages: userSessions.totalPages,\n      browserName: userSessions.browserName,\n      deviceType: userSessions.deviceType,\n      endReason: userSessions.endReason,\n    })\n    .from(userSessions)\n    .leftJoin(users, eq(userSessions.userId, users.id))\n    .$dynamic();\n\n    if (conditions.length > 0) {\n      sessionsQuery = sessionsQuery.where(and(...conditions));\n    }\n\n    const sessions = await sessionsQuery.orderBy(desc(userSessions.startTime));\n\n    // Then get page views for each session separately\n    const sessionsWithPageViews = await Promise.all(\n      sessions.map(async (session) => {\n        const sessionPageViews = await db.select({\n          pagePath: pageViews.pagePath,\n          pageTitle: pageViews.pageTitle,\n          entryTime: pageViews.entryTime,\n          exitTime: pageViews.exitTime,\n          duration: pageViews.duration,\n          scrollDepth: pageViews.scrollDepth,\n          interactions: pageViews.interactions,\n        })\n        .from(pageViews)\n        .where(eq(pageViews.sessionId, session.id))\n        .orderBy(pageViews.entryTime);\n\n        return {\n          ...session,\n          pageViews: sessionPageViews\n        };\n      })\n    );\n\n    return sessionsWithPageViews;\n  }\n\n  // Page tracking methods\n  async createPageView(pageView: InsertPageView): Promise<PageView> {\n    // Convert to IST (UTC+5:30) before storing\n    const istTime = new Date(new Date().getTime() + (5.5 * 60 * 60 * 1000));\n    const [newPageView] = await db.insert(pageViews).values({\n      ...pageView,\n      entryTime: istTime\n    }).returning();\n    \n    // Update session total pages count\n    await db.update(userSessions)\n      .set({ \n        totalPages: sql`${userSessions.totalPages} + 1`\n      })\n      .where(eq(userSessions.id, newPageView.sessionId));\n      \n    return newPageView;\n  }\n\n  async endPageView(pageViewId: number, updates: { exitTime: Date; duration: number; scrollDepth: number; interactions: number }): Promise<void> {\n    // Convert exitTime to IST (UTC+5:30)\n    const istExitTime = new Date(updates.exitTime.getTime() + (5.5 * 60 * 60 * 1000));\n    await db.update(pageViews)\n      .set({\n        ...updates,\n        exitTime: istExitTime\n      })\n      .where(eq(pageViews.id, pageViewId));\n  }\n\n  async updatePageView(pageViewId: number, data: { interactions?: number; action?: string }): Promise<void> {\n    const updateData: any = {};\n    if (data.interactions !== undefined) {\n      updateData.interactions = data.interactions;\n    }\n    if (data.action) {\n      // Store action in the referrer field for now (we can add a proper action field later if needed)\n      updateData.referrer = `action:${data.action}`;\n    }\n    \n    await db.update(pageViews)\n      .set(updateData)\n      .where(eq(pageViews.id, pageViewId));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":24686},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { pgTable, text, serial, integer, boolean, timestamp, decimal, jsonb, uuid } from \"drizzle-orm/pg-core\";\nimport { relations } from \"drizzle-orm\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull().unique(),\n  name: text(\"name\").notNull(),\n  phone: text(\"phone\"),\n  role: text(\"role\").notNull().default(\"viewer\"), // admin, sales, support, rm, viewer\n  isActive: boolean(\"is_active\").notNull().default(true),\n  lastLogin: timestamp(\"last_login\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// OTP table for authentication\nexport const otps = pgTable(\"otps\", {\n  id: serial(\"id\").primaryKey(),\n  email: text(\"email\").notNull(),\n  otp: text(\"otp\").notNull(),\n  expiresAt: timestamp(\"expires_at\").notNull(),\n  isUsed: boolean(\"is_used\").notNull().default(false),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Login logs for audit trail\nexport const loginLogs = pgTable(\"login_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  email: text(\"email\").notNull(),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  browserName: text(\"browser_name\"),\n  deviceType: text(\"device_type\"), // desktop, mobile, tablet\n  operatingSystem: text(\"operating_system\"),\n  sessionType: text(\"session_type\").notNull().default(\"login\"), // login, logout, timeout, browser_close\n  success: boolean(\"success\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull(),\n});\n\n// Leads table\nexport const leads = pgTable(\"leads\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  company: text(\"company\"),\n  source: text(\"source\").notNull(), // website, referral, social_media, email_campaign, direct\n  status: text(\"status\").notNull().default(\"new\"), // new, contacted, qualified, converted, lost\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  notes: text(\"notes\"),\n  investmentAmount: decimal(\"investment_amount\", { precision: 15, scale: 2 }),\n  bondType: text(\"bond_type\"), // government, corporate, municipal\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Follow-up notes table for leads\nexport const leadFollowUps = pgTable(\"lead_follow_ups\", {\n  id: serial(\"id\").primaryKey(),\n  leadId: integer(\"lead_id\").references(() => leads.id).notNull(),\n  note: text(\"note\").notNull(),\n  followUpDate: timestamp(\"follow_up_date\"),\n  createdBy: integer(\"created_by\").references(() => users.id).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Customers table\nexport const customers = pgTable(\"customers\", {\n  id: serial(\"id\").primaryKey(),\n  leadId: integer(\"lead_id\").references(() => leads.id),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  phone: text(\"phone\"),\n  company: text(\"company\"),\n  panNumber: text(\"pan_number\"),\n  kycStatus: text(\"kyc_status\").notNull().default(\"pending\"), // pending, verified, rejected\n  dematAccount: text(\"demat_account\"),\n  totalInvestment: decimal(\"total_investment\", { precision: 15, scale: 2 }).default(\"0\"),\n  relationshipManager: integer(\"relationship_manager\").references(() => users.id),\n  status: text(\"status\").notNull().default(\"active\"), // active, inactive, suspended\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// RFQ (Request for Quote) table\nexport const rfqs = pgTable(\"rfqs\", {\n  id: serial(\"id\").primaryKey(),\n  rfqNumber: text(\"rfq_number\").notNull().unique(),\n  customerId: integer(\"customer_id\").references(() => customers.id),\n  bondType: text(\"bond_type\").notNull(), // government, corporate, municipal\n  bondName: text(\"bond_name\").notNull(),\n  faceValue: decimal(\"face_value\", { precision: 15, scale: 2 }).notNull(),\n  quantity: integer(\"quantity\").notNull(),\n  bidPrice: decimal(\"bid_price\", { precision: 10, scale: 4 }),\n  askPrice: decimal(\"ask_price\", { precision: 10, scale: 4 }),\n  status: text(\"status\").notNull().default(\"pending\"), // pending, submitted, executed, cancelled\n  nseRfqId: text(\"nse_rfq_id\"),\n  submittedBy: integer(\"submitted_by\").references(() => users.id),\n  submittedAt: timestamp(\"submitted_at\"),\n  executedAt: timestamp(\"executed_at\"),\n  notes: text(\"notes\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Support tickets table\nexport const supportTickets = pgTable(\"support_tickets\", {\n  id: serial(\"id\").primaryKey(),\n  ticketNumber: text(\"ticket_number\").notNull().unique(),\n  customerId: integer(\"customer_id\").references(() => customers.id),\n  subject: text(\"subject\").notNull(),\n  description: text(\"description\").notNull(),\n  category: text(\"category\").notNull(), // technical, trading, kyc, general\n  priority: text(\"priority\").notNull().default(\"medium\"), // low, medium, high, urgent\n  status: text(\"status\").notNull().default(\"open\"), // open, in_progress, resolved, closed\n  assignedTo: integer(\"assigned_to\").references(() => users.id),\n  resolution: text(\"resolution\"),\n  resolvedAt: timestamp(\"resolved_at\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Email templates table\nexport const emailTemplates = pgTable(\"email_templates\", {\n  id: serial(\"id\").primaryKey(),\n  name: text(\"name\").notNull(),\n  subject: text(\"subject\").notNull(),\n  body: text(\"body\").notNull(),\n  category: text(\"category\").notNull(), // welcome, follow_up, rfq_confirmation, support\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdBy: integer(\"created_by\").references(() => users.id),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Subscriptions table for newsletters, webinars\nexport const subscriptions = pgTable(\"subscriptions\", {\n  id: serial(\"id\").primaryKey(),\n  customerId: integer(\"customer_id\").references(() => customers.id),\n  type: text(\"type\").notNull(), // newsletter, webinar, market_updates\n  isActive: boolean(\"is_active\").notNull().default(true),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n  updatedAt: timestamp(\"updated_at\").defaultNow().notNull(),\n});\n\n// Activity logs for audit trail\nexport const activityLogs = pgTable(\"activity_logs\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id),\n  entityType: text(\"entity_type\").notNull(), // lead, customer, rfq, ticket\n  entityId: integer(\"entity_id\").notNull(),\n  action: text(\"action\").notNull(), // create, update, delete, view\n  details: jsonb(\"details\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").notNull(),\n});\n\n// User sessions table for detailed session tracking\nexport const userSessions = pgTable(\"user_sessions\", {\n  id: serial(\"id\").primaryKey(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  sessionToken: text(\"session_token\").notNull(),\n  startTime: timestamp(\"start_time\").defaultNow().notNull(),\n  endTime: timestamp(\"end_time\"),\n  duration: integer(\"duration\"), // in seconds\n  totalPages: integer(\"total_pages\").default(0),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  browserName: text(\"browser_name\"),\n  deviceType: text(\"device_type\"),\n  operatingSystem: text(\"operating_system\"),\n  endReason: text(\"end_reason\"), // logout, timeout, browser_close\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Page views table for tracking page browsing history\nexport const pageViews = pgTable(\"page_views\", {\n  id: serial(\"id\").primaryKey(),\n  sessionId: integer(\"session_id\").references(() => userSessions.id).notNull(),\n  userId: integer(\"user_id\").references(() => users.id).notNull(),\n  pagePath: text(\"page_path\").notNull(),\n  pageTitle: text(\"page_title\"),\n  entryTime: timestamp(\"entry_time\").defaultNow().notNull(),\n  exitTime: timestamp(\"exit_time\"),\n  duration: integer(\"duration\"), // in seconds\n  scrollDepth: integer(\"scroll_depth\"), // percentage\n  interactions: integer(\"interactions\").default(0), // clicks, form submissions, etc.\n  referrer: text(\"referrer\"),\n  createdAt: timestamp(\"created_at\").defaultNow().notNull(),\n});\n\n// Relations\nexport const usersRelations = relations(users, ({ many }) => ({\n  assignedLeads: many(leads),\n  managedCustomers: many(customers),\n  submittedRfqs: many(rfqs),\n  assignedTickets: many(supportTickets),\n  createdTemplates: many(emailTemplates),\n  activityLogs: many(activityLogs),\n  loginLogs: many(loginLogs),\n  leadFollowUps: many(leadFollowUps),\n  userSessions: many(userSessions),\n  pageViews: many(pageViews),\n}));\n\nexport const leadsRelations = relations(leads, ({ one, many }) => ({\n  assignedUser: one(users, {\n    fields: [leads.assignedTo],\n    references: [users.id],\n  }),\n  customer: many(customers),\n  followUps: many(leadFollowUps),\n}));\n\nexport const leadFollowUpsRelations = relations(leadFollowUps, ({ one }) => ({\n  lead: one(leads, {\n    fields: [leadFollowUps.leadId],\n    references: [leads.id],\n  }),\n  createdByUser: one(users, {\n    fields: [leadFollowUps.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const customersRelations = relations(customers, ({ one, many }) => ({\n  lead: one(leads, {\n    fields: [customers.leadId],\n    references: [leads.id],\n  }),\n  relationshipManager: one(users, {\n    fields: [customers.relationshipManager],\n    references: [users.id],\n  }),\n  rfqs: many(rfqs),\n  supportTickets: many(supportTickets),\n  subscriptions: many(subscriptions),\n}));\n\nexport const rfqsRelations = relations(rfqs, ({ one }) => ({\n  customer: one(customers, {\n    fields: [rfqs.customerId],\n    references: [customers.id],\n  }),\n  submittedByUser: one(users, {\n    fields: [rfqs.submittedBy],\n    references: [users.id],\n  }),\n}));\n\nexport const supportTicketsRelations = relations(supportTickets, ({ one }) => ({\n  customer: one(customers, {\n    fields: [supportTickets.customerId],\n    references: [customers.id],\n  }),\n  assignedUser: one(users, {\n    fields: [supportTickets.assignedTo],\n    references: [users.id],\n  }),\n}));\n\nexport const emailTemplatesRelations = relations(emailTemplates, ({ one }) => ({\n  createdByUser: one(users, {\n    fields: [emailTemplates.createdBy],\n    references: [users.id],\n  }),\n}));\n\nexport const subscriptionsRelations = relations(subscriptions, ({ one }) => ({\n  customer: one(customers, {\n    fields: [subscriptions.customerId],\n    references: [customers.id],\n  }),\n}));\n\nexport const activityLogsRelations = relations(activityLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [activityLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const loginLogsRelations = relations(loginLogs, ({ one }) => ({\n  user: one(users, {\n    fields: [loginLogs.userId],\n    references: [users.id],\n  }),\n}));\n\nexport const userSessionsRelations = relations(userSessions, ({ one, many }) => ({\n  user: one(users, {\n    fields: [userSessions.userId],\n    references: [users.id],\n  }),\n  pageViews: many(pageViews),\n}));\n\nexport const pageViewsRelations = relations(pageViews, ({ one }) => ({\n  session: one(userSessions, {\n    fields: [pageViews.sessionId],\n    references: [userSessions.id],\n  }),\n  user: one(users, {\n    fields: [pageViews.userId],\n    references: [users.id],\n  }),\n}));\n\n// Insert schemas\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeadSchema = createInsertSchema(leads).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertCustomerSchema = createInsertSchema(customers).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertRfqSchema = createInsertSchema(rfqs).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSupportTicketSchema = createInsertSchema(supportTickets).omit({\n  id: true,\n  ticketNumber: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertEmailTemplateSchema = createInsertSchema(emailTemplates).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertSubscriptionSchema = createInsertSchema(subscriptions).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport const insertLeadFollowUpSchema = createInsertSchema(leadFollowUps).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertUserSessionSchema = createInsertSchema(userSessions).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport const insertPageViewSchema = createInsertSchema(pageViews).omit({\n  id: true,\n  createdAt: true,\n});\n\n// Types\nexport type User = typeof users.$inferSelect;\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type Lead = typeof leads.$inferSelect;\nexport type InsertLead = z.infer<typeof insertLeadSchema>;\nexport type Customer = typeof customers.$inferSelect;\nexport type InsertCustomer = z.infer<typeof insertCustomerSchema>;\nexport type RFQ = typeof rfqs.$inferSelect;\nexport type InsertRFQ = z.infer<typeof insertRfqSchema>;\nexport type SupportTicket = typeof supportTickets.$inferSelect;\nexport type InsertSupportTicket = z.infer<typeof insertSupportTicketSchema>;\nexport type EmailTemplate = typeof emailTemplates.$inferSelect;\nexport type InsertEmailTemplate = z.infer<typeof insertEmailTemplateSchema>;\nexport type Subscription = typeof subscriptions.$inferSelect;\nexport type InsertSubscription = z.infer<typeof insertSubscriptionSchema>;\nexport type OTP = typeof otps.$inferSelect;\nexport type LoginLog = typeof loginLogs.$inferSelect;\nexport const insertLoginLogSchema = createInsertSchema(loginLogs).omit({ id: true, createdAt: true });\nexport type InsertLoginLog = z.infer<typeof insertLoginLogSchema>;\nexport type ActivityLog = typeof activityLogs.$inferSelect;\nexport type LeadFollowUp = typeof leadFollowUps.$inferSelect;\nexport type InsertLeadFollowUp = z.infer<typeof insertLeadFollowUpSchema>;\nexport type UserSession = typeof userSessions.$inferSelect;\nexport type InsertUserSession = z.infer<typeof insertUserSessionSchema>;\nexport type PageView = typeof pageViews.$inferSelect;\nexport type InsertPageView = z.infer<typeof insertPageViewSchema>;\n","size_bytes":14515},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { AuthProvider } from \"./contexts/AuthContext\";\nimport { PageTrackingProvider } from \"./contexts/PageTrackingContext\";\nimport { ThemeProvider } from \"./contexts/ThemeContext\";\nimport ProtectedRoute from \"./components/common/ProtectedRoute\";\nimport Login from \"./pages/login\";\nimport Dashboard from \"./pages/dashboard\";\nimport Leads from \"./pages/leads\";\nimport Customers from \"./pages/customers\";\nimport SalesPipeline from \"./pages/sales-pipeline\";\nimport RFQManagement from \"./pages/rfq-management\";\nimport SupportTickets from \"./pages/support-tickets\";\nimport EmailTemplates from \"./pages/email-templates\";\nimport Reports from \"./pages/reports\";\nimport UserManagement from \"./pages/user-management\";\nimport SessionTest from \"./pages/session-test\";\nimport AuditLogs from \"./pages/audit-logs\";\nimport SessionAnalytics from \"./pages/session-analytics\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Login} />\n      <Route path=\"/login\" component={Login} />\n      <Route path=\"/dashboard\">\n        <ProtectedRoute>\n          <Dashboard />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/leads\">\n        <ProtectedRoute>\n          <Leads />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/customers\">\n        <ProtectedRoute>\n          <Customers />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/sales-pipeline\">\n        <ProtectedRoute>\n          <SalesPipeline />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/rfq-management\">\n        <ProtectedRoute>\n          <RFQManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/support-tickets\">\n        <ProtectedRoute>\n          <SupportTickets />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/email-templates\">\n        <ProtectedRoute>\n          <EmailTemplates />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/reports\">\n        <ProtectedRoute>\n          <Reports />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/user-management\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <UserManagement />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/audit-logs\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <AuditLogs />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/session-analytics\">\n        <ProtectedRoute allowedRoles={['admin']}>\n          <SessionAnalytics />\n        </ProtectedRoute>\n      </Route>\n      <Route path=\"/session-test\">\n        <ProtectedRoute>\n          <SessionTest />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <AuthProvider>\n          <PageTrackingProvider>\n            <TooltipProvider>\n              <Toaster />\n              <Router />\n            </TooltipProvider>\n          </PageTrackingProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3356},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(0, 0%, 100%);\n  --foreground: hsl(20, 14.3%, 4.1%);\n  --muted: hsl(60, 4.8%, 95.9%);\n  --muted-foreground: hsl(25, 5.3%, 44.7%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(20, 14.3%, 4.1%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(20, 14.3%, 4.1%);\n  --border: hsl(20, 5.9%, 90%);\n  --input: hsl(20, 5.9%, 90%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(60, 4.8%, 95.9%);\n  --secondary-foreground: hsl(24, 9.8%, 10%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(211, 100%, 99%);\n  --destructive: hsl(0, 84.2%, 60.2%);\n  --destructive-foreground: hsl(60, 9.1%, 97.8%);\n  --warning: hsl(25, 95%, 53%);\n  --warning-foreground: hsl(60, 9.1%, 97.8%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(211, 100%, 99%);\n  --ring: hsl(20, 14.3%, 4.1%);\n  --radius: 0.5rem;\n  \n  /* CRM specific colors */\n  --chart-1: hsl(207, 90%, 54%);\n  --chart-2: hsl(142, 76%, 36%);\n  --chart-3: hsl(25, 95%, 53%);\n  --chart-4: hsl(0, 84.2%, 60.2%);\n  --chart-5: hsl(263, 70%, 50%);\n  \n  /* Sidebar colors */\n  --sidebar-background: hsl(0, 0%, 100%);\n  --sidebar-foreground: hsl(240, 5.3%, 26.1%);\n  --sidebar-primary: hsl(207, 90%, 54%);\n  --sidebar-primary-foreground: hsl(211, 100%, 99%);\n  --sidebar-accent: hsl(207, 16%, 96%);\n  --sidebar-accent-foreground: hsl(240, 5.9%, 10%);\n  --sidebar-border: hsl(217, 32%, 91%);\n  --sidebar-ring: hsl(207, 90%, 54%);\n}\n\n.dark {\n  --background: hsl(240, 10%, 3.9%);\n  --foreground: hsl(0, 0%, 98%);\n  --muted: hsl(240, 3.7%, 15.9%);\n  --muted-foreground: hsl(240, 5%, 64.9%);\n  --popover: hsl(240, 10%, 3.9%);\n  --popover-foreground: hsl(0, 0%, 98%);\n  --card: hsl(240, 10%, 3.9%);\n  --card-foreground: hsl(0, 0%, 98%);\n  --border: hsl(240, 3.7%, 15.9%);\n  --input: hsl(240, 3.7%, 15.9%);\n  --primary: hsl(207, 90%, 54%);\n  --primary-foreground: hsl(211, 100%, 99%);\n  --secondary: hsl(240, 3.7%, 15.9%);\n  --secondary-foreground: hsl(0, 0%, 98%);\n  --accent: hsl(142, 76%, 36%);\n  --accent-foreground: hsl(0, 0%, 98%);\n  --destructive: hsl(0, 62.8%, 30.6%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --warning: hsl(25, 95%, 53%);\n  --warning-foreground: hsl(0, 0%, 98%);\n  --success: hsl(142, 76%, 36%);\n  --success-foreground: hsl(0, 0%, 98%);\n  --ring: hsl(240, 4.9%, 83.9%);\n  \n  /* Sidebar dark colors */\n  --sidebar-background: hsl(240, 5.9%, 10%);\n  --sidebar-foreground: hsl(240, 4.8%, 95.9%);\n  --sidebar-primary: hsl(207, 90%, 54%);\n  --sidebar-primary-foreground: hsl(211, 100%, 99%);\n  --sidebar-accent: hsl(240, 3.7%, 15.9%);\n  --sidebar-accent-foreground: hsl(240, 4.8%, 95.9%);\n  --sidebar-border: hsl(240, 3.7%, 15.9%);\n  --sidebar-ring: hsl(240, 4.9%, 83.9%);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .gradient-bg {\n    @apply bg-gradient-to-br from-primary to-blue-600;\n  }\n  \n  .card-shadow {\n    box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06);\n  }\n  \n  .sidebar-active {\n    @apply bg-sidebar-accent border-r-4 border-sidebar-primary text-sidebar-primary;\n  }\n  \n  .chart-container {\n    position: relative;\n    height: 300px;\n  }\n}\n\n@layer utilities {\n  .font-inter {\n    font-family: 'Inter', sans-serif;\n  }\n}\n","size_bytes":3402},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/auth.ts":{"content":"import jwt from \"jsonwebtoken\";\nimport type { Request, Response, NextFunction } from \"express\";\n\nconst JWT_SECRET = process.env.JWT_SECRET || \"your-secret-key\";\n\ninterface AuthenticatedRequest extends Request {\n  user?: {\n    userId: number;\n    email: string;\n    role: string;\n  };\n}\n\nexport const authMiddleware = (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n  try {\n    const authHeader = req.headers.authorization;\n    \n    if (!authHeader || !authHeader.startsWith(\"Bearer \")) {\n      return res.status(401).json({ message: \"Access token required\" });\n    }\n\n    const token = authHeader.substring(7); // Remove 'Bearer ' prefix\n    \n    try {\n      const decoded = jwt.verify(token, JWT_SECRET) as any;\n      req.user = {\n        userId: decoded.userId,\n        email: decoded.email,\n        role: decoded.role,\n      };\n      next();\n    } catch (jwtError) {\n      return res.status(401).json({ message: \"Invalid or expired token\" });\n    }\n  } catch (error) {\n    console.error(\"Auth middleware error:\", error);\n    return res.status(500).json({ message: \"Authentication error\" });\n  }\n};\n\nexport const requireRole = (allowedRoles: string[]) => {\n  return (req: AuthenticatedRequest, res: Response, next: NextFunction) => {\n    if (!req.user) {\n      return res.status(401).json({ message: \"Authentication required\" });\n    }\n\n    if (!allowedRoles.includes(req.user.role)) {\n      return res.status(403).json({ message: \"Insufficient permissions\" });\n    }\n\n    next();\n  };\n};\n","size_bytes":1511},"server/services/emailService.ts":{"content":"import nodemailer from \"nodemailer\";\n\nexport class EmailService {\n  private transporter: nodemailer.Transporter;\n\n  constructor() {\n    // Configure email transporter\n    this.transporter = nodemailer.createTransport({\n      host: process.env.SMTP_HOST || \"smtp.gmail.com\",\n      port: parseInt(process.env.SMTP_PORT || \"587\"),\n      secure: false, // true for 465, false for other ports\n      auth: {\n        user: process.env.SMTP_USER || process.env.EMAIL_USER,\n        pass: process.env.SMTP_PASS || process.env.EMAIL_PASS,\n      },\n    });\n  }\n\n  async sendOTP(email: string, otp: string): Promise<void> {\n    try {\n      const mailOptions = {\n        from: process.env.SMTP_FROM || \"noreply@meradhan.co\",\n        to: email,\n        subject: \"MeraDhan CRM - Your Login OTP\",\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 20px; text-align: center;\">\n              <h1 style=\"color: white; margin: 0;\">MeraDhan CRM</h1>\n              <p style=\"color: white; margin: 5px 0;\">SEBI Registered OBPP</p>\n            </div>\n            <div style=\"padding: 30px; background: white;\">\n              <h2 style=\"color: #1e40af; margin-bottom: 20px;\">Login Verification Code</h2>\n              <p style=\"color: #64748b; margin-bottom: 30px;\">\n                Please use the following verification code to complete your login:\n              </p>\n              <div style=\"background: #f8fafc; border: 2px solid #e2e8f0; padding: 20px; text-align: center; border-radius: 8px; margin: 30px 0;\">\n                <h1 style=\"color: #1e40af; font-size: 36px; letter-spacing: 8px; margin: 0;\">${otp}</h1>\n              </div>\n              <p style=\"color: #64748b; font-size: 14px;\">\n                This code will expire in 10 minutes. If you didn't request this code, please ignore this email.\n              </p>\n              <hr style=\"border: none; border-top: 1px solid #e2e8f0; margin: 30px 0;\">\n              <p style=\"color: #9ca3af; font-size: 12px;\">\n                This is an automated message from MeraDhan CRM. Please do not reply to this email.\n              </p>\n            </div>\n          </div>\n        `,\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      console.log(`OTP sent successfully to ${email}`);\n    } catch (error) {\n      console.error(\"Failed to send OTP email:\", error);\n      // For testing purposes, log the OTP when email fails\n      console.log(`🔑 TEST MODE - OTP for ${email}: ${otp}`);\n      // Don't throw error in development to allow testing without email setup\n    }\n  }\n\n  async sendWelcomeEmail(email: string, name: string): Promise<void> {\n    try {\n      const mailOptions = {\n        from: process.env.SMTP_FROM || \"noreply@meradhan.co\",\n        to: email,\n        subject: \"Welcome to MeraDhan CRM\",\n        html: `\n          <div style=\"font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;\">\n            <div style=\"background: linear-gradient(135deg, #1e40af 0%, #3b82f6 100%); padding: 20px; text-align: center;\">\n              <h1 style=\"color: white; margin: 0;\">Welcome to MeraDhan CRM</h1>\n              <p style=\"color: white; margin: 5px 0;\">SEBI Registered OBPP</p>\n            </div>\n            <div style=\"padding: 30px; background: white;\">\n              <h2 style=\"color: #1e40af; margin-bottom: 20px;\">Hello ${name}!</h2>\n              <p style=\"color: #64748b; margin-bottom: 20px;\">\n                Welcome to MeraDhan CRM, India's leading Online Bond Provider Platform. \n                We're excited to have you on board!\n              </p>\n              <p style=\"color: #64748b; margin-bottom: 20px;\">\n                Your account has been successfully created and you can now access our comprehensive \n                bond trading and CRM platform.\n              </p>\n              <div style=\"background: #f8fafc; border-left: 4px solid #1e40af; padding: 20px; margin: 20px 0;\">\n                <h3 style=\"color: #1e40af; margin-top: 0;\">Key Features:</h3>\n                <ul style=\"color: #64748b;\">\n                  <li>Real-time bond trading on NSE & BSE</li>\n                  <li>Comprehensive customer relationship management</li>\n                  <li>Advanced analytics and reporting</li>\n                  <li>SEBI compliant platform</li>\n                </ul>\n              </div>\n              <p style=\"color: #64748b;\">\n                If you have any questions, our support team is here to help.\n              </p>\n            </div>\n          </div>\n        `,\n      };\n\n      await this.transporter.sendMail(mailOptions);\n      console.log(`Welcome email sent successfully to ${email}`);\n    } catch (error) {\n      console.error(\"Failed to send welcome email:\", error);\n      throw new Error(\"Failed to send welcome email\");\n    }\n  }\n}\n\nexport const emailService = new EmailService();\n","size_bytes":4956},"server/services/otpService.ts":{"content":"import crypto from \"crypto\";\n\nexport class OTPService {\n  generateOTP(): string {\n    // Generate a 6-digit OTP\n    return crypto.randomInt(100000, 999999).toString();\n  }\n\n  validateOTPFormat(otp: string): boolean {\n    return /^\\d{6}$/.test(otp);\n  }\n}\n\nexport const otpService = new OTPService();\n","size_bytes":300},"client/src/contexts/AuthContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode, useRef, useCallback } from \"react\";\nimport { api } from \"@/lib/api\";\nimport { User } from \"@/types\";\n\ninterface AuthContextType {\n  user: User | null;\n  isLoading: boolean;\n  login: (email: string, otp: string) => Promise<void>;\n  requestOTP: (email: string) => Promise<void>;\n  logout: () => void;\n  hasRole: (roles: string[]) => boolean;\n}\n\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\n\n// Session timeout: 15 minutes (in milliseconds)\nconst SESSION_TIMEOUT = 15 * 60 * 1000;\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const [user, setUser] = useState<User | null>(null);\n  const [isLoading, setIsLoading] = useState(true);\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\n  const lastActivityRef = useRef<number>(Date.now());\n\n  // Auto logout function\n  const autoLogout = useCallback((reason: 'timeout' | 'browser_close' = 'timeout') => {\n    console.log(`🔒 Session terminating due to: ${reason}`);\n    \n    const token = localStorage.getItem(\"token\");\n    if (user && token) {\n      // Extract sessionToken from JWT token\n      let sessionToken = null;\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        sessionToken = payload.sessionToken;\n      } catch (e) {\n        console.log('Could not extract sessionToken from JWT');\n      }\n      \n      // Log the session end with detailed audit information\n      const logData = {\n        reason,\n        timestamp: new Date().toISOString(),\n        sessionDuration: Date.now() - lastActivityRef.current,\n        token,\n        sessionToken\n      };\n      \n      // Try to log session end - use both regular API call and beacon for reliability\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      };\n      \n      api.post(\"/auth/session-end\", logData, config).catch(() => {\n        // If regular API fails, try beacon as fallback\n        if (navigator.sendBeacon) {\n          navigator.sendBeacon(\"/api/auth/session-end\", JSON.stringify(logData));\n        }\n      });\n    }\n    \n    localStorage.removeItem(\"token\");\n    setUser(null);\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  }, [user]);\n\n  // Reset inactivity timer\n  const resetTimer = useCallback(() => {\n    if (!user) return;\n    \n    lastActivityRef.current = Date.now();\n    \n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n    }\n    \n    timeoutRef.current = setTimeout(() => {\n      console.log('⏰ 15-minute inactivity timeout reached');\n      autoLogout('timeout');\n    }, SESSION_TIMEOUT);\n  }, [user, autoLogout]);\n\n  // Activity event listeners\n  useEffect(() => {\n    if (!user) return;\n\n    const events = ['mousedown', 'mousemove', 'keypress', 'scroll', 'touchstart', 'click'];\n    \n    const handleActivity = () => {\n      resetTimer();\n    };\n\n    events.forEach(event => {\n      document.addEventListener(event, handleActivity, true);\n    });\n\n    // Start the timer\n    resetTimer();\n\n    return () => {\n      events.forEach(event => {\n        document.removeEventListener(event, handleActivity, true);\n      });\n      if (timeoutRef.current) {\n        clearTimeout(timeoutRef.current);\n      }\n    };\n  }, [user, resetTimer]);\n\n  // Browser/tab close detection\n  useEffect(() => {\n    if (!user) return;\n\n    const handleBeforeUnload = (event: BeforeUnloadEvent) => {\n      console.log('📡 beforeunload triggered');\n      \n      // Create backup immediately before anything else\n      const token = localStorage.getItem(\"token\");\n      const sessionToken = localStorage.getItem(\"sessionToken\");\n      \n      if (token && sessionToken) {\n        sessionStorage.setItem('tokenBackup', token);\n        sessionStorage.setItem('sessionTokenBackup', sessionToken);\n        sessionStorage.setItem('beforeUnloadTime', Date.now().toString());\n        console.log('💾 Created session backup before clearing');\n      }\n      \n      // Send session end beacon  \n      sendSessionEndSignal('browser_close', false);\n      \n      // Clear localStorage\n      localStorage.removeItem(\"token\");\n      localStorage.removeItem(\"sessionToken\");\n      \n      console.log('🧹 localStorage cleared on beforeunload');\n    };\n\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden') {\n        console.log('👁️ Tab/window hidden - starting logout timer');\n        // Store timeout reference to clear it if tab becomes visible again\n        const timeoutId = setTimeout(() => {\n          if (document.visibilityState === 'hidden') {\n            console.log('🚪 Tab/window still hidden after 15 minutes - terminating session');\n            // Send session end immediately and clear localStorage\n            sendSessionEndSignal('browser_close', true);\n            autoLogout('browser_close');\n          }\n        }, 15 * 60 * 1000); // 15 minutes delay\n        \n        // Store timeout ID for potential cleanup\n        (window as any).__visibilityTimeout = timeoutId;\n      } else {\n        console.log('👁️ Tab/window visible again');\n        // Clear timeout if tab becomes visible again\n        if ((window as any).__visibilityTimeout) {\n          clearTimeout((window as any).__visibilityTimeout);\n          delete (window as any).__visibilityTimeout;\n        }\n      }\n    };\n\n    // Handle page refresh by restoring from sessionStorage backup\n    const handlePageReload = () => {\n      const token = localStorage.getItem(\"token\");\n      const beforeUnloadTime = sessionStorage.getItem('beforeUnloadTime');\n      \n      if (!token && beforeUnloadTime && sessionStorage.getItem('tokenBackup')) {\n        const timeDiff = Date.now() - parseInt(beforeUnloadTime);\n        \n        if (timeDiff < 5000) {\n          // Less than 5 seconds = page refresh, restore session\n          const backupToken = sessionStorage.getItem('tokenBackup');\n          const backupSessionToken = sessionStorage.getItem('sessionTokenBackup');\n          \n          if (backupToken && backupSessionToken) {\n            console.log('📡 Page refresh detected - restoring session from backup');\n            localStorage.setItem(\"token\", backupToken);\n            localStorage.setItem(\"sessionToken\", backupSessionToken);\n          }\n        } else {\n          console.log('📡 Tab close detected - not restoring session');\n        }\n        \n        // Clean up backup\n        sessionStorage.removeItem('tokenBackup');\n        sessionStorage.removeItem('sessionTokenBackup');\n        sessionStorage.removeItem('beforeUnloadTime');\n      }\n    };\n\n    // Send session end signal\n    const sendSessionEndSignal = (reason: string, clearStorage: boolean = false) => {\n      const token = localStorage.getItem(\"token\");\n      if (token && user) {\n        let sessionToken = null;\n        try {\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          sessionToken = payload.sessionToken;\n        } catch (e) {\n          console.log('Could not extract sessionToken from JWT');\n        }\n        \n        const data = JSON.stringify({ \n          reason,\n          timestamp: new Date().toISOString(),\n          sessionDuration: Date.now() - lastActivityRef.current,\n          token,\n          sessionToken\n        });\n        \n        const blob = new Blob([data], { type: 'application/json' });\n        if (navigator.sendBeacon) {\n          const success = navigator.sendBeacon(\"/api/auth/session-end\", blob);\n          console.log(`📡 SendBeacon ${success ? 'succeeded' : 'failed'} for ${reason}`);\n        }\n        \n        // Only clear localStorage for actual tab close\n        if (clearStorage) {\n          localStorage.removeItem(\"token\");\n          localStorage.removeItem(\"sessionToken\");\n          console.log('🧹 Cleared localStorage - session terminated');\n        }\n      }\n    };\n\n    // Handle page reload detection on component mount\n    handlePageReload();\n\n    // No need for additional backup creation - handled in beforeunload\n    \n    window.addEventListener('beforeunload', handleBeforeUnload);\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      window.removeEventListener('beforeunload', handleBeforeUnload);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, [user, autoLogout]);\n\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      // Verify token and get user info\n      api.get(\"/auth/me\")\n        .then(response => {\n          setUser(response.data);\n        })\n        .catch(() => {\n          localStorage.removeItem(\"token\");\n        })\n        .finally(() => {\n          setIsLoading(false);\n        });\n    } else {\n      setIsLoading(false);\n    }\n  }, []);\n\n  const requestOTP = async (email: string) => {\n    await api.post(\"/auth/request-otp\", { email });\n  };\n\n  const login = async (email: string, otp: string) => {\n    const response = await api.post(\"/auth/verify-otp\", { email, otp });\n    const { token, user: userData } = response.data;\n    \n    localStorage.setItem(\"token\", token);\n    setUser(userData);\n    \n    // Start session management\n    resetTimer();\n  };\n\n  const logout = () => {\n    console.log('🚪 Manual logout initiated');\n    \n    if (user) {\n      // Log the session end with detailed audit information\n      const logData = {\n        reason: 'logout',\n        timestamp: new Date().toISOString(),\n        sessionDuration: Date.now() - lastActivityRef.current\n      };\n      \n      // Extract sessionToken from JWT token\n      const token = localStorage.getItem(\"token\");\n      let sessionToken = null;\n      if (token) {\n        try {\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          sessionToken = payload.sessionToken;\n        } catch (e) {\n          console.log('Could not extract sessionToken from JWT');\n        }\n      }\n      \n      // Try to log session end - use Authorization header AND body for reliability\n      const config = {\n        headers: {\n          'Authorization': `Bearer ${token}`,\n          'Content-Type': 'application/json'\n        }\n      };\n      \n      api.post(\"/auth/session-end\", {\n        ...logData,\n        token,\n        sessionToken\n      }, config).catch((error) => {\n        // If regular API fails, try beacon as fallback\n        console.log('Using beacon for logout tracking', error);\n        if (navigator.sendBeacon) {\n          const beaconData = JSON.stringify({\n            ...logData,\n            token,\n            sessionToken\n          });\n          navigator.sendBeacon(\"/api/auth/session-end\", beaconData);\n        }\n      });\n    }\n    \n    localStorage.removeItem(\"token\");\n    localStorage.removeItem(\"sessionToken\");\n    setUser(null);\n    if (timeoutRef.current) {\n      clearTimeout(timeoutRef.current);\n      timeoutRef.current = null;\n    }\n  };\n\n  const hasRole = (roles: string[]): boolean => {\n    return user ? roles.includes(user.role) : false;\n  };\n\n  return (\n    <AuthContext.Provider value={{\n      user,\n      isLoading,\n      login,\n      requestOTP,\n      logout,\n      hasRole,\n    }}>\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":11532},"client/src/contexts/PageTrackingContext.tsx":{"content":"import { createContext, useContext, useEffect, useRef, useState } from 'react';\nimport { useAuth } from './AuthContext';\nimport { useLocation } from 'wouter';\n\ninterface PageView {\n  pagePath: string;\n  pageTitle: string;\n  entryTime: Date;\n  exitTime?: Date;\n  duration?: number;\n  scrollDepth: number;\n  interactions: number;\n}\n\ninterface PageTrackingContextType {\n  currentPageView: PageView | null;\n  updateInteractions: () => void;\n  updateScrollDepth: (depth: number) => void;\n  trackLogoutAction: () => Promise<void>;\n}\n\nconst PageTrackingContext = createContext<PageTrackingContextType | undefined>(undefined);\n\nexport const usePageTracking = () => {\n  const context = useContext(PageTrackingContext);\n  if (!context) {\n    throw new Error('usePageTracking must be used within a PageTrackingProvider');\n  }\n  return context;\n};\n\nconst getPageTitle = (path: string): string => {\n  const titleMap: Record<string, string> = {\n    '/': 'Dashboard',\n    '/dashboard': 'Dashboard',\n    '/leads': 'Lead Management',\n    '/customers': 'Customer Management',\n    '/sales-pipeline': 'Sales Pipeline',\n    '/rfq-management': 'RFQ Management',\n    '/support-tickets': 'Support Tickets',\n    '/email-templates': 'Email Templates',\n    '/reports': 'Reports',\n    '/user-management': 'User Management',\n    '/audit-logs': 'Audit Logs',\n    '/session-analytics': 'Session Analytics',\n    '/session-test': 'Session Test',\n  };\n  return titleMap[path] || `Page: ${path}`;\n};\n\nexport const PageTrackingProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\n  const { user } = useAuth();\n  const [location] = useLocation();\n  const [currentPageView, setCurrentPageView] = useState<PageView | null>(null);\n  const sessionIdRef = useRef<string | null>(null);\n  const pageViewIdRef = useRef<number | null>(null);\n  const maxScrollRef = useRef(0);\n  const interactionsRef = useRef(0);\n  const visibilityTimeRef = useRef<number>(Date.now());\n\n  // Initialize session tracking - reuse existing session token or create new one only on first login\n  useEffect(() => {\n    if (user) {\n      // Check if we already have a session token from current login\n      let sessionToken = sessionIdRef.current || localStorage.getItem('sessionToken');\n      \n      // Only create new session token if we don't have one (first time login)\n      if (!sessionToken) {\n        sessionToken = `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n        localStorage.setItem('sessionToken', sessionToken);\n      }\n      sessionIdRef.current = sessionToken;\n    } else {\n      // Clear session token on logout\n      localStorage.removeItem('sessionToken');\n      sessionIdRef.current = null;\n    }\n  }, [user]);\n\n  // Track page changes\n  useEffect(() => {\n    if (!user || !sessionIdRef.current) return;\n\n    const startPageView = async () => {\n      // End previous page view if exists\n      if (currentPageView && pageViewIdRef.current) {\n        await endPageView();\n      }\n\n      // Start new page view\n      const pageTitle = getPageTitle(location);\n      const newPageView: PageView = {\n        pagePath: location,\n        pageTitle,\n        entryTime: new Date(),\n        scrollDepth: 0,\n        interactions: 0,\n      };\n\n      setCurrentPageView(newPageView);\n      maxScrollRef.current = 0;\n      interactionsRef.current = 0;\n      visibilityTimeRef.current = Date.now();\n\n      try {\n        const response = await fetch('/api/page-tracking/start', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json',\n            'Authorization': `Bearer ${localStorage.getItem('token')}`,\n          },\n          body: JSON.stringify({\n            sessionToken: sessionIdRef.current,\n            pagePath: location,\n            pageTitle,\n            referrer: document.referrer,\n          }),\n        });\n\n        if (response.ok) {\n          const data = await response.json();\n          pageViewIdRef.current = data.pageViewId;\n        }\n      } catch (error) {\n        console.error('Failed to start page tracking:', error);\n      }\n    };\n\n    startPageView();\n  }, [location, user]);\n\n  // End page view function\n  const endPageView = async () => {\n    if (!currentPageView || !pageViewIdRef.current || !user) return;\n\n    const exitTime = new Date();\n    const duration = Math.floor((exitTime.getTime() - currentPageView.entryTime.getTime()) / 1000);\n\n    try {\n      await fetch('/api/page-tracking/end', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          pageViewId: pageViewIdRef.current,\n          exitTime: exitTime.toISOString(),\n          duration,\n          scrollDepth: maxScrollRef.current,\n          interactions: interactionsRef.current,\n        }),\n      });\n    } catch (error) {\n      console.error('Failed to end page tracking:', error);\n    }\n  };\n\n  // Track scroll depth\n  useEffect(() => {\n    const handleScroll = () => {\n      const scrollTop = window.pageYOffset || document.documentElement.scrollTop;\n      const scrollHeight = document.documentElement.scrollHeight - window.innerHeight;\n      const scrollPercent = scrollHeight > 0 ? Math.round((scrollTop / scrollHeight) * 100) : 0;\n      \n      if (scrollPercent > maxScrollRef.current) {\n        maxScrollRef.current = scrollPercent;\n      }\n    };\n\n    window.addEventListener('scroll', handleScroll, { passive: true });\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  // Track interactions\n  useEffect(() => {\n    const handleInteraction = () => {\n      if (document.visibilityState === 'visible') {\n        interactionsRef.current += 1;\n      }\n    };\n\n    const events = ['click', 'keydown', 'submit'];\n    events.forEach(event => {\n      document.addEventListener(event, handleInteraction, true);\n    });\n\n    return () => {\n      events.forEach(event => {\n        document.removeEventListener(event, handleInteraction, true);\n      });\n    };\n  }, []);\n\n  // Handle page visibility changes\n  useEffect(() => {\n    const handleVisibilityChange = () => {\n      if (document.visibilityState === 'hidden') {\n        endPageView();\n      } else {\n        visibilityTimeRef.current = Date.now();\n      }\n    };\n\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n    return () => document.removeEventListener('visibilitychange', handleVisibilityChange);\n  }, []);\n\n  // Handle page unload\n  useEffect(() => {\n    const handleBeforeUnload = () => {\n      if (currentPageView && pageViewIdRef.current && user) {\n        const exitTime = new Date();\n        const duration = Math.floor((exitTime.getTime() - currentPageView.entryTime.getTime()) / 1000);\n\n        // Use sendBeacon for reliable data sending on page unload\n        navigator.sendBeacon('/api/page-tracking/end', JSON.stringify({\n          pageViewId: pageViewIdRef.current,\n          exitTime: exitTime.toISOString(),\n          duration,\n          scrollDepth: maxScrollRef.current,\n          interactions: interactionsRef.current,\n          token: localStorage.getItem('token'),\n        }));\n      }\n    };\n\n    window.addEventListener('beforeunload', handleBeforeUnload);\n    return () => window.removeEventListener('beforeunload', handleBeforeUnload);\n  }, [currentPageView, user]);\n\n  const updateInteractions = () => {\n    interactionsRef.current += 1;\n  };\n\n  const trackLogoutAction = async () => {\n    // Special tracking for logout actions\n    if (currentPageView && pageViewIdRef.current) {\n      interactionsRef.current += 1; // Count logout as an interaction\n      await fetch('/api/page-tracking/update', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n        body: JSON.stringify({\n          pageViewId: pageViewIdRef.current,\n          interactions: interactionsRef.current,\n          action: 'logout_initiated'\n        }),\n      }).catch(console.error);\n    }\n  };\n\n  const updateScrollDepth = (depth: number) => {\n    if (depth > maxScrollRef.current) {\n      maxScrollRef.current = depth;\n    }\n  };\n\n  return (\n    <PageTrackingContext.Provider value={{\n      currentPageView,\n      updateInteractions,\n      updateScrollDepth,\n      trackLogoutAction,\n    }}>\n      {children}\n    </PageTrackingContext.Provider>\n  );\n};","size_bytes":8467},"client/src/contexts/ThemeContext.tsx":{"content":"import { createContext, useContext, useState, useEffect, ReactNode } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ninterface ThemeContextType {\n  theme: Theme;\n  toggleTheme: () => void;\n}\n\nconst ThemeContext = createContext<ThemeContextType | undefined>(undefined);\n\nexport function ThemeProvider({ children }: { children: ReactNode }) {\n  const [theme, setTheme] = useState<Theme>(\"light\");\n\n  useEffect(() => {\n    const stored = localStorage.getItem(\"theme\") as Theme;\n    if (stored) {\n      setTheme(stored);\n    } else if (window.matchMedia(\"(prefers-color-scheme: dark)\").matches) {\n      setTheme(\"dark\");\n    }\n  }, []);\n\n  useEffect(() => {\n    localStorage.setItem(\"theme\", theme);\n    \n    if (theme === \"dark\") {\n      document.documentElement.classList.add(\"dark\");\n    } else {\n      document.documentElement.classList.remove(\"dark\");\n    }\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme(prev => prev === \"light\" ? \"dark\" : \"light\");\n  };\n\n  return (\n    <ThemeContext.Provider value={{ theme, toggleTheme }}>\n      {children}\n    </ThemeContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1290},"client/src/hooks/use-auth.ts":{"content":"import { useAuth as useAuthContext } from \"@/contexts/AuthContext\";\n\nexport const useAuth = useAuthContext;\n","size_bytes":108},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/api.ts":{"content":"import axios from \"axios\";\n\nconst API_BASE_URL = \"/api\";\n\nexport const api = axios.create({\n  baseURL: API_BASE_URL,\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`;\n    }\n    return config;\n  },\n  (error) => {\n    return Promise.reject(error);\n  }\n);\n\n// Response interceptor to handle auth errors\napi.interceptors.response.use(\n  (response) => response,\n  (error) => {\n    if (error.response?.status === 401) {\n      localStorage.removeItem(\"token\");\n      window.location.href = \"/login\";\n    }\n    return Promise.reject(error);\n  }\n);\n","size_bytes":704},"client/src/lib/browserDetection.ts":{"content":"// Browser and device detection utilities\nexport function getBrowserInfo() {\n  const userAgent = navigator.userAgent;\n  let browserName = 'Unknown';\n  let deviceType = 'desktop';\n  let operatingSystem = 'Unknown';\n\n  // Detect browser\n  if (userAgent.includes('Chrome') && !userAgent.includes('Edg')) {\n    browserName = 'Chrome';\n  } else if (userAgent.includes('Firefox')) {\n    browserName = 'Firefox';\n  } else if (userAgent.includes('Safari') && !userAgent.includes('Chrome')) {\n    browserName = 'Safari';\n  } else if (userAgent.includes('Edg')) {\n    browserName = 'Edge';\n  } else if (userAgent.includes('Opera') || userAgent.includes('OPR')) {\n    browserName = 'Opera';\n  }\n\n  // Detect device type\n  if (/Mobile|Android|iPhone|iPad|iPod|BlackBerry|IEMobile|Opera Mini/i.test(userAgent)) {\n    if (/iPad|Tablet/i.test(userAgent)) {\n      deviceType = 'tablet';\n    } else {\n      deviceType = 'mobile';\n    }\n  }\n\n  // Detect operating system\n  if (userAgent.includes('Windows')) {\n    operatingSystem = 'Windows';\n  } else if (userAgent.includes('Mac')) {\n    operatingSystem = 'macOS';\n  } else if (userAgent.includes('Linux')) {\n    operatingSystem = 'Linux';\n  } else if (userAgent.includes('Android')) {\n    operatingSystem = 'Android';\n  } else if (userAgent.includes('iPhone') || userAgent.includes('iPad')) {\n    operatingSystem = 'iOS';\n  }\n\n  return {\n    browserName,\n    deviceType,\n    operatingSystem,\n    userAgent\n  };\n}","size_bytes":1446},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const token = localStorage.getItem(\"token\");\n  const headers: Record<string, string> = {};\n  \n  if (data) {\n    headers[\"Content-Type\"] = \"application/json\";\n  }\n  \n  if (token) {\n    headers[\"Authorization\"] = `Bearer ${token}`;\n  }\n\n  const res = await fetch(url, {\n    method,\n    headers,\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const token = localStorage.getItem(\"token\");\n    const headers: Record<string, string> = {};\n    \n    if (token) {\n      headers[\"Authorization\"] = `Bearer ${token}`;\n    }\n\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      headers,\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1761},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/audit-logs.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, Filter, Download, History, User, FileText, Users, ShoppingCart, Ticket, Monitor, Smartphone, Tablet, LogIn, LogOut, Timer, X, Clock } from \"lucide-react\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { format } from \"date-fns\";\n\ninterface ActivityLog {\n  id: number;\n  userId: number;\n  entityType: string;\n  entityId: number;\n  action: string;\n  details: any;\n  ipAddress: string;\n  userAgent: string;\n  createdAt: string;\n  userName?: string;\n}\n\ninterface LoginLog {\n  id: number;\n  userId: number | null;\n  email: string;\n  ipAddress: string;\n  userAgent: string;\n  browserName?: string;\n  deviceType?: string;\n  operatingSystem?: string;\n  sessionType: string;\n  success: boolean;\n  createdAt: string;\n}\n\nexport default function AuditLogs() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [filterType, setFilterType] = useState<string>(\"all\");\n\n  const { data: logs = [], isLoading } = useQuery<ActivityLog[]>({\n    queryKey: [\"/api/activity-logs\"],\n  });\n\n  const { data: loginLogs = [], isLoading: isLoadingLoginLogs } = useQuery<LoginLog[]>({\n    queryKey: [\"/api/login-logs\"],\n  });\n\n  const getEntityIcon = (entityType: string) => {\n    switch (entityType) {\n      case \"user\": return <Users className=\"h-4 w-4\" />;\n      case \"lead\": return <User className=\"h-4 w-4\" />;\n      case \"customer\": return <User className=\"h-4 w-4\" />;\n      case \"rfq\": return <ShoppingCart className=\"h-4 w-4\" />;\n      case \"ticket\": return <Ticket className=\"h-4 w-4\" />;\n      case \"template\": return <FileText className=\"h-4 w-4\" />;\n      default: return <History className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getDeviceIcon = (deviceType: string) => {\n    switch (deviceType) {\n      case \"mobile\": return <Smartphone className=\"h-4 w-4\" />;\n      case \"tablet\": return <Tablet className=\"h-4 w-4\" />;\n      default: return <Monitor className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getSessionIcon = (sessionType: string) => {\n    switch (sessionType) {\n      case \"login\": return <LogIn className=\"h-4 w-4 text-green-600\" />;\n      case \"logout\": return <LogOut className=\"h-4 w-4 text-blue-600\" />;\n      case \"timeout\": return <Timer className=\"h-4 w-4 text-orange-600\" />;\n      case \"browser_close\": return <X className=\"h-4 w-4 text-red-600\" />;\n      default: return <History className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getSessionBadgeColor = (sessionType: string) => {\n    switch (sessionType) {\n      case \"login\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"logout\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"timeout\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\";\n      case \"browser_close\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const getActionColor = (action: string) => {\n    switch (action) {\n      case \"create\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"update\": return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-300\";\n      case \"delete\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"login\": return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300\";\n      case \"logout\": return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n      case \"auto_logout_timeout\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"auto_logout_browser_close\": return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-300\";\n      case \"session_end\": return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-300\";\n      default: return \"bg-gray-100 text-gray-800 dark:bg-gray-900 dark:text-gray-300\";\n    }\n  };\n\n  const filteredLogs = logs.filter(log => {\n    const matchesSearch = \n      log.entityType.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      log.action.toLowerCase().includes(searchTerm.toLowerCase()) ||\n      JSON.stringify(log.details).toLowerCase().includes(searchTerm.toLowerCase());\n    \n    const matchesFilter = filterType === \"all\" || log.entityType === filterType;\n    \n    return matchesSearch && matchesFilter;\n  });\n\n  if (isLoading) {\n    return (\n      <AppLayout>\n        <div className=\"space-y-6\">\n          <div className=\"flex items-center justify-between\">\n            <div>\n              <h1 className=\"text-3xl font-bold tracking-tight\">Audit Logs</h1>\n              <p className=\"text-muted-foreground\">Track all system activities and changes</p>\n            </div>\n          </div>\n          <Card>\n            <CardContent className=\"p-6\">\n              <div className=\"text-center\">Loading audit logs...</div>\n            </CardContent>\n          </Card>\n        </div>\n      </AppLayout>\n    );\n  }\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex items-center justify-between\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">Audit Logs</h1>\n            <p className=\"text-muted-foreground\">Track all system activities and user sessions</p>\n          </div>\n          <Button \n            variant=\"outline\" \n            className=\"gap-2\"\n            onClick={() => {\n              const csvContent = [\n                \"Timestamp,Entity,Action,Details,User ID,User Full Name,IP Address\",\n                ...filteredLogs.map(log => \n                  `\"${format(new Date(log.createdAt), \"MMM dd, yyyy HH:mm\")}\",\"${log.entityType}\",\"${log.action}\",\"${JSON.stringify(log.details).replace(/\"/g, '\"\"')}\",\"${log.userId}\",\"${log.userName || 'Unknown'}\",\"${log.ipAddress}\"`\n                )\n              ].join('\\n');\n              \n              const blob = new Blob([csvContent], { type: 'text/csv' });\n              const url = window.URL.createObjectURL(blob);\n              const a = document.createElement('a');\n              a.href = url;\n              a.download = `audit-logs-${format(new Date(), \"yyyy-MM-dd\")}.csv`;\n              document.body.appendChild(a);\n              a.click();\n              document.body.removeChild(a);\n              window.URL.revokeObjectURL(url);\n            }}\n          >\n            <Download className=\"h-4 w-4\" />\n            Export Logs\n          </Button>\n        </div>\n\n        <Tabs defaultValue=\"activities\" className=\"space-y-4\">\n          <TabsList>\n            <TabsTrigger value=\"activities\">Activity Logs</TabsTrigger>\n            <TabsTrigger value=\"sessions\">Session Management</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"activities\">\n            <Card>\n              <CardHeader>\n                <CardTitle>Activity History</CardTitle>\n                <CardDescription>\n                  Complete log of all user actions and system events\n                </CardDescription>\n              </CardHeader>\n              <CardContent>\n            <div className=\"flex gap-4 mb-6\">\n              <div className=\"relative flex-1\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search activities...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <select\n                value={filterType}\n                onChange={(e) => setFilterType(e.target.value)}\n                className=\"px-3 py-2 border border-input bg-background rounded-md text-sm\"\n              >\n                <option value=\"all\">All Types</option>\n                <option value=\"user\">Users</option>\n                <option value=\"lead\">Leads</option>\n                <option value=\"customer\">Customers</option>\n                <option value=\"rfq\">RFQs</option>\n                <option value=\"ticket\">Support Tickets</option>\n                <option value=\"template\">Email Templates</option>\n              </select>\n            </div>\n\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Timestamp</TableHead>\n                    <TableHead>Entity</TableHead>\n                    <TableHead>Action</TableHead>\n                    <TableHead>Details</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>IP Address</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLogs.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-6\">\n                        No audit logs found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    filteredLogs.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell className=\"font-medium\">\n                          {format(new Date(log.createdAt.replace('Z', '')), \"MMM dd, yyyy HH:mm\")} IST\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            {getEntityIcon(log.entityType)}\n                            <span className=\"capitalize\">{log.entityType}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <Badge className={getActionColor(log.action)}>\n                            {log.action === 'auto_logout_timeout' ? 'AUTO LOGOUT (TIMEOUT)' :\n                             log.action === 'auto_logout_browser_close' ? 'AUTO LOGOUT (BROWSER CLOSE)' :\n                             log.action.toUpperCase()}\n                          </Badge>\n                        </TableCell>\n                        <TableCell className=\"max-w-xs\">\n                          <div className=\"text-sm text-muted-foreground space-y-1\">\n                            {log.details && (() => {\n                              // Handle auto logout events\n                              if (log.action.startsWith('auto_logout')) {\n                                return (\n                                  <div className=\"space-y-1\">\n                                    <div>Reason: {log.details.reason || 'browser_close'}</div>\n                                    <div>Time: {format(new Date(log.createdAt.replace('Z', '')), \"HH:mm:ss\")} IST</div>\n                                    {log.details.sessionDuration !== undefined && (\n                                      <div>Duration: {Math.floor(log.details.sessionDuration / 1000 / 60)}m {Math.floor((log.details.sessionDuration / 1000) % 60)}s</div>\n                                    )}\n                                    <div>Device: {log.details.deviceType || 'desktop'} - {log.details.browserName || 'Unknown'}</div>\n                                  </div>\n                                );\n                              }\n                              \n                              // Handle login events\n                              if (log.action === 'login') {\n                                return (\n                                  <div className=\"space-y-1\">\n                                    <div>Action: User login</div>\n                                    <div>Device: {log.details.deviceType || 'desktop'} - {log.details.browserName || 'Unknown'}</div>\n                                    {log.details.operatingSystem && (\n                                      <div>OS: {log.details.operatingSystem}</div>\n                                    )}\n                                  </div>\n                                );\n                              }\n                              \n                              // Handle logout events\n                              if (log.action === 'logout') {\n                                return (\n                                  <div className=\"space-y-1\">\n                                    <div>Reason: {log.details.reason || 'logout'}</div>\n                                    <div>Time: {format(new Date(log.createdAt.replace('Z', '')), \"HH:mm:ss\")} IST</div>\n                                    {log.details.sessionDuration !== undefined && (\n                                      <div>Duration: {Math.floor(log.details.sessionDuration / 1000 / 60)}m {Math.floor((log.details.sessionDuration / 1000) % 60)}s</div>\n                                    )}\n                                    <div>Device: {log.details.deviceType || 'desktop'} - {log.details.browserName || 'Unknown'}</div>\n                                  </div>\n                                );\n                              }\n                              \n                              // Handle entity actions (create, update, delete)\n                              if (['create', 'update', 'delete'].includes(log.action)) {\n                                return (\n                                  <div className=\"space-y-1\">\n                                    <div>Action: {log.action} {log.entityType}</div>\n                                    {log.details.leadName && <div>Name: {log.details.leadName}</div>}\n                                    {log.details.customerName && <div>Name: {log.details.customerName}</div>}\n                                    {log.details.rfqNumber && <div>RFQ: {log.details.rfqNumber}</div>}\n                                    {log.details.ticketNumber && <div>Ticket: {log.details.ticketNumber}</div>}\n                                    {log.details.updates && (\n                                      <div>Updated: {Object.keys(log.details.updates).join(', ')}</div>\n                                    )}\n                                  </div>\n                                );\n                              }\n                              \n                              // Default fallback for other action types\n                              return (\n                                <div className=\"space-y-1\">\n                                  {Object.entries(log.details).map(([key, value], index) => (\n                                    <div key={index}>{key}: {String(value)}</div>\n                                  )).slice(0, 3)}\n                                </div>\n                              );\n                            })()}\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"text-sm\">\n                            {log.userName || 'Unknown User'} (#{log.userId})\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {log.ipAddress}\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n\n      <TabsContent value=\"sessions\">\n        <Card>\n          <CardHeader>\n            <CardTitle>Session Management</CardTitle>\n            <CardDescription>\n              Login history and session termination tracking with browser and device information\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"rounded-md border\">\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Timestamp</TableHead>\n                    <TableHead>User</TableHead>\n                    <TableHead>Session Type</TableHead>\n                    <TableHead>Device & Browser</TableHead>\n                    <TableHead>IP Address</TableHead>\n                    <TableHead>Status</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {loginLogs.length === 0 ? (\n                    <TableRow>\n                      <TableCell colSpan={6} className=\"text-center py-6\">\n                        No session logs found\n                      </TableCell>\n                    </TableRow>\n                  ) : (\n                    loginLogs.map((log) => (\n                      <TableRow key={log.id}>\n                        <TableCell className=\"font-medium\">\n                          {format(new Date(log.createdAt.replace('Z', '')), \"MMM dd, yyyy HH:mm:ss\")} IST\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            <User className=\"h-4 w-4\" />\n                            <span className=\"text-sm\">{log.email}</span>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"flex items-center gap-2\">\n                            {getSessionIcon(log.sessionType)}\n                            <Badge className={getSessionBadgeColor(log.sessionType)}>\n                              {log.sessionType.replace('_', ' ').toUpperCase()}\n                            </Badge>\n                          </div>\n                        </TableCell>\n                        <TableCell>\n                          <div className=\"space-y-1\">\n                            <div className=\"flex items-center gap-2 text-sm\">\n                              {getDeviceIcon(log.deviceType || 'desktop')}\n                              <span>{log.deviceType || 'Desktop'} - {log.browserName || 'Unknown'}</span>\n                            </div>\n                            <div className=\"text-xs text-muted-foreground\">\n                              {log.operatingSystem || 'Unknown OS'}\n                            </div>\n                          </div>\n                        </TableCell>\n                        <TableCell className=\"text-sm text-muted-foreground\">\n                          {log.ipAddress}\n                        </TableCell>\n                        <TableCell>\n                          <Badge variant={log.success ? \"default\" : \"destructive\"}>\n                            {log.success ? \"Success\" : \"Failed\"}\n                          </Badge>\n                        </TableCell>\n                      </TableRow>\n                    ))\n                  )}\n                </TableBody>\n              </Table>\n            </div>\n          </CardContent>\n        </Card>\n      </TabsContent>\n    </Tabs>\n      </div>\n    </AppLayout>\n  );\n}","size_bytes":19235},"client/src/pages/customers.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport CustomerForm from \"@/components/forms/CustomerForm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Customer } from \"@/types\";\nimport { Plus, Search, Filter, MoreHorizontal, Edit, Eye, FileText } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function Customers() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [kycFilter, setKycFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingCustomer, setEditingCustomer] = useState<Customer | null>(null);\n  const { toast } = useToast();\n\n  const { data: customers = [], isLoading } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const updateKycMutation = useMutation({\n    mutationFn: ({ id, kycStatus }: { id: number; kycStatus: string }) =>\n      api.put(`/customers/${id}`, { kycStatus }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"KYC status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update KYC status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredCustomers = customers.filter((customer) => {\n    const matchesSearch = customer.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         customer.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (customer.company || \"\").toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (customer.panNumber || \"\").toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || customer.status === statusFilter;\n    const matchesKyc = kycFilter === \"all\" || customer.kycStatus === kycFilter;\n    return matchesSearch && matchesStatus && matchesKyc;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      active: { variant: \"default\" as const, label: \"Active\", className: \"bg-green-100 text-green-800\" },\n      inactive: { variant: \"secondary\" as const, label: \"Inactive\", className: \"\" },\n      suspended: { variant: \"destructive\" as const, label: \"Suspended\", className: \"\" },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.active;\n    return (\n      <Badge variant={config.variant} className={config.className || \"\"}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getKycBadge = (kycStatus: string) => {\n    const kycConfig = {\n      pending: { variant: \"secondary\" as const, label: \"Pending\", className: \"\" },\n      verified: { variant: \"default\" as const, label: \"Verified\", className: \"bg-green-100 text-green-800\" },\n      rejected: { variant: \"destructive\" as const, label: \"Rejected\", className: \"\" },\n    };\n    \n    const config = kycConfig[kycStatus as keyof typeof kycConfig] || kycConfig.pending;\n    return (\n      <Badge variant={config.variant} className={config.className || \"\"}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const handleKycUpdate = (customerId: number, newKycStatus: string) => {\n    updateKycMutation.mutate({ id: customerId, kycStatus: newKycStatus });\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Customer Management</h1>\n            <p className=\"text-muted-foreground\">Manage customer profiles and KYC status</p>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-bg\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add New Customer\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Customer</DialogTitle>\n              </DialogHeader>\n              <CustomerForm onSuccess={() => setIsCreateModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search customers...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                  <SelectItem value=\"suspended\">Suspended</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={kycFilter} onValueChange={setKycFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by KYC\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All KYC Status</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"verified\">Verified</SelectItem>\n                  <SelectItem value=\"rejected\">Rejected</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Customers Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Customers ({filteredCustomers.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading customers...</div>\n            ) : filteredCustomers.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No customers found\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Company</TableHead>\n                    <TableHead>PAN Number</TableHead>\n                    <TableHead>KYC Status</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Total Investment</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredCustomers.map((customer) => (\n                    <TableRow key={customer.id}>\n                      <TableCell className=\"font-medium\">{customer.name}</TableCell>\n                      <TableCell>{customer.email}</TableCell>\n                      <TableCell>{customer.company || \"-\"}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {customer.panNumber || \"-\"}\n                      </TableCell>\n                      <TableCell>{getKycBadge(customer.kycStatus)}</TableCell>\n                      <TableCell>{getStatusBadge(customer.status)}</TableCell>\n                      <TableCell>\n                        ₹{customer.totalInvestment ? parseFloat(customer.totalInvestment).toLocaleString() : \"0\"}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDistanceToNow(new Date(customer.createdAt), { addSuffix: true })}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setEditingCustomer(customer)}>\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Eye className=\"mr-2 h-4 w-4\" />\n                              View Profile\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <FileText className=\"mr-2 h-4 w-4\" />\n                              View RFQs\n                            </DropdownMenuItem>\n                            {customer.kycStatus === \"pending\" && (\n                              <>\n                                <DropdownMenuItem \n                                  onClick={() => handleKycUpdate(customer.id, \"verified\")}\n                                  className=\"text-green-600\"\n                                >\n                                  Approve KYC\n                                </DropdownMenuItem>\n                                <DropdownMenuItem \n                                  onClick={() => handleKycUpdate(customer.id, \"rejected\")}\n                                  className=\"text-destructive\"\n                                >\n                                  Reject KYC\n                                </DropdownMenuItem>\n                              </>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        <Dialog open={!!editingCustomer} onOpenChange={() => setEditingCustomer(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Customer</DialogTitle>\n            </DialogHeader>\n            {editingCustomer && (\n              <CustomerForm \n                customer={editingCustomer} \n                onSuccess={() => setEditingCustomer(null)} \n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":11996},"client/src/pages/dashboard.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport KPICards from \"@/components/dashboard/KPICards\";\nimport SalesChart from \"@/components/dashboard/SalesChart\";\nimport LeadSourceChart from \"@/components/dashboard/LeadSourceChart\";\nimport RecentActivityTable from \"@/components/dashboard/RecentActivityTable\";\nimport QuickActions from \"@/components/dashboard/QuickActions\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Download } from \"lucide-react\";\nimport { DashboardKPIs, LeadSource, SalesPerformance, Activity } from \"@/types\";\n\nexport default function Dashboard() {\n  const { data: kpis } = useQuery<DashboardKPIs>({\n    queryKey: [\"/api/dashboard/kpis\"],\n  });\n\n  const { data: leadSources } = useQuery<LeadSource[]>({\n    queryKey: [\"/api/dashboard/lead-sources\"],\n  });\n\n  const { data: salesPerformance } = useQuery<SalesPerformance[]>({\n    queryKey: [\"/api/dashboard/sales-performance\"],\n  });\n\n  const { data: recentActivities } = useQuery<Activity[]>({\n    queryKey: [\"/api/dashboard/recent-activities\"],\n  });\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-8\">\n        {/* Dashboard Header */}\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Dashboard Overview</h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Welcome back! Here's what's happening with your bond platform today.\n            </p>\n          </div>\n          <div className=\"flex items-center gap-3\">\n            <Select defaultValue=\"30days\">\n              <SelectTrigger className=\"w-[140px]\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                <SelectItem value=\"month\">This month</SelectItem>\n                <SelectItem value=\"quarter\">This quarter</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"gradient-bg\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Data\n            </Button>\n          </div>\n        </div>\n\n        {/* KPI Cards */}\n        <KPICards kpis={kpis} />\n\n        {/* Charts Row */}\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n          <SalesChart data={salesPerformance} />\n          <LeadSourceChart data={leadSources} />\n        </div>\n\n        {/* Recent Activities */}\n        <RecentActivityTable activities={recentActivities} />\n\n        {/* Quick Actions */}\n        <QuickActions />\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":2893},"client/src/pages/email-templates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport EmailTemplateForm from \"@/components/forms/EmailTemplateForm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EmailTemplate } from \"@/types\";\nimport { Plus, Search, Filter, MoreHorizontal, Edit, Eye, Copy, Send, Mail } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function EmailTemplates() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingTemplate, setEditingTemplate] = useState<EmailTemplate | null>(null);\n  const [previewTemplate, setPreviewTemplate] = useState<EmailTemplate | null>(null);\n  const { toast } = useToast();\n\n  const { data: templates = [], isLoading } = useQuery<EmailTemplate[]>({\n    queryKey: [\"/api/email-templates\"],\n  });\n\n  const duplicateMutation = useMutation({\n    mutationFn: (template: EmailTemplate) => api.post(\"/email-templates\", {\n      name: `${template.name} (Copy)`,\n      subject: template.subject,\n      body: template.body,\n      category: template.category,\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Template duplicated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to duplicate template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deactivateMutation = useMutation({\n    mutationFn: (id: number) => api.put(`/email-templates/${id}`, { isActive: false }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Template deactivated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to deactivate template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTemplates = templates.filter((template) => {\n    const matchesSearch = template.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         template.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         template.body.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesCategory = categoryFilter === \"all\" || template.category === categoryFilter;\n    return matchesSearch && matchesCategory;\n  });\n\n  const getCategoryBadge = (category: string) => {\n    const categoryConfig = {\n      welcome: { variant: \"default\" as const, label: \"Welcome\", className: \"bg-blue-100 text-blue-800\" },\n      follow_up: { variant: \"secondary\" as const, label: \"Follow Up\", className: \"\" },\n      rfq_confirmation: { variant: \"outline\" as const, label: \"RFQ Confirmation\", className: \"\" },\n      support: { variant: \"destructive\" as const, label: \"Support\", className: \"\" },\n    };\n    \n    const config = categoryConfig[category as keyof typeof categoryConfig] || { variant: \"outline\" as const, label: category, className: \"\" };\n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const handleDuplicate = (template: EmailTemplate) => {\n    duplicateMutation.mutate(template);\n  };\n\n  const handleDeactivate = (templateId: number) => {\n    if (window.confirm(\"Are you sure you want to deactivate this template?\")) {\n      deactivateMutation.mutate(templateId);\n    }\n  };\n\n  const templatesByCategory = templates.reduce((acc, template) => {\n    acc[template.category] = (acc[template.category] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Email Templates</h1>\n            <p className=\"text-muted-foreground\">Manage email templates for customer communication</p>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-bg\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create New Template\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-4xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Email Template</DialogTitle>\n              </DialogHeader>\n              <EmailTemplateForm onSuccess={() => setIsCreateModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Templates</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{templates.length}</p>\n                </div>\n                <Mail className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Welcome</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {templatesByCategory.welcome || 0}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Follow Up</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {templatesByCategory.follow_up || 0}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Support</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {templatesByCategory.support || 0}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search templates...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"welcome\">Welcome</SelectItem>\n                  <SelectItem value=\"follow_up\">Follow Up</SelectItem>\n                  <SelectItem value=\"rfq_confirmation\">RFQ Confirmation</SelectItem>\n                  <SelectItem value=\"support\">Support</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Templates Grid */}\n        {isLoading ? (\n          <div className=\"text-center py-8\">Loading templates...</div>\n        ) : filteredTemplates.length === 0 ? (\n          <Card>\n            <CardContent className=\"p-12 text-center\">\n              <Mail className=\"h-12 w-12 text-muted-foreground mx-auto mb-4\" />\n              <h3 className=\"text-lg font-semibold text-foreground mb-2\">No templates found</h3>\n              <p className=\"text-muted-foreground\">\n                Create your first email template to get started with customer communication.\n              </p>\n            </CardContent>\n          </Card>\n        ) : (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {filteredTemplates.map((template) => (\n              <Card key={template.id} className=\"card-shadow hover:shadow-md transition-shadow\">\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"space-y-1\">\n                      <CardTitle className=\"text-lg\">{template.name}</CardTitle>\n                      <p className=\"text-sm text-muted-foreground\">{template.subject}</p>\n                    </div>\n                    <DropdownMenu>\n                      <DropdownMenuTrigger asChild>\n                        <Button variant=\"ghost\" size=\"sm\">\n                          <MoreHorizontal className=\"h-4 w-4\" />\n                        </Button>\n                      </DropdownMenuTrigger>\n                      <DropdownMenuContent align=\"end\">\n                        <DropdownMenuItem onClick={() => setEditingTemplate(template)}>\n                          <Edit className=\"mr-2 h-4 w-4\" />\n                          Edit\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => setPreviewTemplate(template)}>\n                          <Eye className=\"mr-2 h-4 w-4\" />\n                          Preview\n                        </DropdownMenuItem>\n                        <DropdownMenuItem onClick={() => handleDuplicate(template)}>\n                          <Copy className=\"mr-2 h-4 w-4\" />\n                          Duplicate\n                        </DropdownMenuItem>\n                        <DropdownMenuItem>\n                          <Send className=\"mr-2 h-4 w-4\" />\n                          Send Test Email\n                        </DropdownMenuItem>\n                        <DropdownMenuItem \n                          onClick={() => handleDeactivate(template.id)}\n                          className=\"text-destructive\"\n                        >\n                          Deactivate\n                        </DropdownMenuItem>\n                      </DropdownMenuContent>\n                    </DropdownMenu>\n                  </div>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div className=\"flex items-center justify-between\">\n                    {getCategoryBadge(template.category)}\n                    <Badge variant={template.isActive ? \"default\" : \"secondary\"}>\n                      {template.isActive ? \"Active\" : \"Inactive\"}\n                    </Badge>\n                  </div>\n                  \n                  <div className=\"text-sm text-muted-foreground\">\n                    <p className=\"line-clamp-3\">{template.body.replace(/<[^>]*>/g, '')}</p>\n                  </div>\n                  \n                  <div className=\"text-xs text-muted-foreground pt-2 border-t\">\n                    <p>Created {formatDistanceToNow(new Date(template.createdAt), { addSuffix: true })}</p>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n\n        {/* Edit Modal */}\n        <Dialog open={!!editingTemplate} onOpenChange={() => setEditingTemplate(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Email Template</DialogTitle>\n            </DialogHeader>\n            {editingTemplate && (\n              <EmailTemplateForm \n                template={editingTemplate} \n                onSuccess={() => setEditingTemplate(null)} \n              />\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Preview Modal */}\n        <Dialog open={!!previewTemplate} onOpenChange={() => setPreviewTemplate(null)}>\n          <DialogContent className=\"max-w-4xl\">\n            <DialogHeader>\n              <DialogTitle>Email Template Preview</DialogTitle>\n            </DialogHeader>\n            {previewTemplate && (\n              <div className=\"space-y-4\">\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <div>\n                    <label className=\"text-sm font-medium\">Template Name</label>\n                    <p className=\"text-sm text-muted-foreground\">{previewTemplate.name}</p>\n                  </div>\n                  <div>\n                    <label className=\"text-sm font-medium\">Category</label>\n                    <p className=\"text-sm text-muted-foreground\">{previewTemplate.category}</p>\n                  </div>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Subject</label>\n                  <p className=\"text-sm text-muted-foreground\">{previewTemplate.subject}</p>\n                </div>\n                <div>\n                  <label className=\"text-sm font-medium\">Email Body</label>\n                  <div \n                    className=\"mt-2 p-4 border rounded-lg bg-muted/50 max-h-96 overflow-y-auto\"\n                    dangerouslySetInnerHTML={{ __html: previewTemplate.body }}\n                  />\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":15524},"client/src/pages/leads.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport LeadForm from \"@/components/forms/LeadForm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lead } from \"@/types\";\nimport { Plus, Search, Filter, MoreHorizontal, Edit, Trash2, UserPlus, MessageSquare, Calendar } from \"lucide-react\";\nimport { formatDistanceToNow, format } from \"date-fns\";\n\nexport default function Leads() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [sourceFilter, setSourceFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingLead, setEditingLead] = useState<Lead | null>(null);\n  const [viewingFollowUps, setViewingFollowUps] = useState<Lead | null>(null);\n  const [newFollowUpNote, setNewFollowUpNote] = useState(\"\");\n  const [newFollowUpDate, setNewFollowUpDate] = useState(\"\");\n  const { toast } = useToast();\n\n  const { data: leads = [], isLoading } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: followUps = [] } = useQuery<any[]>({\n    queryKey: [\"/api/leads\", viewingFollowUps?.id, \"follow-ups\"],\n    enabled: !!viewingFollowUps,\n  });\n\n  const addFollowUpMutation = useMutation({\n    mutationFn: ({ leadId, note, followUpDate }: { leadId: number; note: string; followUpDate?: string }) =>\n      api.post(`/leads/${leadId}/follow-ups`, { note, followUpDate }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\", viewingFollowUps?.id, \"follow-ups\"] });\n      setNewFollowUpNote(\"\");\n      setNewFollowUpDate(\"\");\n      toast({\n        title: \"Success\",\n        description: \"Follow-up note added successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to add follow-up\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: (id: number) => api.delete(`/leads/${id}`),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead deleted successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to delete lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const convertToCustomerMutation = useMutation({\n    mutationFn: (leadId: number) => api.post(\"/customers\", {\n      leadId,\n      name: leads.find(l => l.id === leadId)?.name,\n      email: leads.find(l => l.id === leadId)?.email,\n      phone: leads.find(l => l.id === leadId)?.phone,\n      company: leads.find(l => l.id === leadId)?.company,\n      status: \"active\",\n      kycStatus: \"pending\",\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead converted to customer successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to convert lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredLeads = leads.filter((lead) => {\n    const matchesSearch = lead.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         lead.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (lead.company || \"\").toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || lead.status === statusFilter;\n    const matchesSource = sourceFilter === \"all\" || lead.source === sourceFilter;\n    return matchesSearch && matchesStatus && matchesSource;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      new: { variant: \"default\" as const, label: \"New\", className: \"\" },\n      contacted: { variant: \"secondary\" as const, label: \"Contacted\", className: \"\" },\n      qualified: { variant: \"outline\" as const, label: \"Qualified\", className: \"\" },\n      converted: { variant: \"default\" as const, label: \"Converted\", className: \"bg-green-100 text-green-800\" },\n      lost: { variant: \"destructive\" as const, label: \"Lost\", className: \"\" },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.new;\n    return (\n      <Badge variant={config.variant} className={config.className || \"\"}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getSourceLabel = (source: string) => {\n    const sourceLabels = {\n      website: \"Website\",\n      referral: \"Referral\",\n      social_media: \"Social Media\",\n      email_campaign: \"Email Campaign\",\n      direct: \"Direct\",\n    };\n    return sourceLabels[source as keyof typeof sourceLabels] || source;\n  };\n\n  const handleDelete = (id: number) => {\n    if (window.confirm(\"Are you sure you want to delete this lead?\")) {\n      deleteMutation.mutate(id);\n    }\n  };\n\n  const handleConvertToCustomer = (leadId: number) => {\n    if (window.confirm(\"Are you sure you want to convert this lead to a customer?\")) {\n      convertToCustomerMutation.mutate(leadId);\n    }\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Leads Management</h1>\n            <p className=\"text-muted-foreground\">Track and manage potential customers</p>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-bg\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add New Lead\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Lead</DialogTitle>\n              </DialogHeader>\n              <LeadForm onSuccess={() => setIsCreateModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search leads...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"new\">New</SelectItem>\n                  <SelectItem value=\"contacted\">Contacted</SelectItem>\n                  <SelectItem value=\"qualified\">Qualified</SelectItem>\n                  <SelectItem value=\"converted\">Converted</SelectItem>\n                  <SelectItem value=\"lost\">Lost</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={sourceFilter} onValueChange={setSourceFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by source\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Sources</SelectItem>\n                  <SelectItem value=\"website\">Website</SelectItem>\n                  <SelectItem value=\"referral\">Referral</SelectItem>\n                  <SelectItem value=\"social_media\">Social Media</SelectItem>\n                  <SelectItem value=\"email_campaign\">Email Campaign</SelectItem>\n                  <SelectItem value=\"direct\">Direct</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Leads Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Leads ({filteredLeads.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading leads...</div>\n            ) : filteredLeads.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No leads found\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Company</TableHead>\n                    <TableHead>Source</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Investment Amount</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredLeads.map((lead) => (\n                    <TableRow key={lead.id}>\n                      <TableCell className=\"font-medium\">{lead.name}</TableCell>\n                      <TableCell>{lead.email}</TableCell>\n                      <TableCell>{lead.company || \"-\"}</TableCell>\n                      <TableCell>\n                        <Badge variant=\"outline\">\n                          {getSourceLabel(lead.source)}\n                        </Badge>\n                      </TableCell>\n                      <TableCell>{getStatusBadge(lead.status)}</TableCell>\n                      <TableCell>\n                        {lead.investmentAmount ? `₹${parseFloat(lead.investmentAmount).toLocaleString()}` : \"-\"}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDistanceToNow(new Date(lead.createdAt), { addSuffix: true })}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setEditingLead(lead)}>\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => setViewingFollowUps(lead)}>\n                              <MessageSquare className=\"mr-2 h-4 w-4\" />\n                              Follow-up Notes\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleConvertToCustomer(lead.id)}\n                              disabled={lead.status === \"converted\"}\n                            >\n                              <UserPlus className=\"mr-2 h-4 w-4\" />\n                              Convert to Customer\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleDelete(lead.id)}\n                              className=\"text-destructive\"\n                            >\n                              <Trash2 className=\"mr-2 h-4 w-4\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        <Dialog open={!!editingLead} onOpenChange={() => setEditingLead(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Lead</DialogTitle>\n            </DialogHeader>\n            {editingLead && (\n              <LeadForm \n                lead={editingLead} \n                onSuccess={() => setEditingLead(null)} \n              />\n            )}\n          </DialogContent>\n        </Dialog>\n\n        {/* Follow-up Notes Modal */}\n        <Dialog open={!!viewingFollowUps} onOpenChange={() => setViewingFollowUps(null)}>\n          <DialogContent className=\"max-w-3xl max-h-[80vh] overflow-y-auto\">\n            <DialogHeader>\n              <DialogTitle>Follow-up Notes - {viewingFollowUps?.name}</DialogTitle>\n            </DialogHeader>\n            {viewingFollowUps && (\n              <div className=\"space-y-4\">\n                {/* Add new follow-up */}\n                <div className=\"border rounded-lg p-4 bg-muted/50\">\n                  <h4 className=\"font-medium mb-3\">Add Follow-up Note</h4>\n                  <div className=\"space-y-3\">\n                    <Textarea\n                      placeholder=\"Enter follow-up notes...\"\n                      value={newFollowUpNote}\n                      onChange={(e) => setNewFollowUpNote(e.target.value)}\n                      rows={3}\n                    />\n                    <div className=\"flex gap-3 items-end\">\n                      <div className=\"flex-1\">\n                        <Label htmlFor=\"followUpDate\">Next Follow-up Date (Optional)</Label>\n                        <Input\n                          id=\"followUpDate\"\n                          type=\"datetime-local\"\n                          value={newFollowUpDate}\n                          onChange={(e) => setNewFollowUpDate(e.target.value)}\n                        />\n                      </div>\n                      <Button \n                        onClick={() => {\n                          if (!newFollowUpNote.trim()) return;\n                          addFollowUpMutation.mutate({\n                            leadId: viewingFollowUps.id,\n                            note: newFollowUpNote,\n                            followUpDate: newFollowUpDate || undefined,\n                          });\n                        }}\n                        disabled={!newFollowUpNote.trim() || addFollowUpMutation.isPending}\n                      >\n                        <Calendar className=\"mr-2 h-4 w-4\" />\n                        Add Note\n                      </Button>\n                    </div>\n                  </div>\n                </div>\n\n                {/* Existing follow-ups */}\n                <div className=\"space-y-3\">\n                  <h4 className=\"font-medium\">Follow-up History</h4>\n                  {followUps.length === 0 ? (\n                    <p className=\"text-muted-foreground text-center py-8\">No follow-up notes yet</p>\n                  ) : (\n                    followUps.map((followUp: any) => (\n                      <div key={followUp.id} className=\"border rounded-lg p-4\">\n                        <div className=\"flex justify-between items-start mb-2\">\n                          <div className=\"font-medium text-sm\">\n                            {followUp.createdByName || \"Unknown User\"}\n                          </div>\n                          <div className=\"text-xs text-muted-foreground\">\n                            {format(new Date(followUp.createdAt), \"MMM dd, yyyy 'at' h:mm a\")}\n                          </div>\n                        </div>\n                        <p className=\"text-sm mb-2\">{followUp.note}</p>\n                        {followUp.followUpDate && (\n                          <div className=\"text-xs text-muted-foreground flex items-center\">\n                            <Calendar className=\"mr-1 h-3 w-3\" />\n                            Next follow-up: {format(new Date(followUp.followUpDate), \"MMM dd, yyyy 'at' h:mm a\")}\n                          </div>\n                        )}\n                      </div>\n                    ))\n                  )}\n                </div>\n              </div>\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":17555},"client/src/pages/login.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Shield, Mail, Lock } from \"lucide-react\";\n\nexport default function Login() {\n  const [step, setStep] = useState<\"email\" | \"otp\">(\"email\");\n  const [email, setEmail] = useState(\"\");\n  const [otp, setOtp] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const { requestOTP, login, user } = useAuth();\n  const [, setLocation] = useLocation();\n  const { toast } = useToast();\n\n  // Redirect if already logged in\n  if (user) {\n    setLocation(\"/dashboard\");\n    return null;\n  }\n\n  const handleRequestOTP = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!email) return;\n\n    setIsLoading(true);\n    try {\n      await requestOTP(email);\n      setStep(\"otp\");\n      toast({\n        title: \"OTP Sent\",\n        description: \"Please check your email for the verification code.\",\n      });\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to send OTP\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleVerifyOTP = async (e: React.FormEvent) => {\n    e.preventDefault();\n    if (!otp) return;\n\n    setIsLoading(true);\n    try {\n      await login(email, otp);\n      setLocation(\"/dashboard\");\n    } catch (error: any) {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Invalid OTP\",\n        variant: \"destructive\",\n      });\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen bg-gradient-to-br from-slate-50 to-blue-50 dark:from-slate-900 dark:to-slate-800 flex items-center justify-center p-4\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"text-center\">\n          <div className=\"gradient-bg w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <Shield className=\"w-8 h-8 text-white\" />\n          </div>\n          <CardTitle className=\"text-2xl font-bold\">MeraDhan CRM</CardTitle>\n          <CardDescription>\n            SEBI Registered OBPP - Secure Login\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          {step === \"email\" ? (\n            <form onSubmit={handleRequestOTP} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"email\">Email Address</Label>\n                <div className=\"relative\">\n                  <Mail className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"email\"\n                    type=\"email\"\n                    placeholder=\"Enter your registered email\"\n                    value={email}\n                    onChange={(e) => setEmail(e.target.value)}\n                    className=\"pl-10\"\n                    required\n                    disabled={isLoading}\n                  />\n                </div>\n              </div>\n              <Button type=\"submit\" className=\"w-full gradient-bg\" disabled={isLoading}>\n                {isLoading ? \"Sending...\" : \"Send OTP\"}\n              </Button>\n            </form>\n          ) : (\n            <form onSubmit={handleVerifyOTP} className=\"space-y-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"otp\">Enter OTP</Label>\n                <div className=\"relative\">\n                  <Lock className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    id=\"otp\"\n                    type=\"text\"\n                    placeholder=\"6-digit OTP\"\n                    value={otp}\n                    onChange={(e) => setOtp(e.target.value)}\n                    className=\"pl-10 text-center text-lg tracking-widest\"\n                    maxLength={6}\n                    required\n                    disabled={isLoading}\n                  />\n                </div>\n                <p className=\"text-sm text-muted-foreground\">\n                  OTP sent to {email}\n                </p>\n              </div>\n              <div className=\"flex gap-3\">\n                <Button\n                  type=\"button\"\n                  variant=\"outline\"\n                  className=\"flex-1\"\n                  onClick={() => setStep(\"email\")}\n                  disabled={isLoading}\n                >\n                  Back\n                </Button>\n                <Button type=\"submit\" className=\"flex-1 gradient-bg\" disabled={isLoading}>\n                  {isLoading ? \"Verifying...\" : \"Verify & Login\"}\n                </Button>\n              </div>\n            </form>\n          )}\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":5031},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/reports.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LineChart, Line, BarChart, Bar, PieChart, Pie, Cell, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport { Download, TrendingUp, Users, DollarSign, FileText, Target } from \"lucide-react\";\nimport { DashboardKPIs, LeadSource, SalesPerformance, Lead, Customer, RFQ } from \"@/types\";\n\nconst COLORS = [\n  'hsl(var(--chart-1))',\n  'hsl(var(--chart-2))',\n  'hsl(var(--chart-3))',\n  'hsl(var(--chart-4))',\n  'hsl(var(--chart-5))',\n];\n\nexport default function Reports() {\n  const { data: kpis } = useQuery<DashboardKPIs>({\n    queryKey: [\"/api/dashboard/kpis\"],\n  });\n\n  const { data: leadSources } = useQuery<LeadSource[]>({\n    queryKey: [\"/api/dashboard/lead-sources\"],\n  });\n\n  const { data: salesPerformance } = useQuery<SalesPerformance[]>({\n    queryKey: [\"/api/dashboard/sales-performance\"],\n  });\n\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: rfqs = [] } = useQuery<RFQ[]>({\n    queryKey: [\"/api/rfqs\"],\n  });\n\n  // Calculate metrics\n  const conversionRate = leads.length > 0 ? (leads.filter(l => l.status === \"converted\").length / leads.length) * 100 : 0;\n  const avgDealSize = customers.length > 0 ? \n    customers.reduce((sum, c) => sum + parseFloat(c.totalInvestment || \"0\"), 0) / customers.length : 0;\n\n  // Lead status distribution\n  const leadStatusData = [\n    { name: \"New\", value: leads.filter(l => l.status === \"new\").length, color: COLORS[0] },\n    { name: \"Contacted\", value: leads.filter(l => l.status === \"contacted\").length, color: COLORS[1] },\n    { name: \"Qualified\", value: leads.filter(l => l.status === \"qualified\").length, color: COLORS[2] },\n    { name: \"Converted\", value: leads.filter(l => l.status === \"converted\").length, color: COLORS[3] },\n    { name: \"Lost\", value: leads.filter(l => l.status === \"lost\").length, color: COLORS[4] },\n  ];\n\n  // Monthly trends (mock data for demonstration)\n  const monthlyTrends = [\n    { month: \"Jan\", leads: 45, customers: 12, rfqs: 8, revenue: 2.5 },\n    { month: \"Feb\", leads: 52, customers: 15, rfqs: 11, revenue: 3.2 },\n    { month: \"Mar\", leads: 48, customers: 18, rfqs: 14, revenue: 4.1 },\n    { month: \"Apr\", leads: 61, customers: 22, rfqs: 16, revenue: 5.3 },\n    { month: \"May\", leads: 55, customers: 25, rfqs: 19, revenue: 6.2 },\n    { month: \"Jun\", leads: 67, customers: 28, rfqs: 21, revenue: 7.1 },\n  ];\n\n  // Bond type distribution\n  const bondTypeData = [\n    { name: \"Government\", value: rfqs.filter(r => r.bondType === \"government\").length, color: COLORS[0] },\n    { name: \"Corporate\", value: rfqs.filter(r => r.bondType === \"corporate\").length, color: COLORS[1] },\n    { name: \"Municipal\", value: rfqs.filter(r => r.bondType === \"municipal\").length, color: COLORS[2] },\n  ];\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Reports & Analytics</h1>\n            <p className=\"text-muted-foreground\">Comprehensive business intelligence and performance metrics</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Select defaultValue=\"30days\">\n              <SelectTrigger className=\"w-[140px]\">\n                <SelectValue />\n              </SelectTrigger>\n              <SelectContent>\n                <SelectItem value=\"7days\">Last 7 days</SelectItem>\n                <SelectItem value=\"30days\">Last 30 days</SelectItem>\n                <SelectItem value=\"quarter\">This quarter</SelectItem>\n                <SelectItem value=\"year\">This year</SelectItem>\n              </SelectContent>\n            </Select>\n            <Button className=\"gradient-bg\">\n              <Download className=\"mr-2 h-4 w-4\" />\n              Export Report\n            </Button>\n          </div>\n        </div>\n\n        {/* Key Metrics */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Conversion Rate</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{conversionRate.toFixed(1)}%</p>\n                  <p className=\"text-sm text-accent\">+2.5% from last month</p>\n                </div>\n                <div className=\"bg-green-100 dark:bg-green-900/20 p-3 rounded-full\">\n                  <Target className=\"h-5 w-5 text-accent\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Avg Deal Size</p>\n                  <p className=\"text-2xl font-bold text-foreground\">₹{(avgDealSize / 100000).toFixed(1)}L</p>\n                  <p className=\"text-sm text-accent\">+8.3% from last month</p>\n                </div>\n                <div className=\"bg-blue-100 dark:bg-blue-900/20 p-3 rounded-full\">\n                  <DollarSign className=\"h-5 w-5 text-primary\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Pipeline</p>\n                  <p className=\"text-2xl font-bold text-foreground\">₹{(kpis?.totalInvestment ? parseFloat(kpis.totalInvestment) : 0).toFixed(1)}Cr</p>\n                  <p className=\"text-sm text-accent\">+15.2% from last month</p>\n                </div>\n                <div className=\"bg-yellow-100 dark:bg-yellow-900/20 p-3 rounded-full\">\n                  <TrendingUp className=\"h-5 w-5 text-warning\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Customer Growth</p>\n                  <p className=\"text-2xl font-bold text-foreground\">+{customers.filter(c => \n                    new Date(c.createdAt) > new Date(Date.now() - 30 * 24 * 60 * 60 * 1000)\n                  ).length}</p>\n                  <p className=\"text-sm text-accent\">This month</p>\n                </div>\n                <div className=\"bg-green-100 dark:bg-green-900/20 p-3 rounded-full\">\n                  <Users className=\"h-5 w-5 text-accent\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        <Tabs defaultValue=\"overview\" className=\"space-y-6\">\n          <TabsList className=\"grid w-full grid-cols-4\">\n            <TabsTrigger value=\"overview\">Overview</TabsTrigger>\n            <TabsTrigger value=\"sales\">Sales Analysis</TabsTrigger>\n            <TabsTrigger value=\"customer\">Customer Insights</TabsTrigger>\n            <TabsTrigger value=\"performance\">Performance</TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"overview\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Monthly Trends */}\n              <Card className=\"card-shadow\">\n                <CardHeader>\n                  <CardTitle>Monthly Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px]\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <LineChart data={monthlyTrends}>\n                        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                        <XAxis dataKey=\"month\" className=\"fill-muted-foreground text-xs\" />\n                        <YAxis className=\"fill-muted-foreground text-xs\" />\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: 'hsl(var(--card))', \n                            border: '1px solid hsl(var(--border))' \n                          }}\n                        />\n                        <Legend />\n                        <Line type=\"monotone\" dataKey=\"leads\" stroke={COLORS[0]} strokeWidth={2} name=\"Leads\" />\n                        <Line type=\"monotone\" dataKey=\"customers\" stroke={COLORS[1]} strokeWidth={2} name=\"Customers\" />\n                        <Line type=\"monotone\" dataKey=\"rfqs\" stroke={COLORS[2]} strokeWidth={2} name=\"RFQs\" />\n                      </LineChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Lead Status Distribution */}\n              <Card className=\"card-shadow\">\n                <CardHeader>\n                  <CardTitle>Lead Status Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px]\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={leadStatusData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={60}\n                          outerRadius={100}\n                          paddingAngle={5}\n                          dataKey=\"value\"\n                        >\n                          {leadStatusData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Lead Sources */}\n            <Card className=\"card-shadow\">\n              <CardHeader>\n                <CardTitle>Lead Source Performance</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"h-[300px]\">\n                  <ResponsiveContainer width=\"100%\" height=\"100%\">\n                    <BarChart data={leadSources}>\n                      <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                      <XAxis dataKey=\"source\" className=\"fill-muted-foreground text-xs\" />\n                      <YAxis className=\"fill-muted-foreground text-xs\" />\n                      <Tooltip \n                        contentStyle={{ \n                          backgroundColor: 'hsl(var(--card))', \n                          border: '1px solid hsl(var(--border))' \n                        }}\n                      />\n                      <Bar dataKey=\"count\" fill={COLORS[0]} />\n                    </BarChart>\n                  </ResponsiveContainer>\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"sales\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Revenue Trends */}\n              <Card className=\"card-shadow\">\n                <CardHeader>\n                  <CardTitle>Revenue Trends</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px]\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={monthlyTrends}>\n                        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                        <XAxis dataKey=\"month\" className=\"fill-muted-foreground text-xs\" />\n                        <YAxis className=\"fill-muted-foreground text-xs\" />\n                        <Tooltip \n                          formatter={(value: number) => [`₹${value}Cr`, \"Revenue\"]}\n                          contentStyle={{ \n                            backgroundColor: 'hsl(var(--card))', \n                            border: '1px solid hsl(var(--border))' \n                          }}\n                        />\n                        <Bar dataKey=\"revenue\" fill={COLORS[3]} />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Bond Type Distribution */}\n              <Card className=\"card-shadow\">\n                <CardHeader>\n                  <CardTitle>Bond Type Distribution</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px]\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <PieChart>\n                        <Pie\n                          data={bondTypeData}\n                          cx=\"50%\"\n                          cy=\"50%\"\n                          innerRadius={40}\n                          outerRadius={100}\n                          paddingAngle={5}\n                          dataKey=\"value\"\n                        >\n                          {bondTypeData.map((entry, index) => (\n                            <Cell key={`cell-${index}`} fill={entry.color} />\n                          ))}\n                        </Pie>\n                        <Tooltip />\n                        <Legend />\n                      </PieChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Sales Targets */}\n            <Card className=\"card-shadow\">\n              <CardHeader>\n                <CardTitle>Sales Targets vs Achievements</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"space-y-6\">\n                  {[\n                    { metric: \"Monthly Revenue\", target: 10, achieved: 7.1, unit: \"Cr\" },\n                    { metric: \"New Customers\", target: 50, achieved: 35, unit: \"\" },\n                    { metric: \"RFQ Volume\", target: 100, achieved: 78, unit: \"\" },\n                    { metric: \"Conversion Rate\", target: 25, achieved: conversionRate, unit: \"%\" },\n                  ].map((item, index) => (\n                    <div key={item.metric} className=\"space-y-2\">\n                      <div className=\"flex justify-between items-center\">\n                        <span className=\"font-medium\">{item.metric}</span>\n                        <div className=\"text-right\">\n                          <span className=\"text-sm text-muted-foreground\">\n                            {item.achieved}{item.unit} / {item.target}{item.unit}\n                          </span>\n                          <Badge className={`ml-2 ${(item.achieved / item.target) * 100 >= 80 ? 'bg-green-100 text-green-800' : 'bg-yellow-100 text-yellow-800'}`}>\n                            {((item.achieved / item.target) * 100).toFixed(0)}%\n                          </Badge>\n                        </div>\n                      </div>\n                      <Progress value={(item.achieved / item.target) * 100} className=\"h-2\" />\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n\n          <TabsContent value=\"customer\" className=\"space-y-6\">\n            <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n              {/* Customer Acquisition */}\n              <Card className=\"card-shadow\">\n                <CardHeader>\n                  <CardTitle>Customer Acquisition</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-[300px]\">\n                    <ResponsiveContainer width=\"100%\" height=\"100%\">\n                      <BarChart data={monthlyTrends}>\n                        <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n                        <XAxis dataKey=\"month\" className=\"fill-muted-foreground text-xs\" />\n                        <YAxis className=\"fill-muted-foreground text-xs\" />\n                        <Tooltip \n                          contentStyle={{ \n                            backgroundColor: 'hsl(var(--card))', \n                            border: '1px solid hsl(var(--border))' \n                          }}\n                        />\n                        <Bar dataKey=\"customers\" fill={COLORS[1]} />\n                      </BarChart>\n                    </ResponsiveContainer>\n                  </div>\n                </CardContent>\n              </Card>\n\n              {/* Customer Segments */}\n              <Card className=\"card-shadow\">\n                <CardHeader>\n                  <CardTitle>Customer Segments</CardTitle>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"space-y-4\">\n                    {[\n                      { segment: \"High Value (>₹1Cr)\", count: customers.filter(c => parseFloat(c.totalInvestment || \"0\") > 10000000).length, percentage: 15 },\n                      { segment: \"Medium Value (₹50L-₹1Cr)\", count: customers.filter(c => {\n                        const investment = parseFloat(c.totalInvestment || \"0\");\n                        return investment >= 5000000 && investment <= 10000000;\n                      }).length, percentage: 35 },\n                      { segment: \"Regular (₹10L-₹50L)\", count: customers.filter(c => {\n                        const investment = parseFloat(c.totalInvestment || \"0\");\n                        return investment >= 1000000 && investment < 5000000;\n                      }).length, percentage: 40 },\n                      { segment: \"New (<₹10L)\", count: customers.filter(c => parseFloat(c.totalInvestment || \"0\") < 1000000).length, percentage: 10 },\n                    ].map((segment, index) => (\n                      <div key={segment.segment} className=\"space-y-2\">\n                        <div className=\"flex justify-between\">\n                          <span className=\"text-sm font-medium\">{segment.segment}</span>\n                          <span className=\"text-sm text-muted-foreground\">{segment.count} customers</span>\n                        </div>\n                        <Progress value={segment.percentage} className=\"h-2\" />\n                      </div>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n          </TabsContent>\n\n          <TabsContent value=\"performance\" className=\"space-y-6\">\n            {/* Team Performance */}\n            <Card className=\"card-shadow\">\n              <CardHeader>\n                <CardTitle>Team Performance Metrics</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n                  {[\n                    { name: \"Rajesh Kumar\", role: \"Senior RM\", leads: 45, conversions: 12, revenue: 3.2 },\n                    { name: \"Priya Sharma\", role: \"Sales Executive\", leads: 38, conversions: 9, revenue: 2.8 },\n                    { name: \"Amit Patel\", role: \"Relationship Manager\", leads: 42, conversions: 11, revenue: 3.5 },\n                  ].map((member, index) => (\n                    <div key={member.name} className=\"p-4 border rounded-lg space-y-3\">\n                      <div>\n                        <h4 className=\"font-medium\">{member.name}</h4>\n                        <p className=\"text-sm text-muted-foreground\">{member.role}</p>\n                      </div>\n                      <div className=\"space-y-2 text-sm\">\n                        <div className=\"flex justify-between\">\n                          <span>Leads Generated</span>\n                          <span className=\"font-medium\">{member.leads}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Conversions</span>\n                          <span className=\"font-medium\">{member.conversions}</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Revenue</span>\n                          <span className=\"font-medium\">₹{member.revenue}Cr</span>\n                        </div>\n                        <div className=\"flex justify-between\">\n                          <span>Conversion Rate</span>\n                          <Badge className=\"bg-green-100 text-green-800\">\n                            {((member.conversions / member.leads) * 100).toFixed(1)}%\n                          </Badge>\n                        </div>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              </CardContent>\n            </Card>\n          </TabsContent>\n        </Tabs>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":21808},"client/src/pages/rfq-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport RFQForm from \"@/components/forms/RFQForm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { RFQ } from \"@/types\";\nimport { Plus, Search, Filter, MoreHorizontal, Edit, Eye, FileText, Send } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function RFQManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [bondTypeFilter, setBondTypeFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingRFQ, setEditingRFQ] = useState<RFQ | null>(null);\n  const { toast } = useToast();\n\n  const { data: rfqs = [], isLoading } = useQuery<RFQ[]>({\n    queryKey: [\"/api/rfqs\"],\n  });\n\n  const submitToNSEMutation = useMutation({\n    mutationFn: (id: number) => api.put(`/rfqs/${id}`, { \n      status: \"submitted\",\n      submittedAt: new Date().toISOString(),\n      nseRfqId: `NSE-${Date.now()}` // Mock NSE ID\n    }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rfqs\"] });\n      toast({\n        title: \"Success\",\n        description: \"RFQ submitted to NSE successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to submit RFQ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredRFQs = rfqs.filter((rfq) => {\n    const matchesSearch = rfq.rfqNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         rfq.bondName.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         (rfq.nseRfqId || \"\").toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || rfq.status === statusFilter;\n    const matchesBondType = bondTypeFilter === \"all\" || rfq.bondType === bondTypeFilter;\n    return matchesSearch && matchesStatus && matchesBondType;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      pending: { variant: \"secondary\" as const, label: \"Pending\", className: \"\" },\n      submitted: { variant: \"default\" as const, label: \"Submitted\", className: \"bg-blue-100 text-blue-800\" },\n      executed: { variant: \"default\" as const, label: \"Executed\", className: \"bg-green-100 text-green-800\" },\n      cancelled: { variant: \"destructive\" as const, label: \"Cancelled\", className: \"\" },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending;\n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getBondTypeBadge = (bondType: string) => {\n    const typeConfig = {\n      government: { variant: \"outline\" as const, label: \"Government\" },\n      corporate: { variant: \"outline\" as const, label: \"Corporate\" },\n      municipal: { variant: \"outline\" as const, label: \"Municipal\" },\n    };\n    \n    const config = typeConfig[bondType as keyof typeof typeConfig] || typeConfig.government;\n    return (\n      <Badge variant={config.variant}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const handleSubmitToNSE = (rfqId: number) => {\n    if (window.confirm(\"Are you sure you want to submit this RFQ to NSE?\")) {\n      submitToNSEMutation.mutate(rfqId);\n    }\n  };\n\n  const totalValue = filteredRFQs.reduce((sum, rfq) => {\n    return sum + (parseFloat(rfq.faceValue) * rfq.quantity);\n  }, 0);\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">RFQ Management</h1>\n            <p className=\"text-muted-foreground\">Manage Request for Quotes and NSE submissions</p>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-bg\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create New RFQ\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New RFQ</DialogTitle>\n              </DialogHeader>\n              <RFQForm onSuccess={() => setIsCreateModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total RFQs</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{rfqs.length}</p>\n                </div>\n                <FileText className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Pending</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {rfqs.filter(r => r.status === \"pending\").length}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-yellow-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Executed</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    {rfqs.filter(r => r.status === \"executed\").length}\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-green-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-green-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Value</p>\n                  <p className=\"text-2xl font-bold text-foreground\">\n                    ₹{(totalValue / 10000000).toFixed(1)}Cr\n                  </p>\n                </div>\n                <div className=\"w-8 h-8 bg-blue-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search RFQs...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"submitted\">Submitted</SelectItem>\n                  <SelectItem value=\"executed\">Executed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={bondTypeFilter} onValueChange={setBondTypeFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by bond type\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Bond Types</SelectItem>\n                  <SelectItem value=\"government\">Government</SelectItem>\n                  <SelectItem value=\"corporate\">Corporate</SelectItem>\n                  <SelectItem value=\"municipal\">Municipal</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* RFQs Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>RFQs ({filteredRFQs.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading RFQs...</div>\n            ) : filteredRFQs.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No RFQs found\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>RFQ Number</TableHead>\n                    <TableHead>Bond Name</TableHead>\n                    <TableHead>Bond Type</TableHead>\n                    <TableHead>Quantity</TableHead>\n                    <TableHead>Face Value</TableHead>\n                    <TableHead>Total Value</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>NSE ID</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredRFQs.map((rfq) => (\n                    <TableRow key={rfq.id}>\n                      <TableCell className=\"font-medium\">{rfq.rfqNumber}</TableCell>\n                      <TableCell>{rfq.bondName}</TableCell>\n                      <TableCell>{getBondTypeBadge(rfq.bondType)}</TableCell>\n                      <TableCell>{rfq.quantity.toLocaleString()}</TableCell>\n                      <TableCell>₹{parseFloat(rfq.faceValue).toLocaleString()}</TableCell>\n                      <TableCell>\n                        ₹{(parseFloat(rfq.faceValue) * rfq.quantity).toLocaleString()}\n                      </TableCell>\n                      <TableCell>{getStatusBadge(rfq.status)}</TableCell>\n                      <TableCell className=\"font-mono text-sm\">\n                        {rfq.nseRfqId || \"-\"}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDistanceToNow(new Date(rfq.createdAt), { addSuffix: true })}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setEditingRFQ(rfq)}>\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Eye className=\"mr-2 h-4 w-4\" />\n                              View Details\n                            </DropdownMenuItem>\n                            {rfq.status === \"pending\" && (\n                              <DropdownMenuItem \n                                onClick={() => handleSubmitToNSE(rfq.id)}\n                                className=\"text-primary\"\n                              >\n                                <Send className=\"mr-2 h-4 w-4\" />\n                                Submit to NSE\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        <Dialog open={!!editingRFQ} onOpenChange={() => setEditingRFQ(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit RFQ</DialogTitle>\n            </DialogHeader>\n            {editingRFQ && (\n              <RFQForm \n                rfq={editingRFQ} \n                onSuccess={() => setEditingRFQ(null)} \n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":14315},"client/src/pages/sales-pipeline.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Lead, Customer } from \"@/types\";\nimport { Users, UserCheck, TrendingUp, Target, Eye, ArrowRight } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function SalesPipeline() {\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  // Calculate pipeline stages\n  const newLeads = leads.filter(lead => lead.status === \"new\");\n  const contactedLeads = leads.filter(lead => lead.status === \"contacted\");\n  const qualifiedLeads = leads.filter(lead => lead.status === \"qualified\");\n  const convertedLeads = leads.filter(lead => lead.status === \"converted\");\n\n  const totalLeads = leads.length;\n  const conversionRate = totalLeads > 0 ? (convertedLeads.length / totalLeads) * 100 : 0;\n\n  const pipelineStages = [\n    {\n      stage: \"New Leads\",\n      count: newLeads.length,\n      leads: newLeads,\n      percentage: totalLeads > 0 ? (newLeads.length / totalLeads) * 100 : 0,\n      color: \"bg-blue-500\",\n      icon: Users,\n    },\n    {\n      stage: \"Contacted\",\n      count: contactedLeads.length,\n      leads: contactedLeads,\n      percentage: totalLeads > 0 ? (contactedLeads.length / totalLeads) * 100 : 0,\n      color: \"bg-yellow-500\",\n      icon: Target,\n    },\n    {\n      stage: \"Qualified\",\n      count: qualifiedLeads.length,\n      leads: qualifiedLeads,\n      percentage: totalLeads > 0 ? (qualifiedLeads.length / totalLeads) * 100 : 0,\n      color: \"bg-orange-500\",\n      icon: TrendingUp,\n    },\n    {\n      stage: \"Converted\",\n      count: convertedLeads.length,\n      leads: convertedLeads,\n      percentage: totalLeads > 0 ? (convertedLeads.length / totalLeads) * 100 : 0,\n      color: \"bg-green-500\",\n      icon: UserCheck,\n    },\n  ];\n\n  const recentConversions = customers\n    .filter(customer => customer.leadId)\n    .slice(0, 5);\n\n  const topPerformers = [\n    { name: \"Rajesh Kumar\", conversions: 12, target: 15, percentage: 80 },\n    { name: \"Priya Sharma\", conversions: 8, target: 10, percentage: 80 },\n    { name: \"Amit Patel\", conversions: 15, target: 20, percentage: 75 },\n    { name: \"Sunita Singh\", conversions: 6, target: 10, percentage: 60 },\n  ];\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Sales Pipeline</h1>\n            <p className=\"text-muted-foreground\">Track lead progression and conversion rates</p>\n          </div>\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\">\n              <Eye className=\"mr-2 h-4 w-4\" />\n              View Reports\n            </Button>\n            <Button className=\"gradient-bg\">\n              <TrendingUp className=\"mr-2 h-4 w-4\" />\n              Analyze Trends\n            </Button>\n          </div>\n        </div>\n\n        {/* Pipeline Overview */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n          {pipelineStages.map((stage, index) => (\n            <Card key={stage.stage} className=\"card-shadow\">\n              <CardContent className=\"p-6\">\n                <div className=\"flex items-center justify-between mb-4\">\n                  <div>\n                    <p className=\"text-sm font-medium text-muted-foreground\">{stage.stage}</p>\n                    <p className=\"text-2xl font-bold text-foreground\">{stage.count}</p>\n                  </div>\n                  <div className=\"bg-muted p-3 rounded-full\">\n                    <stage.icon className=\"h-5 w-5 text-muted-foreground\" />\n                  </div>\n                </div>\n                <div className=\"space-y-2\">\n                  <div className=\"flex items-center justify-between text-sm\">\n                    <span>Pipeline %</span>\n                    <span>{stage.percentage.toFixed(1)}%</span>\n                  </div>\n                  <Progress value={stage.percentage} className=\"h-2\" />\n                </div>\n              </CardContent>\n            </Card>\n          ))}\n        </div>\n\n        {/* Conversion Funnel */}\n        <Card className=\"card-shadow\">\n          <CardHeader>\n            <CardTitle>Conversion Funnel</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              {pipelineStages.map((stage, index) => (\n                <div key={stage.stage} className=\"flex items-center gap-4\">\n                  <div className=\"w-32 text-sm font-medium\">{stage.stage}</div>\n                  <div className=\"flex-1\">\n                    <div className=\"flex items-center gap-2\">\n                      <div className=\"flex-1 bg-muted rounded-full h-8 relative overflow-hidden\">\n                        <div \n                          className={`${stage.color} h-full transition-all duration-500 rounded-full flex items-center justify-end pr-2`}\n                          style={{ width: `${stage.percentage}%` }}\n                        >\n                          <span className=\"text-white text-xs font-medium\">\n                            {stage.count}\n                          </span>\n                        </div>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground w-12\">\n                        {stage.percentage.toFixed(1)}%\n                      </span>\n                    </div>\n                  </div>\n                  {index < pipelineStages.length - 1 && (\n                    <ArrowRight className=\"h-4 w-4 text-muted-foreground\" />\n                  )}\n                </div>\n              ))}\n            </div>\n            <div className=\"mt-6 pt-6 border-t\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-sm font-medium\">Overall Conversion Rate</span>\n                <Badge className=\"bg-green-100 text-green-800\">\n                  {conversionRate.toFixed(1)}%\n                </Badge>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Detailed Pipeline View */}\n        <Card className=\"card-shadow\">\n          <CardHeader>\n            <CardTitle>Detailed Pipeline View</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\n              {pipelineStages.map((stage) => {\n                const Icon = stage.icon;\n                return (\n                  <Card key={stage.stage} className=\"border-2 hover:border-primary/50 transition-colors cursor-pointer\">\n                    <CardContent className=\"p-4\">\n                      <div className=\"flex items-center gap-3 mb-3\">\n                        <div className={`p-2 rounded-lg ${stage.color}`}>\n                          <Icon className=\"h-5 w-5 text-white\" />\n                        </div>\n                        <div>\n                          <h3 className=\"font-semibold\">{stage.stage}</h3>\n                          <p className=\"text-sm text-muted-foreground\">\n                            {stage.count} leads\n                          </p>\n                        </div>\n                      </div>\n                      \n                      {/* Show individual leads */}\n                      <div className=\"space-y-2 max-h-48 overflow-y-auto\">\n                        {stage.leads.length === 0 ? (\n                          <p className=\"text-xs text-muted-foreground text-center py-4\">\n                            No leads in this stage\n                          </p>\n                        ) : (\n                          stage.leads.map((lead: any) => (\n                            <div key={lead.id} className=\"bg-muted/30 rounded p-3 hover:bg-muted/50 transition-colors\">\n                              <div className=\"flex justify-between items-start\">\n                                <div>\n                                  <p className=\"font-medium text-sm\">{lead.name}</p>\n                                  <p className=\"text-xs text-muted-foreground\">{lead.email}</p>\n                                  {lead.company && (\n                                    <p className=\"text-xs text-muted-foreground\">{lead.company}</p>\n                                  )}\n                                </div>\n                                {lead.investmentAmount && (\n                                  <div className=\"text-xs font-medium text-green-600\">\n                                    ₹{parseFloat(lead.investmentAmount).toLocaleString()}\n                                  </div>\n                                )}\n                              </div>\n                              <div className=\"mt-2 flex items-center justify-between\">\n                                <Badge variant=\"outline\" className=\"text-xs\">\n                                  {lead.source}\n                                </Badge>\n                                <span className=\"text-xs text-muted-foreground\">\n                                  {formatDistanceToNow(new Date(lead.createdAt), { addSuffix: true })}\n                                </span>\n                              </div>\n                            </div>\n                          ))\n                        )}\n                      </div>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n          {/* Recent Conversions */}\n          <Card className=\"card-shadow\">\n            <CardHeader>\n              <CardTitle>Recent Conversions</CardTitle>\n            </CardHeader>\n            <CardContent>\n              {recentConversions.length === 0 ? (\n                <div className=\"text-center py-6 text-muted-foreground\">\n                  No recent conversions\n                </div>\n              ) : (\n                <div className=\"space-y-4\">\n                  {recentConversions.map((customer) => (\n                    <div key={customer.id} className=\"flex items-center justify-between p-3 bg-muted/50 rounded-lg\">\n                      <div>\n                        <p className=\"font-medium\">{customer.name}</p>\n                        <p className=\"text-sm text-muted-foreground\">{customer.email}</p>\n                      </div>\n                      <Badge className=\"bg-green-100 text-green-800\">\n                        Converted\n                      </Badge>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </CardContent>\n          </Card>\n\n          {/* Top Performers */}\n          <Card className=\"card-shadow\">\n            <CardHeader>\n              <CardTitle>Top Performers</CardTitle>\n            </CardHeader>\n            <CardContent>\n              <div className=\"space-y-4\">\n                {topPerformers.map((performer, index) => (\n                  <div key={performer.name} className=\"space-y-2\">\n                    <div className=\"flex items-center justify-between\">\n                      <div className=\"flex items-center gap-2\">\n                        <span className=\"text-sm font-medium\">#{index + 1}</span>\n                        <span className=\"font-medium\">{performer.name}</span>\n                      </div>\n                      <span className=\"text-sm text-muted-foreground\">\n                        {performer.conversions}/{performer.target}\n                      </span>\n                    </div>\n                    <div className=\"space-y-1\">\n                      <Progress value={performer.percentage} className=\"h-2\" />\n                      <div className=\"flex justify-between text-xs text-muted-foreground\">\n                        <span>{performer.percentage}% of target</span>\n                        <span>{performer.target - performer.conversions} remaining</span>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":12565},"client/src/pages/session-analytics.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Monitor, Smartphone, Tablet, Clock, Eye, MousePointer, ChevronDown, ChevronRight, User, Calendar, Timer, LogIn, LogOut } from \"lucide-react\";\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from \"@/components/ui/collapsible\";\nimport { format } from \"date-fns\";\n\ninterface SessionData {\n  id: number;\n  userId: number;\n  userName: string;\n  userEmail: string;\n  startTime: string;\n  endTime: string | null;\n  duration: number | null;\n  totalPages: number;\n  browserName: string;\n  deviceType: string;\n  endReason: string | null;\n  pageViews: Array<{\n    pagePath: string;\n    pageTitle: string;\n    entryTime: string;\n    exitTime: string | null;\n    duration: number | null;\n    scrollDepth: number;\n    interactions: number;\n  }>;\n}\n\nexport default function SessionAnalytics() {\n  const [startDate, setStartDate] = useState(\"\");\n  const [endDate, setEndDate] = useState(\"\");\n  const [selectedUserId, setSelectedUserId] = useState(\"\");\n  const [expandedSessions, setExpandedSessions] = useState<Record<number, boolean>>({});\n\n  const { data: sessions = [], isLoading, refetch } = useQuery({\n    queryKey: ['/api/session-analytics', startDate, endDate, selectedUserId],\n    queryFn: async () => {\n      const params = new URLSearchParams();\n      if (startDate) params.append('startDate', startDate);\n      if (endDate) params.append('endDate', endDate);\n      if (selectedUserId) params.append('userId', selectedUserId);\n      \n      const response = await fetch(`/api/session-analytics?${params.toString()}`, {\n        headers: {\n          'Authorization': `Bearer ${localStorage.getItem('token')}`,\n        },\n      });\n      if (!response.ok) throw new Error('Failed to fetch session analytics');\n      return await response.json() as SessionData[];\n    },\n    staleTime: 0, // Always consider data stale for session analytics\n    refetchOnWindowFocus: true,\n  });\n\n  // Auto-expand the first session on load\n  if (sessions.length > 0 && Object.keys(expandedSessions).length === 0) {\n    setExpandedSessions({ [sessions[0].id]: true });\n  }\n\n  const formatDuration = (seconds: number | null) => {\n    if (!seconds) return \"N/A\";\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}m ${secs}s`;\n  };\n\n  const getDeviceIcon = (deviceType: string) => {\n    switch (deviceType.toLowerCase()) {\n      case 'mobile': return <Smartphone className=\"h-4 w-4\" />;\n      case 'tablet': return <Tablet className=\"h-4 w-4\" />;\n      default: return <Monitor className=\"h-4 w-4\" />;\n    }\n  };\n\n  const getEndReasonColor = (reason: string | null) => {\n    switch (reason) {\n      case 'logout': return 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200';\n      case 'timeout': return 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200';\n      case 'browser_close': return 'bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200';\n      default: return 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200';\n    }\n  };\n\n  const toggleSession = (sessionId: number) => {\n    setExpandedSessions(prev => ({\n      ...prev,\n      [sessionId]: !prev[sessionId]\n    }));\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Session Analytics</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Detailed session tracking with page browsing history and engagement metrics\n          </p>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Filters</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex gap-4 items-end\">\n              <div className=\"grid gap-2\">\n                <label className=\"text-sm font-medium\">Start Date</label>\n                <Input\n                  type=\"date\"\n                  value={startDate}\n                  onChange={(e) => setStartDate(e.target.value)}\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <label className=\"text-sm font-medium\">End Date</label>\n                <Input\n                  type=\"date\"\n                  value={endDate}\n                  onChange={(e) => setEndDate(e.target.value)}\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <label className=\"text-sm font-medium\">User ID</label>\n                <Input\n                  type=\"number\"\n                  placeholder=\"Filter by user ID\"\n                  value={selectedUserId}\n                  onChange={(e) => setSelectedUserId(e.target.value)}\n                />\n              </div>\n              <div className=\"grid gap-2\">\n                <label className=\"text-sm font-medium\">Refresh Data</label>\n                <Button \n                  variant=\"outline\" \n                  size=\"sm\"\n                  onClick={async () => {\n                    console.log('🔄 Manual refresh triggered');\n                    await refetch();\n                    console.log('✅ Manual refresh completed');\n                  }}\n                  disabled={isLoading}\n                >\n                  {isLoading ? 'Refreshing...' : 'Refresh Sessions'}\n                </Button>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Session List with Toggle View */}\n        <div className=\"space-y-4\">\n          {isLoading ? (\n            <Card>\n              <CardContent className=\"py-8\">\n                <div className=\"text-center\">Loading sessions...</div>\n              </CardContent>\n            </Card>\n          ) : sessions.length === 0 ? (\n            <Card>\n              <CardContent className=\"py-8\">\n                <div className=\"text-center text-muted-foreground\">No sessions found</div>\n              </CardContent>\n            </Card>\n          ) : (\n            sessions.map((session) => (\n              <Card key={session.id} className=\"overflow-hidden\">\n                <Collapsible \n                  open={expandedSessions[session.id]} \n                  onOpenChange={() => toggleSession(session.id)}\n                >\n                  <CollapsibleTrigger className=\"w-full\">\n                    <CardHeader className=\"hover:bg-muted/50 transition-colors\">\n                      <div className=\"flex items-center justify-between\">\n                        <div className=\"flex items-center gap-4\">\n                          <div className=\"flex items-center gap-2\">\n                            {expandedSessions[session.id] ? \n                              <ChevronDown className=\"h-4 w-4\" /> : \n                              <ChevronRight className=\"h-4 w-4\" />\n                            }\n                            <User className=\"h-5 w-5 text-blue-600\" />\n                          </div>\n                          \n                          <div className=\"text-left\">\n                            <div className=\"font-semibold\">{session.userName}</div>\n                            <div className=\"text-sm text-muted-foreground\">{session.userEmail}</div>\n                          </div>\n                        </div>\n\n                        <div className=\"flex items-center gap-6 text-sm\">\n                          {/* Login Time */}\n                          <div className=\"flex items-center gap-2\">\n                            <LogIn className=\"h-4 w-4 text-green-600\" />\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">Login</div>\n                              <div className=\"text-muted-foreground\">\n                                {format(new Date(session.startTime.replace('Z', '')), \"MMM dd, HH:mm\")} IST\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Logout Time */}\n                          <div className=\"flex items-center gap-2\">\n                            <LogOut className=\"h-4 w-4 text-red-600\" />\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">Logout</div>\n                              <div className=\"text-muted-foreground\">\n                                {session.endTime ? \n                                  format(new Date(session.endTime.replace('Z', '')), \"MMM dd, HH:mm\") + \" IST\" :\n                                  \"Active\"\n                                }\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Duration */}\n                          <div className=\"flex items-center gap-2\">\n                            <Timer className=\"h-4 w-4 text-purple-600\" />\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">Duration</div>\n                              <div className=\"text-muted-foreground\">\n                                {formatDuration(session.duration)}\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Device & Browser */}\n                          <div className=\"flex items-center gap-2\">\n                            {getDeviceIcon(session.deviceType)}\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">Device</div>\n                              <div className=\"text-muted-foreground\">\n                                {session.deviceType} - {session.browserName}\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* Pages Count */}\n                          <div className=\"flex items-center gap-2\">\n                            <Eye className=\"h-4 w-4 text-orange-600\" />\n                            <div className=\"text-right\">\n                              <div className=\"font-medium\">Pages</div>\n                              <div className=\"text-muted-foreground\">\n                                {session.totalPages} visited\n                              </div>\n                            </div>\n                          </div>\n\n                          {/* End Reason */}\n                          {session.endReason && (\n                            <Badge className={getEndReasonColor(session.endReason)}>\n                              {session.endReason === 'logout' ? 'Manual Logout' :\n                               session.endReason === 'timeout' ? 'Auto Timeout' :\n                               session.endReason === 'browser_close' ? 'Browser Close' :\n                               session.endReason}\n                            </Badge>\n                          )}\n                        </div>\n                      </div>\n                    </CardHeader>\n                  </CollapsibleTrigger>\n\n                  <CollapsibleContent>\n                    <CardContent>\n                      <div className=\"space-y-4\">\n                        <div className=\"border-t pt-4\">\n                          <h4 className=\"font-semibold mb-3 flex items-center gap-2\">\n                            <Calendar className=\"h-4 w-4\" />\n                            Page Navigation History\n                          </h4>\n                          \n                          {session.pageViews && session.pageViews.length > 0 ? (\n                            <div className=\"rounded-md border\">\n                              <Table>\n                                <TableHeader>\n                                  <TableRow>\n                                    <TableHead>Page</TableHead>\n                                    <TableHead>Entry Time</TableHead>\n                                    <TableHead>Exit Time</TableHead>\n                                    <TableHead>Duration</TableHead>\n                                    <TableHead>Scroll %</TableHead>\n                                    <TableHead>Interactions</TableHead>\n                                  </TableRow>\n                                </TableHeader>\n                                <TableBody>\n                                  {session.pageViews.map((pageView, index) => (\n                                    <TableRow key={index}>\n                                      <TableCell>\n                                        <div>\n                                          <div className=\"font-medium\">{pageView.pageTitle}</div>\n                                          <div className=\"text-sm text-muted-foreground\">{pageView.pagePath}</div>\n                                        </div>\n                                      </TableCell>\n                                      <TableCell className=\"text-sm\">\n                                        {format(new Date(pageView.entryTime.replace('Z', '')), \"HH:mm:ss\")} IST\n                                      </TableCell>\n                                      <TableCell className=\"text-sm\">\n                                        {pageView.exitTime ? \n                                          format(new Date(pageView.exitTime.replace('Z', '')), \"HH:mm:ss\") + \" IST\" :\n                                          \"Active\"\n                                        }\n                                      </TableCell>\n                                      <TableCell>\n                                        <div className=\"flex items-center gap-1\">\n                                          <Clock className=\"h-3 w-3\" />\n                                          {formatDuration(pageView.duration)}\n                                        </div>\n                                      </TableCell>\n                                      <TableCell>\n                                        <div className=\"flex items-center gap-1\">\n                                          <Eye className=\"h-3 w-3\" />\n                                          {pageView.scrollDepth}%\n                                        </div>\n                                      </TableCell>\n                                      <TableCell>\n                                        <div className=\"flex items-center gap-1\">\n                                          <MousePointer className=\"h-3 w-3\" />\n                                          {pageView.interactions}\n                                        </div>\n                                      </TableCell>\n                                    </TableRow>\n                                  ))}\n                                </TableBody>\n                              </Table>\n                            </div>\n                          ) : (\n                            <div className=\"text-center py-8 text-muted-foreground\">\n                              No page views recorded for this session\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </CardContent>\n                  </CollapsibleContent>\n                </Collapsible>\n              </Card>\n            ))\n          )}\n        </div>\n      </div>\n    </AppLayout>\n  );\n}","size_bytes":15726},"client/src/pages/session-test.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Timer, LogOut, X, Eye, EyeOff } from \"lucide-react\";\n\nexport default function SessionTest() {\n  const { user, logout } = useAuth();\n  const [sessionInfo, setSessionInfo] = useState<any>(null);\n  const [timeLeft, setTimeLeft] = useState<number>(15 * 60); // 15 minutes in seconds\n  const [isTabHidden, setIsTabHidden] = useState(false);\n\n  useEffect(() => {\n    // Get current session info\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        setSessionInfo({\n          userId: payload.userId,\n          email: payload.email,\n          sessionToken: payload.sessionToken,\n          exp: new Date(payload.exp * 1000).toLocaleString()\n        });\n      } catch (e) {\n        console.log('Could not parse token');\n      }\n    }\n\n    // Update countdown timer\n    const interval = setInterval(() => {\n      setTimeLeft(prev => Math.max(0, prev - 1));\n    }, 1000);\n\n    // Track visibility changes\n    const handleVisibilityChange = () => {\n      setIsTabHidden(document.visibilityState === 'hidden');\n    };\n    document.addEventListener('visibilitychange', handleVisibilityChange);\n\n    return () => {\n      clearInterval(interval);\n      document.removeEventListener('visibilitychange', handleVisibilityChange);\n    };\n  }, []);\n\n  const formatTime = (seconds: number) => {\n    const mins = Math.floor(seconds / 60);\n    const secs = seconds % 60;\n    return `${mins}:${secs.toString().padStart(2, '0')}`;\n  };\n\n  const testManualLogout = () => {\n    console.log('🧪 Testing Manual Logout...');\n    logout();\n  };\n\n  const testBrowserClose = () => {\n    console.log('🧪 Testing Browser Close Detection...');\n    \n    // Test the actual beforeunload handler\n    const beforeUnloadEvent = new Event('beforeunload', { cancelable: true });\n    window.dispatchEvent(beforeUnloadEvent);\n    \n    // Wait a moment then check if session flags were set\n    setTimeout(() => {\n      const sessionEndSent = sessionStorage.getItem('sessionEndSent');\n      const sessionEndTime = sessionStorage.getItem('sessionEndTime');\n      \n      if (sessionEndSent && sessionEndTime) {\n        console.log('✅ Tab close detection working - session end flags set');\n        console.log('📡 SessionEndSent:', sessionEndSent);\n        console.log('📡 SessionEndTime:', sessionEndTime);\n        \n        // Simulate what happens when you open a new tab soon after (refresh scenario)\n        setTimeout(() => {\n          const timeDiff = Date.now() - parseInt(sessionEndTime);\n          if (timeDiff < 3000) {\n            console.log('✅ Quick reload detected - this would be ignored');\n            alert('Test successful! Tab close detection is working. Check console for details.');\n          }\n        }, 1000);\n      } else {\n        console.log('❌ Tab close detection not working - no session flags set');\n        alert('Test failed! Tab close detection not working properly.');\n      }\n    }, 500);\n  };\n\n  const testTabHide = () => {\n    console.log('🧪 Testing Tab Hide (switch to another tab for 15+ minutes)');\n    alert('Switch to another tab for 15+ minutes to test tab hide timeout. Check console for logs.');\n  };\n\n  const resetTimer = () => {\n    console.log('🔄 Simulating user activity to reset timer');\n    document.dispatchEvent(new Event('mousemove'));\n    setTimeLeft(15 * 60);\n  };\n\n  return (\n    <AppLayout>\n      <div className=\"p-6 space-y-6\">\n        <div>\n          <h1 className=\"text-3xl font-bold\">Session Logout Testing</h1>\n          <p className=\"text-muted-foreground mt-2\">\n            Test all logout scenarios and session management\n          </p>\n        </div>\n\n        {/* Current Session Info */}\n        <Card>\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Timer className=\"h-5 w-5\" />\n              Current Session Info\n            </CardTitle>\n          </CardHeader>\n          <CardContent>\n            {sessionInfo ? (\n              <div className=\"space-y-2\">\n                <p><strong>User ID:</strong> {sessionInfo.userId}</p>\n                <p><strong>Email:</strong> {sessionInfo.email}</p>\n                <p><strong>Session Token:</strong> <code className=\"text-sm bg-muted px-2 py-1 rounded\">{sessionInfo.sessionToken}</code></p>\n                <p><strong>Token Expires:</strong> {sessionInfo.exp}</p>\n                <div className=\"flex items-center gap-2\">\n                  <strong>Tab Status:</strong>\n                  {isTabHidden ? (\n                    <Badge variant=\"secondary\" className=\"flex items-center gap-1\">\n                      <EyeOff className=\"h-3 w-3\" />\n                      Hidden\n                    </Badge>\n                  ) : (\n                    <Badge variant=\"default\" className=\"flex items-center gap-1\">\n                      <Eye className=\"h-3 w-3\" />\n                      Visible\n                    </Badge>\n                  )}\n                </div>\n              </div>\n            ) : (\n              <p>No session info available</p>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Inactivity Timer */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Inactivity Timer</CardTitle>\n            <CardDescription>\n              Time until automatic logout due to inactivity\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <div className=\"text-2xl font-mono\">{formatTime(timeLeft)}</div>\n                <p className=\"text-sm text-muted-foreground\">\n                  {timeLeft === 0 ? 'Session should timeout now!' : 'Time remaining'}\n                </p>\n              </div>\n              <Button onClick={resetTimer} variant=\"outline\">\n                Reset Timer (Simulate Activity)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Logout Tests */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Logout Scenario Tests</CardTitle>\n            <CardDescription>\n              Test different logout mechanisms and verify proper session ending\n            </CardDescription>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <Button \n                onClick={testManualLogout}\n                className=\"flex items-center gap-2\"\n              >\n                <LogOut className=\"h-4 w-4\" />\n                Test Manual Logout\n              </Button>\n              \n              <Button \n                onClick={testBrowserClose}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <X className=\"h-4 w-4\" />\n                Test Browser Close\n              </Button>\n              \n              <Button \n                onClick={testTabHide}\n                variant=\"outline\"\n                className=\"flex items-center gap-2\"\n              >\n                <EyeOff className=\"h-4 w-4\" />\n                Test Tab Hide Timeout\n              </Button>\n              \n              <Button \n                onClick={() => window.location.reload()}\n                variant=\"secondary\"\n                className=\"flex items-center gap-2\"\n              >\n                🔄 Test Page Refresh (No New Session)\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Instructions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Test Instructions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-4\">\n              <div>\n                <h4 className=\"font-semibold\">1. Manual Logout Test</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Click \"Test Manual Logout\" and verify session ends with reason 'logout' in Session Analytics\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold\">2. Inactivity Timeout Test</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Don't interact with the page for 15 minutes. Watch the timer count down and verify automatic logout.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold\">3. Browser Close Test</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Click \"Test Browser Close\" to simulate closing the browser. Check Session Analytics after reopening.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold\">4. Tab Hide Test</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Switch to another tab for 15+ minutes. Return to verify session ended with 'browser_close' reason.\n                </p>\n              </div>\n              \n              <div>\n                <h4 className=\"font-semibold\">5. Page Refresh Test</h4>\n                <p className=\"text-sm text-muted-foreground\">\n                  Refresh the page multiple times. Verify the same session is maintained (no duplicates created).\n                </p>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </AppLayout>\n  );\n}","size_bytes":9779},"client/src/pages/support-tickets.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport SupportTicketForm from \"@/components/forms/SupportTicketForm\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SupportTicket } from \"@/types\";\nimport { Plus, Search, Filter, MoreHorizontal, Edit, Eye, CheckCircle, Clock } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nexport default function SupportTickets() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [priorityFilter, setPriorityFilter] = useState(\"all\");\n  const [categoryFilter, setCategoryFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingTicket, setEditingTicket] = useState<SupportTicket | null>(null);\n  const { toast } = useToast();\n\n  const { data: tickets = [], isLoading } = useQuery<SupportTicket[]>({\n    queryKey: [\"/api/support-tickets\"],\n  });\n\n  const updateStatusMutation = useMutation({\n    mutationFn: ({ id, status, resolution }: { id: number; status: string; resolution?: string }) =>\n      api.put(`/support-tickets/${id}`, { \n        status, \n        resolution,\n        resolvedAt: status === \"resolved\" ? new Date().toISOString() : undefined\n      }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support-tickets\"] });\n      toast({\n        title: \"Success\",\n        description: \"Ticket status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredTickets = tickets.filter((ticket) => {\n    const matchesSearch = ticket.ticketNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         ticket.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         ticket.description.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesStatus = statusFilter === \"all\" || ticket.status === statusFilter;\n    const matchesPriority = priorityFilter === \"all\" || ticket.priority === priorityFilter;\n    const matchesCategory = categoryFilter === \"all\" || ticket.category === categoryFilter;\n    return matchesSearch && matchesStatus && matchesPriority && matchesCategory;\n  });\n\n  const getStatusBadge = (status: string) => {\n    const statusConfig = {\n      open: { variant: \"destructive\" as const, label: \"Open\", className: \"\" },\n      in_progress: { variant: \"secondary\" as const, label: \"In Progress\", className: \"\" },\n      resolved: { variant: \"default\" as const, label: \"Resolved\", className: \"bg-green-100 text-green-800\" },\n      closed: { variant: \"outline\" as const, label: \"Closed\", className: \"\" },\n    };\n    \n    const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.open;\n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getPriorityBadge = (priority: string) => {\n    const priorityConfig = {\n      low: { variant: \"outline\" as const, label: \"Low\", className: \"\" },\n      medium: { variant: \"secondary\" as const, label: \"Medium\", className: \"\" },\n      high: { variant: \"default\" as const, label: \"High\", className: \"bg-orange-100 text-orange-800\" },\n      urgent: { variant: \"destructive\" as const, label: \"Urgent\", className: \"\" },\n    };\n    \n    const config = priorityConfig[priority as keyof typeof priorityConfig] || priorityConfig.medium;\n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getCategoryBadge = (category: string) => {\n    const categoryLabels = {\n      technical: \"Technical\",\n      trading: \"Trading\",\n      kyc: \"KYC\",\n      general: \"General\",\n    };\n    \n    return (\n      <Badge variant=\"outline\">\n        {categoryLabels[category as keyof typeof categoryLabels] || category}\n      </Badge>\n    );\n  };\n\n  const handleStatusUpdate = (ticketId: number, newStatus: string) => {\n    let resolution = undefined;\n    if (newStatus === \"resolved\") {\n      resolution = prompt(\"Please enter the resolution details:\");\n      if (!resolution) return;\n    }\n    \n    updateStatusMutation.mutate({ id: ticketId, status: newStatus, resolution });\n  };\n\n  const openTickets = tickets.filter(t => t.status === \"open\").length;\n  const inProgressTickets = tickets.filter(t => t.status === \"in_progress\").length;\n  const resolvedTickets = tickets.filter(t => t.status === \"resolved\").length;\n  const urgentTickets = tickets.filter(t => t.priority === \"urgent\").length;\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">Support Tickets</h1>\n            <p className=\"text-muted-foreground\">Manage customer support requests and issues</p>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-bg\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Create New Ticket\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl\">\n              <DialogHeader>\n                <DialogTitle>Create New Support Ticket</DialogTitle>\n              </DialogHeader>\n              <SupportTicketForm onSuccess={() => setIsCreateModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Open Tickets</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{openTickets}</p>\n                </div>\n                <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-red-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">In Progress</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{inProgressTickets}</p>\n                </div>\n                <Clock className=\"h-8 w-8 text-yellow-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Resolved</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{resolvedTickets}</p>\n                </div>\n                <CheckCircle className=\"h-8 w-8 text-green-500\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Urgent</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{urgentTickets}</p>\n                </div>\n                <div className=\"w-8 h-8 bg-red-100 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-red-600 rounded-full animate-pulse\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search tickets...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Statuses</SelectItem>\n                  <SelectItem value=\"open\">Open</SelectItem>\n                  <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                  <SelectItem value=\"resolved\">Resolved</SelectItem>\n                  <SelectItem value=\"closed\">Closed</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by priority\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Priorities</SelectItem>\n                  <SelectItem value=\"low\">Low</SelectItem>\n                  <SelectItem value=\"medium\">Medium</SelectItem>\n                  <SelectItem value=\"high\">High</SelectItem>\n                  <SelectItem value=\"urgent\">Urgent</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={categoryFilter} onValueChange={setCategoryFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by category\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Categories</SelectItem>\n                  <SelectItem value=\"technical\">Technical</SelectItem>\n                  <SelectItem value=\"trading\">Trading</SelectItem>\n                  <SelectItem value=\"kyc\">KYC</SelectItem>\n                  <SelectItem value=\"general\">General</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Tickets Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Support Tickets ({filteredTickets.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading tickets...</div>\n            ) : filteredTickets.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No tickets found\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Ticket #</TableHead>\n                    <TableHead>Subject</TableHead>\n                    <TableHead>Category</TableHead>\n                    <TableHead>Priority</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Last Updated</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredTickets.map((ticket) => (\n                    <TableRow key={ticket.id}>\n                      <TableCell className=\"font-medium font-mono\">\n                        {ticket.ticketNumber}\n                      </TableCell>\n                      <TableCell>\n                        <div>\n                          <p className=\"font-medium\">{ticket.subject}</p>\n                          <p className=\"text-sm text-muted-foreground truncate max-w-xs\">\n                            {ticket.description}\n                          </p>\n                        </div>\n                      </TableCell>\n                      <TableCell>{getCategoryBadge(ticket.category)}</TableCell>\n                      <TableCell>{getPriorityBadge(ticket.priority)}</TableCell>\n                      <TableCell>{getStatusBadge(ticket.status)}</TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDistanceToNow(new Date(ticket.createdAt), { addSuffix: true })}\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDistanceToNow(new Date(ticket.updatedAt), { addSuffix: true })}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setEditingTicket(ticket)}>\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem>\n                              <Eye className=\"mr-2 h-4 w-4\" />\n                              View Details\n                            </DropdownMenuItem>\n                            {ticket.status === \"open\" && (\n                              <DropdownMenuItem \n                                onClick={() => handleStatusUpdate(ticket.id, \"in_progress\")}\n                              >\n                                Start Working\n                              </DropdownMenuItem>\n                            )}\n                            {(ticket.status === \"open\" || ticket.status === \"in_progress\") && (\n                              <DropdownMenuItem \n                                onClick={() => handleStatusUpdate(ticket.id, \"resolved\")}\n                                className=\"text-green-600\"\n                              >\n                                Mark Resolved\n                              </DropdownMenuItem>\n                            )}\n                            {ticket.status === \"resolved\" && (\n                              <DropdownMenuItem \n                                onClick={() => handleStatusUpdate(ticket.id, \"closed\")}\n                              >\n                                Close Ticket\n                              </DropdownMenuItem>\n                            )}\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        <Dialog open={!!editingTicket} onOpenChange={() => setEditingTicket(null)}>\n          <DialogContent className=\"max-w-2xl\">\n            <DialogHeader>\n              <DialogTitle>Edit Support Ticket</DialogTitle>\n            </DialogHeader>\n            {editingTicket && (\n              <SupportTicketForm \n                ticket={editingTicket} \n                onSuccess={() => setEditingTicket(null)} \n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":16732},"client/src/pages/user-management.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport AppLayout from \"@/components/layout/AppLayout\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from \"@/components/ui/dialog\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { z } from \"zod\";\nimport { User } from \"@/types\";\nimport { Plus, Search, Filter, MoreHorizontal, Edit, UserCheck, UserX, Shield, Users } from \"lucide-react\";\nimport { formatDistanceToNow } from \"date-fns\";\n\nconst userFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  role: z.enum([\"admin\", \"sales\", \"support\", \"rm\", \"viewer\"], {\n    required_error: \"Please select a role\",\n  }),\n});\n\ntype UserFormData = z.infer<typeof userFormSchema>;\n\ninterface UserFormProps {\n  user?: User;\n  onSuccess: () => void;\n}\n\nfunction UserForm({ user, onSuccess }: UserFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!user;\n\n  const form = useForm<UserFormData>({\n    resolver: zodResolver(userFormSchema),\n    defaultValues: {\n      name: user?.name || \"\",\n      email: user?.email || \"\",\n      phone: user?.phone || \"\",\n      role: (user?.role as any) || \"viewer\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: UserFormData) => api.post(\"/users\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: UserFormData) => api.put(`/users/${user!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update user\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: UserFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"name\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Full Name</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter full name\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"email\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Email Address</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"email\" \n                  placeholder=\"Enter email address\" \n                  {...field} \n                  disabled={isEditing} // Email cannot be changed after creation\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"phone\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Phone Number</FormLabel>\n              <FormControl>\n                <Input \n                  placeholder=\"Enter phone number\" \n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"role\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Role</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select a role\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"sales\">Sales</SelectItem>\n                  <SelectItem value=\"support\">Support</SelectItem>\n                  <SelectItem value=\"rm\">Relationship Manager</SelectItem>\n                  <SelectItem value=\"viewer\">Viewer</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button type=\"submit\" className=\"gradient-bg flex-1\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : isEditing ? \"Update User\" : \"Create User\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n\nexport default function UserManagement() {\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [roleFilter, setRoleFilter] = useState(\"all\");\n  const [statusFilter, setStatusFilter] = useState(\"all\");\n  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false);\n  const [editingUser, setEditingUser] = useState<User | null>(null);\n  const { toast } = useToast();\n\n  const { data: users = [], isLoading } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const toggleStatusMutation = useMutation({\n    mutationFn: ({ id, isActive }: { id: number; isActive: boolean }) =>\n      api.put(`/users/${id}`, { isActive }),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/users\"] });\n      toast({\n        title: \"Success\",\n        description: \"User status updated successfully\",\n      });\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update user status\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const filteredUsers = users.filter((user) => {\n    const matchesSearch = user.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n                         user.email.toLowerCase().includes(searchTerm.toLowerCase());\n    const matchesRole = roleFilter === \"all\" || user.role === roleFilter;\n    const matchesStatus = statusFilter === \"all\" || \n                         (statusFilter === \"active\" && user.isActive) ||\n                         (statusFilter === \"inactive\" && !user.isActive);\n    return matchesSearch && matchesRole && matchesStatus;\n  });\n\n  const getRoleBadge = (role: string) => {\n    const roleConfig = {\n      admin: { variant: \"destructive\" as const, label: \"Admin\", className: \"\" },\n      sales: { variant: \"default\" as const, label: \"Sales\", className: \"bg-blue-100 text-blue-800\" },\n      support: { variant: \"secondary\" as const, label: \"Support\", className: \"\" },\n      rm: { variant: \"outline\" as const, label: \"RM\", className: \"\" },\n      viewer: { variant: \"outline\" as const, label: \"Viewer\", className: \"\" },\n    };\n    \n    const config = roleConfig[role as keyof typeof roleConfig] || roleConfig.viewer;\n    return (\n      <Badge variant={config.variant} className={config.className}>\n        {config.label}\n      </Badge>\n    );\n  };\n\n  const getStatusBadge = (isActive: boolean) => {\n    return (\n      <Badge variant={isActive ? \"default\" : \"secondary\"} className={isActive ? \"bg-green-100 text-green-800\" : \"\"}>\n        {isActive ? \"Active\" : \"Inactive\"}\n      </Badge>\n    );\n  };\n\n  const handleToggleStatus = (userId: number, currentStatus: boolean) => {\n    const action = currentStatus ? \"deactivate\" : \"activate\";\n    if (window.confirm(`Are you sure you want to ${action} this user?`)) {\n      toggleStatusMutation.mutate({ id: userId, isActive: !currentStatus });\n    }\n  };\n\n  const roleStats = users.reduce((acc, user) => {\n    acc[user.role] = (acc[user.role] || 0) + 1;\n    return acc;\n  }, {} as Record<string, number>);\n\n  const activeUsers = users.filter(u => u.isActive).length;\n\n  return (\n    <AppLayout>\n      <div className=\"space-y-6\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold text-foreground\">User Management</h1>\n            <p className=\"text-muted-foreground\">Manage system users and their permissions</p>\n          </div>\n          <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}>\n            <DialogTrigger asChild>\n              <Button className=\"gradient-bg\">\n                <Plus className=\"mr-2 h-4 w-4\" />\n                Add New User\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-md\">\n              <DialogHeader>\n                <DialogTitle>Create New User</DialogTitle>\n              </DialogHeader>\n              <UserForm onSuccess={() => setIsCreateModalOpen(false)} />\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {/* Summary Cards */}\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Total Users</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{users.length}</p>\n                </div>\n                <Users className=\"h-8 w-8 text-primary\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Active Users</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{activeUsers}</p>\n                </div>\n                <UserCheck className=\"h-8 w-8 text-accent\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Admins</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{roleStats.admin || 0}</p>\n                </div>\n                <Shield className=\"h-8 w-8 text-destructive\" />\n              </div>\n            </CardContent>\n          </Card>\n          <Card className=\"card-shadow\">\n            <CardContent className=\"p-6\">\n              <div className=\"flex items-center justify-between\">\n                <div>\n                  <p className=\"text-sm font-medium text-muted-foreground\">Sales Team</p>\n                  <p className=\"text-2xl font-bold text-foreground\">{(roleStats.sales || 0) + (roleStats.rm || 0)}</p>\n                </div>\n                <div className=\"w-8 h-8 bg-blue-100 dark:bg-blue-900/20 rounded-lg flex items-center justify-center\">\n                  <div className=\"w-3 h-3 bg-blue-500 rounded-full\" />\n                </div>\n              </div>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Filters */}\n        <Card>\n          <CardContent className=\"p-6\">\n            <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\n              <div className=\"relative\">\n                <Search className=\"absolute left-3 top-3 h-4 w-4 text-muted-foreground\" />\n                <Input\n                  placeholder=\"Search users...\"\n                  value={searchTerm}\n                  onChange={(e) => setSearchTerm(e.target.value)}\n                  className=\"pl-10\"\n                />\n              </div>\n              <Select value={roleFilter} onValueChange={setRoleFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by role\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Roles</SelectItem>\n                  <SelectItem value=\"admin\">Admin</SelectItem>\n                  <SelectItem value=\"sales\">Sales</SelectItem>\n                  <SelectItem value=\"support\">Support</SelectItem>\n                  <SelectItem value=\"rm\">Relationship Manager</SelectItem>\n                  <SelectItem value=\"viewer\">Viewer</SelectItem>\n                </SelectContent>\n              </Select>\n              <Select value={statusFilter} onValueChange={setStatusFilter}>\n                <SelectTrigger>\n                  <SelectValue placeholder=\"Filter by status\" />\n                </SelectTrigger>\n                <SelectContent>\n                  <SelectItem value=\"all\">All Status</SelectItem>\n                  <SelectItem value=\"active\">Active</SelectItem>\n                  <SelectItem value=\"inactive\">Inactive</SelectItem>\n                </SelectContent>\n              </Select>\n              <Button variant=\"outline\">\n                <Filter className=\"mr-2 h-4 w-4\" />\n                More Filters\n              </Button>\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Users Table */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Users ({filteredUsers.length})</CardTitle>\n          </CardHeader>\n          <CardContent>\n            {isLoading ? (\n              <div className=\"text-center py-8\">Loading users...</div>\n            ) : filteredUsers.length === 0 ? (\n              <div className=\"text-center py-8 text-muted-foreground\">\n                No users found\n              </div>\n            ) : (\n              <Table>\n                <TableHeader>\n                  <TableRow>\n                    <TableHead>Name</TableHead>\n                    <TableHead>Email</TableHead>\n                    <TableHead>Phone</TableHead>\n                    <TableHead>Role</TableHead>\n                    <TableHead>Status</TableHead>\n                    <TableHead>Last Login</TableHead>\n                    <TableHead>Created</TableHead>\n                    <TableHead>Actions</TableHead>\n                  </TableRow>\n                </TableHeader>\n                <TableBody>\n                  {filteredUsers.map((user) => (\n                    <TableRow key={user.id}>\n                      <TableCell className=\"font-medium\">{user.name}</TableCell>\n                      <TableCell>{user.email}</TableCell>\n                      <TableCell className=\"text-muted-foreground\">{user.phone || \"Not provided\"}</TableCell>\n                      <TableCell>{getRoleBadge(user.role)}</TableCell>\n                      <TableCell>{getStatusBadge(user.isActive)}</TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {user.lastLogin \n                          ? formatDistanceToNow(new Date(user.lastLogin), { addSuffix: true })\n                          : \"Never\"\n                        }\n                      </TableCell>\n                      <TableCell className=\"text-muted-foreground\">\n                        {formatDistanceToNow(new Date(user.createdAt), { addSuffix: true })}\n                      </TableCell>\n                      <TableCell>\n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <Button variant=\"ghost\" size=\"sm\">\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </Button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => setEditingUser(user)}>\n                              <Edit className=\"mr-2 h-4 w-4\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem \n                              onClick={() => handleToggleStatus(user.id, user.isActive)}\n                              className={user.isActive ? \"text-destructive\" : \"text-green-600\"}\n                            >\n                              {user.isActive ? (\n                                <>\n                                  <UserX className=\"mr-2 h-4 w-4\" />\n                                  Deactivate\n                                </>\n                              ) : (\n                                <>\n                                  <UserCheck className=\"mr-2 h-4 w-4\" />\n                                  Activate\n                                </>\n                              )}\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </TableCell>\n                    </TableRow>\n                  ))}\n                </TableBody>\n              </Table>\n            )}\n          </CardContent>\n        </Card>\n\n        {/* Edit Modal */}\n        <Dialog open={!!editingUser} onOpenChange={() => setEditingUser(null)}>\n          <DialogContent className=\"max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Edit User</DialogTitle>\n            </DialogHeader>\n            {editingUser && (\n              <UserForm \n                user={editingUser} \n                onSuccess={() => setEditingUser(null)} \n              />\n            )}\n          </DialogContent>\n        </Dialog>\n      </div>\n    </AppLayout>\n  );\n}\n","size_bytes":18710},"client/src/types/index.ts":{"content":"export interface User {\n  id: number;\n  email: string;\n  name: string;\n  phone?: string;\n  role: string;\n  isActive: boolean;\n  lastLogin?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Lead {\n  id: number;\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  source: string;\n  status: string;\n  assignedTo?: number;\n  notes?: string;\n  investmentAmount?: string;\n  bondType?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface Customer {\n  id: number;\n  leadId?: number;\n  name: string;\n  email: string;\n  phone?: string;\n  company?: string;\n  panNumber?: string;\n  kycStatus: string;\n  dematAccount?: string;\n  totalInvestment?: string;\n  relationshipManager?: number;\n  status: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface RFQ {\n  id: number;\n  rfqNumber: string;\n  customerId?: number;\n  bondType: string;\n  bondName: string;\n  faceValue: string;\n  quantity: number;\n  bidPrice?: string;\n  askPrice?: string;\n  status: string;\n  nseRfqId?: string;\n  submittedBy?: number;\n  submittedAt?: string;\n  executedAt?: string;\n  notes?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface SupportTicket {\n  id: number;\n  ticketNumber: string;\n  customerId?: number;\n  subject: string;\n  description: string;\n  category: string;\n  priority: string;\n  status: string;\n  assignedTo?: number;\n  resolution?: string;\n  resolvedAt?: string;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface EmailTemplate {\n  id: number;\n  name: string;\n  subject: string;\n  body: string;\n  category: string;\n  isActive: boolean;\n  createdBy?: number;\n  createdAt: string;\n  updatedAt: string;\n}\n\nexport interface DashboardKPIs {\n  activeLeads: number;\n  activeCustomers: number;\n  totalInvestment: string;\n  pendingRFQs: number;\n}\n\nexport interface LeadSource {\n  source: string;\n  count: number;\n}\n\nexport interface SalesPerformance {\n  period: string;\n  amount: string;\n}\n\nexport interface Activity {\n  id: number;\n  action: string;\n  entityType: string;\n  entityId: number;\n  details: any;\n  createdAt: string;\n  userName?: string;\n}\n","size_bytes":2129},"client/src/components/common/LoadingSpinner.tsx":{"content":"export default function LoadingSpinner() {\n  return (\n    <div className=\"min-h-screen bg-background flex items-center justify-center\">\n      <div className=\"flex flex-col items-center gap-4\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-primary\"></div>\n        <p className=\"text-muted-foreground\">Loading...</p>\n      </div>\n    </div>\n  );\n}\n","size_bytes":378},"client/src/components/common/ProtectedRoute.tsx":{"content":"import { ReactNode } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport LoadingSpinner from \"./LoadingSpinner\";\n\ninterface ProtectedRouteProps {\n  children: ReactNode;\n  allowedRoles?: string[];\n}\n\nexport default function ProtectedRoute({ children, allowedRoles }: ProtectedRouteProps) {\n  const { user, isLoading } = useAuth();\n  const [, setLocation] = useLocation();\n\n  if (isLoading) {\n    return <LoadingSpinner />;\n  }\n\n  if (!user) {\n    setLocation(\"/login\");\n    return null;\n  }\n\n  if (allowedRoles && !allowedRoles.includes(user.role)) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold text-destructive mb-2\">Access Denied</h1>\n          <p className=\"text-muted-foreground\">You don't have permission to access this page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n","size_bytes":988},"client/src/components/dashboard/KPICards.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { Users, UserCheck, TrendingUp, FileText } from \"lucide-react\";\nimport { DashboardKPIs } from \"@/types\";\n\ninterface KPICardsProps {\n  kpis?: DashboardKPIs;\n}\n\nexport default function KPICards({ kpis }: KPICardsProps) {\n  const cards = [\n    {\n      title: \"Active Leads\",\n      value: kpis?.activeLeads || 0,\n      change: \"+12.5% from last month\",\n      icon: Users,\n      bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n      iconColor: \"text-primary\",\n    },\n    {\n      title: \"Active Customers\",\n      value: kpis?.activeCustomers || 0,\n      change: \"+8.2% from last month\",\n      icon: UserCheck,\n      bgColor: \"bg-green-100 dark:bg-green-900/20\",\n      iconColor: \"text-accent\",\n    },\n    {\n      title: \"Total Investment\",\n      value: `₹${parseFloat(kpis?.totalInvestment || \"0\").toFixed(2)} Cr`,\n      change: \"+15.8% from last month\",\n      icon: TrendingUp,\n      bgColor: \"bg-yellow-100 dark:bg-yellow-900/20\",\n      iconColor: \"text-warning\",\n    },\n    {\n      title: \"Pending RFQs\",\n      value: kpis?.pendingRFQs || 0,\n      change: \"-2.1% from last month\",\n      icon: FileText,\n      bgColor: \"bg-red-100 dark:bg-red-900/20\",\n      iconColor: \"text-destructive\",\n    },\n  ];\n\n  return (\n    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {cards.map((card, index) => (\n        <Card key={index} className=\"card-shadow\">\n          <CardContent className=\"p-6\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-muted-foreground\">{card.title}</p>\n                <p className=\"text-2xl font-bold text-foreground\">{card.value}</p>\n                <p className=\"text-sm text-accent font-medium mt-1\">{card.change}</p>\n              </div>\n              <div className={`${card.bgColor} p-3 rounded-full`}>\n                <card.icon className={`${card.iconColor} h-5 w-5`} />\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":2084},"client/src/components/dashboard/LeadSourceChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { PieChart, Pie, Cell, ResponsiveContainer, Tooltip, Legend } from \"recharts\";\nimport { LeadSource } from \"@/types\";\n\ninterface LeadSourceChartProps {\n  data?: LeadSource[];\n}\n\nconst COLORS = [\n  'hsl(var(--chart-1))',\n  'hsl(var(--chart-2))',\n  'hsl(var(--chart-3))',\n  'hsl(var(--chart-4))',\n  'hsl(var(--chart-5))',\n];\n\nexport default function LeadSourceChart({ data }: LeadSourceChartProps) {\n  const chartData = data?.map((item) => ({\n    name: item.source.charAt(0).toUpperCase() + item.source.slice(1),\n    value: item.count,\n  })) || [];\n\n  return (\n    <Card className=\"card-shadow\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Lead Sources</CardTitle>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <PieChart>\n              <Pie\n                data={chartData}\n                cx=\"50%\"\n                cy=\"50%\"\n                innerRadius={60}\n                outerRadius={100}\n                paddingAngle={5}\n                dataKey=\"value\"\n              >\n                {chartData.map((entry, index) => (\n                  <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                ))}\n              </Pie>\n              <Tooltip \n                formatter={(value: number) => [value, \"Leads\"]}\n                contentStyle={{ \n                  backgroundColor: 'hsl(var(--card))', \n                  border: '1px solid hsl(var(--border))' \n                }}\n              />\n              <Legend \n                verticalAlign=\"bottom\" \n                height={36}\n                wrapperStyle={{ paddingTop: '20px' }}\n              />\n            </PieChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":1986},"client/src/components/dashboard/QuickActions.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { useLocation } from \"wouter\";\nimport { UserPlus, FileText, BarChart, Mail } from \"lucide-react\";\n\nconst quickActions = [\n  {\n    title: \"Add New Lead\",\n    description: \"Create and track new potential customers\",\n    icon: UserPlus,\n    href: \"/leads\",\n    bgColor: \"bg-blue-100 dark:bg-blue-900/20\",\n    iconColor: \"text-primary\",\n  },\n  {\n    title: \"Submit RFQ\",\n    description: \"Request for Quote on NSE platform\",\n    icon: FileText,\n    href: \"/rfq-management\",\n    bgColor: \"bg-green-100 dark:bg-green-900/20\",\n    iconColor: \"text-accent\",\n  },\n  {\n    title: \"View Reports\",\n    description: \"Analyze performance and trends\",\n    icon: BarChart,\n    href: \"/reports\",\n    bgColor: \"bg-yellow-100 dark:bg-yellow-900/20\",\n    iconColor: \"text-warning\",\n  },\n  {\n    title: \"Email Templates\",\n    description: \"Manage communication templates\",\n    icon: Mail,\n    href: \"/email-templates\",\n    bgColor: \"bg-red-100 dark:bg-red-900/20\",\n    iconColor: \"text-destructive\",\n  },\n];\n\nexport default function QuickActions() {\n  const [, setLocation] = useLocation();\n\n  return (\n    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6\">\n      {quickActions.map((action, index) => (\n        <Card \n          key={index} \n          className=\"card-shadow hover:shadow-md transition-shadow cursor-pointer\"\n          onClick={() => setLocation(action.href)}\n        >\n          <CardContent className=\"p-6 text-center\">\n            <div className={`${action.bgColor} w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4`}>\n              <action.icon className={`${action.iconColor} h-6 w-6`} />\n            </div>\n            <h4 className=\"text-lg font-semibold text-foreground mb-2\">{action.title}</h4>\n            <p className=\"text-sm text-muted-foreground\">{action.description}</p>\n          </CardContent>\n        </Card>\n      ))}\n    </div>\n  );\n}\n","size_bytes":1953},"client/src/components/dashboard/RecentActivityTable.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from \"@/components/ui/table\";\nimport { Filter, ExternalLink } from \"lucide-react\";\nimport { Activity } from \"@/types\";\nimport { formatDistanceToNow } from \"date-fns\";\n\ninterface RecentActivityTableProps {\n  activities?: Activity[];\n}\n\nexport default function RecentActivityTable({ activities }: RecentActivityTableProps) {\n  const getActivityIcon = (entityType: string) => {\n    switch (entityType) {\n      case \"rfq\":\n        return \"📋\";\n      case \"lead\":\n        return \"👤\";\n      case \"customer\":\n        return \"🏢\";\n      case \"ticket\":\n        return \"🎫\";\n      default:\n        return \"📝\";\n    }\n  };\n\n  const getStatusBadge = (action: string) => {\n    switch (action) {\n      case \"create\":\n        return <Badge className=\"bg-blue-100 text-blue-800\">Created</Badge>;\n      case \"update\":\n        return <Badge className=\"bg-yellow-100 text-yellow-800\">Updated</Badge>;\n      case \"delete\":\n        return <Badge className=\"bg-red-100 text-red-800\">Deleted</Badge>;\n      default:\n        return <Badge variant=\"secondary\">{action}</Badge>;\n    }\n  };\n\n  return (\n    <Card className=\"card-shadow\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Recent Activities</CardTitle>\n          <div className=\"flex gap-3\">\n            <Button variant=\"outline\" size=\"sm\">\n              <Filter className=\"mr-2 h-4 w-4\" />\n              Filter\n            </Button>\n            <Button size=\"sm\" className=\"gradient-bg\">\n              <ExternalLink className=\"mr-2 h-4 w-4\" />\n              View All\n            </Button>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        {activities && activities.length > 0 ? (\n          <Table>\n            <TableHeader>\n              <TableRow>\n                <TableHead>Activity</TableHead>\n                <TableHead>User</TableHead>\n                <TableHead>Type</TableHead>\n                <TableHead>Time</TableHead>\n                <TableHead>Status</TableHead>\n              </TableRow>\n            </TableHeader>\n            <TableBody>\n              {activities.map((activity) => (\n                <TableRow key={activity.id} className=\"hover:bg-muted/50\">\n                  <TableCell>\n                    <div className=\"flex items-center gap-3\">\n                      <span className=\"text-lg\">{getActivityIcon(activity.entityType)}</span>\n                      <span className=\"font-medium capitalize\">\n                        {activity.action} {activity.entityType}\n                      </span>\n                    </div>\n                  </TableCell>\n                  <TableCell>{activity.userName || \"System\"}</TableCell>\n                  <TableCell>\n                    <Badge variant=\"outline\" className=\"capitalize\">\n                      {activity.entityType}\n                    </Badge>\n                  </TableCell>\n                  <TableCell className=\"text-muted-foreground\">\n                    {formatDistanceToNow(new Date(activity.createdAt), { addSuffix: true })}\n                  </TableCell>\n                  <TableCell>\n                    {getStatusBadge(activity.action)}\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        ) : (\n          <div className=\"text-center py-8 text-muted-foreground\">\n            No recent activities found\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":3746},"client/src/components/dashboard/SalesChart.tsx":{"content":"import { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, Legend } from \"recharts\";\nimport { SalesPerformance } from \"@/types\";\n\ninterface SalesChartProps {\n  data?: SalesPerformance[];\n}\n\nexport default function SalesChart({ data }: SalesChartProps) {\n  // Transform data for the chart\n  const chartData = data?.map((item, index) => ({\n    period: `Week ${index + 1}`,\n    current: parseFloat(item.amount),\n    previous: parseFloat(item.amount) * 0.8, // Mock previous data\n  })) || [];\n\n  return (\n    <Card className=\"card-shadow\">\n      <CardHeader>\n        <div className=\"flex items-center justify-between\">\n          <CardTitle className=\"text-lg font-semibold\">Sales Performance</CardTitle>\n          <div className=\"flex gap-2\">\n            <Badge variant=\"secondary\">\n              <div className=\"w-2 h-2 rounded-full bg-primary mr-1\" />\n              Current Month\n            </Badge>\n            <Badge variant=\"outline\">\n              <div className=\"w-2 h-2 rounded-full bg-muted-foreground mr-1\" />\n              Previous Month\n            </Badge>\n          </div>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <div className=\"h-[300px]\">\n          <ResponsiveContainer width=\"100%\" height=\"100%\">\n            <LineChart data={chartData}>\n              <CartesianGrid strokeDasharray=\"3 3\" className=\"stroke-muted\" />\n              <XAxis \n                dataKey=\"period\" \n                className=\"fill-muted-foreground text-xs\"\n              />\n              <YAxis \n                className=\"fill-muted-foreground text-xs\"\n                tickFormatter={(value) => `₹${value}Cr`}\n              />\n              <Tooltip \n                formatter={(value: number) => [`₹${value}Cr`, \"Sales\"]}\n                labelStyle={{ color: 'hsl(var(--foreground))' }}\n                contentStyle={{ \n                  backgroundColor: 'hsl(var(--card))', \n                  border: '1px solid hsl(var(--border))' \n                }}\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"current\" \n                stroke=\"hsl(var(--primary))\" \n                strokeWidth={2}\n                dot={{ fill: 'hsl(var(--primary))' }}\n              />\n              <Line \n                type=\"monotone\" \n                dataKey=\"previous\" \n                stroke=\"hsl(var(--muted-foreground))\" \n                strokeWidth={2}\n                strokeDasharray=\"5 5\"\n                dot={{ fill: 'hsl(var(--muted-foreground))' }}\n              />\n            </LineChart>\n          </ResponsiveContainer>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}\n","size_bytes":2787},"client/src/components/forms/CustomerForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Customer, User, Lead } from \"@/types\";\n\nconst customerFormSchema = z.object({\n  leadId: z.coerce.number().optional(),\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  panNumber: z.string().regex(/^[A-Z]{5}[0-9]{4}[A-Z]{1}$/, \"Invalid PAN format\").optional(),\n  kycStatus: z.enum([\"pending\", \"verified\", \"rejected\"]).default(\"pending\"),\n  dematAccount: z.string().optional(),\n  totalInvestment: z.string().optional(),\n  relationshipManager: z.coerce.number().optional(),\n  status: z.enum([\"active\", \"inactive\", \"suspended\"]).default(\"active\"),\n});\n\ntype CustomerFormData = z.infer<typeof customerFormSchema>;\n\ninterface CustomerFormProps {\n  customer?: Customer;\n  onSuccess: () => void;\n}\n\nexport default function CustomerForm({ customer, onSuccess }: CustomerFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!customer;\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const { data: leads = [] } = useQuery<Lead[]>({\n    queryKey: [\"/api/leads\"],\n  });\n\n  const relationshipManagers = users.filter(user => [\"admin\", \"rm\"].includes(user.role));\n  const availableLeads = leads.filter(lead => lead.status !== \"converted\");\n\n  const form = useForm<CustomerFormData>({\n    resolver: zodResolver(customerFormSchema),\n    defaultValues: {\n      leadId: customer?.leadId || undefined,\n      name: customer?.name || \"\",\n      email: customer?.email || \"\",\n      phone: customer?.phone || \"\",\n      company: customer?.company || \"\",\n      panNumber: customer?.panNumber || \"\",\n      kycStatus: (customer?.kycStatus as any) || \"pending\",\n      dematAccount: customer?.dematAccount || \"\",\n      totalInvestment: customer?.totalInvestment || \"\",\n      relationshipManager: customer?.relationshipManager || undefined,\n      status: (customer?.status as any) || \"active\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: CustomerFormData) => api.post(\"/customers\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: CustomerFormData) => api.put(`/customers/${customer!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/customers\"] });\n      toast({\n        title: \"Success\",\n        description: \"Customer updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update customer\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: CustomerFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        {!isEditing && (\n          <FormField\n            control={form.control}\n            name=\"leadId\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Convert from Lead (Optional)</FormLabel>\n                <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)} value={field.value?.toString()}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select a lead to convert\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {availableLeads.map((lead) => (\n                      <SelectItem key={lead.id} value={lead.id.toString()}>\n                        {lead.name} - {lead.email}\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Full Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter full name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email Address *</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone Number</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter phone number\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Company</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter company name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"panNumber\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>PAN Number</FormLabel>\n                <FormControl>\n                  <Input \n                    placeholder=\"ABCDE1234F\" \n                    {...field} \n                    onChange={(e) => field.onChange(e.target.value.toUpperCase())}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"dematAccount\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Demat Account Number</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter demat account number\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"kycStatus\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>KYC Status</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select KYC status\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"pending\">Pending</SelectItem>\n                    <SelectItem value=\"verified\">Verified</SelectItem>\n                    <SelectItem value=\"rejected\">Rejected</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"status\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"active\">Active</SelectItem>\n                    <SelectItem value=\"inactive\">Inactive</SelectItem>\n                    <SelectItem value=\"suspended\">Suspended</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"relationshipManager\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Relationship Manager</FormLabel>\n                <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)} value={field.value?.toString()}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select relationship manager\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {relationshipManagers.map((user) => (\n                      <SelectItem key={user.id} value={user.id.toString()}>\n                        {user.name} ({user.role})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"totalInvestment\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Total Investment</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Enter total investment amount\" \n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button type=\"submit\" className=\"gradient-bg flex-1\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : isEditing ? \"Update Customer\" : \"Create Customer\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":11753},"client/src/components/forms/EmailTemplateForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { EmailTemplate } from \"@/types\";\nimport { Eye } from \"lucide-react\";\nimport { useState } from \"react\";\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\n\nconst emailTemplateFormSchema = z.object({\n  name: z.string().min(2, \"Template name must be at least 2 characters\"),\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\n  body: z.string().min(10, \"Body must be at least 10 characters\"),\n  category: z.enum([\"welcome\", \"follow_up\", \"rfq_confirmation\", \"support\"], {\n    required_error: \"Please select a category\",\n  }),\n  isActive: z.boolean().default(true),\n});\n\ntype EmailTemplateFormData = z.infer<typeof emailTemplateFormSchema>;\n\ninterface EmailTemplateFormProps {\n  template?: EmailTemplate;\n  onSuccess: () => void;\n}\n\nexport default function EmailTemplateForm({ template, onSuccess }: EmailTemplateFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!template;\n  const [showPreview, setShowPreview] = useState(false);\n\n  const form = useForm<EmailTemplateFormData>({\n    resolver: zodResolver(emailTemplateFormSchema),\n    defaultValues: {\n      name: template?.name || \"\",\n      subject: template?.subject || \"\",\n      body: template?.body || \"\",\n      category: (template?.category as any) || \"welcome\",\n      isActive: template?.isActive ?? true,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: EmailTemplateFormData) => api.post(\"/email-templates\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Email template created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create email template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: EmailTemplateFormData) => api.put(`/email-templates/${template!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/email-templates\"] });\n      toast({\n        title: \"Success\",\n        description: \"Email template updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update email template\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: EmailTemplateFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  // Template variables that can be used\n  const templateVariables = [\n    \"{name} - Customer/User name\",\n    \"{email} - Customer/User email\",\n    \"{company} - Customer company\",\n    \"{amount} - Investment amount\",\n    \"{bondType} - Type of bond\",\n    \"{rfqNumber} - RFQ reference number\",\n    \"{ticketNumber} - Support ticket number\",\n    \"{date} - Current date\",\n  ];\n\n  const insertVariable = (variable: string) => {\n    const currentBody = form.getValues(\"body\");\n    const variableName = variable.split(\" -\")[0];\n    form.setValue(\"body\", currentBody + \" \" + variableName);\n  };\n\n  return (\n    <>\n      <Form {...form}>\n        <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n            <FormField\n              control={form.control}\n              name=\"name\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Template Name *</FormLabel>\n                  <FormControl>\n                    <Input placeholder=\"Enter template name\" {...field} />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n\n            <FormField\n              control={form.control}\n              name=\"category\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Category *</FormLabel>\n                  <Select onValueChange={field.onChange} defaultValue={field.value}>\n                    <FormControl>\n                      <SelectTrigger>\n                        <SelectValue placeholder=\"Select category\" />\n                      </SelectTrigger>\n                    </FormControl>\n                    <SelectContent>\n                      <SelectItem value=\"welcome\">Welcome</SelectItem>\n                      <SelectItem value=\"follow_up\">Follow Up</SelectItem>\n                      <SelectItem value=\"rfq_confirmation\">RFQ Confirmation</SelectItem>\n                      <SelectItem value=\"support\">Support</SelectItem>\n                    </SelectContent>\n                  </Select>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"subject\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email Subject *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter email subject line\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"space-y-2\">\n            <FormField\n              control={form.control}\n              name=\"body\"\n              render={({ field }) => (\n                <FormItem>\n                  <FormLabel>Email Body *</FormLabel>\n                  <FormControl>\n                    <Textarea \n                      placeholder=\"Enter email body content. You can use HTML tags for formatting.\"\n                      rows={8}\n                      {...field} \n                    />\n                  </FormControl>\n                  <FormMessage />\n                </FormItem>\n              )}\n            />\n            \n            <div className=\"flex gap-2\">\n              <Button \n                type=\"button\" \n                variant=\"outline\" \n                size=\"sm\"\n                onClick={() => setShowPreview(true)}\n              >\n                <Eye className=\"mr-2 h-4 w-4\" />\n                Preview\n              </Button>\n            </div>\n          </div>\n\n          {/* Template Variables */}\n          <div className=\"border rounded-lg p-4 bg-muted/50\">\n            <h4 className=\"font-medium mb-2\">Available Variables:</h4>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-2 text-sm\">\n              {templateVariables.map((variable, index) => (\n                <div key={index} className=\"flex items-center justify-between\">\n                  <span className=\"text-muted-foreground\">{variable}</span>\n                  <Button \n                    type=\"button\" \n                    variant=\"ghost\" \n                    size=\"sm\"\n                    onClick={() => insertVariable(variable)}\n                    className=\"h-6 px-2 text-xs\"\n                  >\n                    Insert\n                  </Button>\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <FormField\n            control={form.control}\n            name=\"isActive\"\n            render={({ field }) => (\n              <FormItem className=\"flex items-center justify-between\">\n                <div>\n                  <FormLabel>Active Template</FormLabel>\n                  <p className=\"text-sm text-muted-foreground\">\n                    Only active templates can be used for sending emails\n                  </p>\n                </div>\n                <FormControl>\n                  <Switch\n                    checked={field.value}\n                    onCheckedChange={field.onChange}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <div className=\"flex gap-3 pt-4\">\n            <Button type=\"submit\" className=\"gradient-bg flex-1\" disabled={isLoading}>\n              {isLoading ? \"Saving...\" : isEditing ? \"Update Template\" : \"Create Template\"}\n            </Button>\n          </div>\n        </form>\n      </Form>\n\n      {/* Preview Modal */}\n      <Dialog open={showPreview} onOpenChange={setShowPreview}>\n        <DialogContent className=\"max-w-2xl\">\n          <DialogHeader>\n            <DialogTitle>Email Template Preview</DialogTitle>\n          </DialogHeader>\n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium\">Subject:</label>\n              <p className=\"text-sm bg-muted p-2 rounded\">{form.watch(\"subject\") || \"No subject\"}</p>\n            </div>\n            <div>\n              <label className=\"text-sm font-medium\">Body:</label>\n              <div \n                className=\"text-sm bg-muted p-4 rounded max-h-96 overflow-y-auto\"\n                dangerouslySetInnerHTML={{ \n                  __html: form.watch(\"body\")?.replace(/\\n/g, '<br>') || \"No content\" \n                }}\n              />\n            </div>\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n","size_bytes":9967},"client/src/components/forms/LeadForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Lead, User } from \"@/types\";\n\nconst leadFormSchema = z.object({\n  name: z.string().min(2, \"Name must be at least 2 characters\"),\n  email: z.string().email(\"Invalid email address\"),\n  phone: z.string().optional(),\n  company: z.string().optional(),\n  source: z.enum([\"website\", \"referral\", \"social_media\", \"email_campaign\", \"direct\"], {\n    required_error: \"Please select a source\",\n  }),\n  status: z.enum([\"new\", \"contacted\", \"qualified\", \"converted\", \"lost\"]).default(\"new\"),\n  assignedTo: z.coerce.number().optional(),\n  notes: z.string().optional(),\n  investmentAmount: z.string().optional(),\n  bondType: z.enum([\"government\", \"corporate\", \"municipal\"]).optional(),\n});\n\ntype LeadFormData = z.infer<typeof leadFormSchema>;\n\ninterface LeadFormProps {\n  lead?: Lead;\n  onSuccess: () => void;\n}\n\nexport default function LeadForm({ lead, onSuccess }: LeadFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!lead;\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const salesUsers = users.filter(user => [\"admin\", \"sales\", \"rm\"].includes(user.role));\n\n  const form = useForm<LeadFormData>({\n    resolver: zodResolver(leadFormSchema),\n    defaultValues: {\n      name: lead?.name || \"\",\n      email: lead?.email || \"\",\n      phone: lead?.phone || \"\",\n      company: lead?.company || \"\",\n      source: (lead?.source as any) || \"website\",\n      status: (lead?.status as any) || \"new\",\n      assignedTo: lead?.assignedTo || undefined,\n      notes: lead?.notes || \"\",\n      investmentAmount: lead?.investmentAmount || \"\",\n      bondType: (lead?.bondType as any) || undefined,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: LeadFormData) => api.post(\"/leads\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: LeadFormData) => api.put(`/leads/${lead!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/leads\"] });\n      toast({\n        title: \"Success\",\n        description: \"Lead updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update lead\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: LeadFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"name\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Full Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter full name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"email\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Email Address *</FormLabel>\n                <FormControl>\n                  <Input type=\"email\" placeholder=\"Enter email address\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"phone\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Phone Number</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter phone number\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"company\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Company</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter company name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"source\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Lead Source *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select lead source\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"website\">Website</SelectItem>\n                    <SelectItem value=\"referral\">Referral</SelectItem>\n                    <SelectItem value=\"social_media\">Social Media</SelectItem>\n                    <SelectItem value=\"email_campaign\">Email Campaign</SelectItem>\n                    <SelectItem value=\"direct\">Direct</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"status\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"new\">New</SelectItem>\n                    <SelectItem value=\"contacted\">Contacted</SelectItem>\n                    <SelectItem value=\"qualified\">Qualified</SelectItem>\n                    <SelectItem value=\"converted\">Converted</SelectItem>\n                    <SelectItem value=\"lost\">Lost</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"assignedTo\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Assign To</FormLabel>\n                <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)} value={field.value?.toString()}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select team member\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {salesUsers.map((user) => (\n                      <SelectItem key={user.id} value={user.id.toString()}>\n                        {user.name} ({user.role})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"bondType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Bond Type Interest</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select bond type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"government\">Government Bonds</SelectItem>\n                    <SelectItem value=\"corporate\">Corporate Bonds</SelectItem>\n                    <SelectItem value=\"municipal\">Municipal Bonds</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"investmentAmount\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Expected Investment Amount</FormLabel>\n              <FormControl>\n                <Input \n                  type=\"number\" \n                  placeholder=\"Enter amount in INR\" \n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Add any additional notes about this lead\"\n                  rows={3}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button type=\"submit\" className=\"gradient-bg flex-1\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : isEditing ? \"Update Lead\" : \"Create Lead\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":10886},"client/src/components/forms/RFQForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { RFQ, Customer } from \"@/types\";\n\nconst rfqFormSchema = z.object({\n  customerId: z.coerce.number({ required_error: \"Please select a customer\" }),\n  bondType: z.enum([\"government\", \"corporate\", \"municipal\"], {\n    required_error: \"Please select bond type\",\n  }),\n  bondName: z.string().min(2, \"Bond name must be at least 2 characters\"),\n  faceValue: z.string().refine((val) => !isNaN(Number(val)) && Number(val) > 0, \"Face value must be a positive number\"),\n  quantity: z.coerce.number().min(1, \"Quantity must be at least 1\"),\n  bidPrice: z.string().optional(),\n  askPrice: z.string().optional(),\n  status: z.enum([\"pending\", \"submitted\", \"executed\", \"cancelled\"]).default(\"pending\"),\n  notes: z.string().optional(),\n});\n\ntype RFQFormData = z.infer<typeof rfqFormSchema>;\n\ninterface RFQFormProps {\n  rfq?: RFQ;\n  onSuccess: () => void;\n}\n\nexport default function RFQForm({ rfq, onSuccess }: RFQFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!rfq;\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const activeCustomers = customers.filter(customer => customer.status === \"active\");\n\n  const form = useForm<RFQFormData>({\n    resolver: zodResolver(rfqFormSchema),\n    defaultValues: {\n      customerId: rfq?.customerId || undefined,\n      bondType: (rfq?.bondType as any) || \"government\",\n      bondName: rfq?.bondName || \"\",\n      faceValue: rfq?.faceValue || \"\",\n      quantity: rfq?.quantity || 1,\n      bidPrice: rfq?.bidPrice || \"\",\n      askPrice: rfq?.askPrice || \"\",\n      status: (rfq?.status as any) || \"pending\",\n      notes: rfq?.notes || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: RFQFormData) => api.post(\"/rfqs\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rfqs\"] });\n      toast({\n        title: \"Success\",\n        description: \"RFQ created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create RFQ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: RFQFormData) => api.put(`/rfqs/${rfq!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/rfqs\"] });\n      toast({\n        title: \"Success\",\n        description: \"RFQ updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update RFQ\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: RFQFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n\n  // Calculate total value\n  const faceValue = parseFloat(form.watch(\"faceValue\") || \"0\");\n  const quantity = form.watch(\"quantity\") || 0;\n  const totalValue = faceValue * quantity;\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"customerId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Customer *</FormLabel>\n              <Select onValueChange={(value) => field.onChange(parseInt(value))} value={field.value?.toString()}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select customer\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {activeCustomers.map((customer) => (\n                    <SelectItem key={customer.id} value={customer.id.toString()}>\n                      {customer.name} - {customer.email}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"bondType\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Bond Type *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select bond type\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"government\">Government Bonds</SelectItem>\n                    <SelectItem value=\"corporate\">Corporate Bonds</SelectItem>\n                    <SelectItem value=\"municipal\">Municipal Bonds</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"bondName\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Bond Name *</FormLabel>\n                <FormControl>\n                  <Input placeholder=\"Enter bond name\" {...field} />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"faceValue\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Face Value (₹) *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Enter face value\" \n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"quantity\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Quantity *</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    placeholder=\"Enter quantity\" \n                    {...field} \n                    onChange={(e) => field.onChange(parseInt(e.target.value) || 0)}\n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {totalValue > 0 && (\n          <div className=\"bg-muted/50 p-3 rounded-lg\">\n            <p className=\"text-sm font-medium\">\n              Total Value: ₹{totalValue.toLocaleString()}\n            </p>\n          </div>\n        )}\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"bidPrice\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Bid Price (₹)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    step=\"0.01\"\n                    placeholder=\"Enter bid price\" \n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"askPrice\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Ask Price (₹)</FormLabel>\n                <FormControl>\n                  <Input \n                    type=\"number\" \n                    step=\"0.01\"\n                    placeholder=\"Enter ask price\" \n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <FormField\n          control={form.control}\n          name=\"status\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Status</FormLabel>\n              <Select onValueChange={field.onChange} defaultValue={field.value}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"pending\">Pending</SelectItem>\n                  <SelectItem value=\"submitted\">Submitted</SelectItem>\n                  <SelectItem value=\"executed\">Executed</SelectItem>\n                  <SelectItem value=\"cancelled\">Cancelled</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Notes</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Add any additional notes about this RFQ\"\n                  rows={3}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button type=\"submit\" className=\"gradient-bg flex-1\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : isEditing ? \"Update RFQ\" : \"Create RFQ\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":10464},"client/src/components/forms/SupportTicketForm.tsx":{"content":"import { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { useMutation, useQuery } from \"@tanstack/react-query\";\nimport { z } from \"zod\";\nimport { api } from \"@/lib/api\";\nimport { queryClient } from \"@/lib/queryClient\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { SupportTicket, Customer, User } from \"@/types\";\n\nconst supportTicketFormSchema = z.object({\n  customerId: z.coerce.number().optional(),\n  subject: z.string().min(5, \"Subject must be at least 5 characters\"),\n  description: z.string().min(10, \"Description must be at least 10 characters\"),\n  category: z.enum([\"technical\", \"trading\", \"kyc\", \"general\"], {\n    required_error: \"Please select a category\",\n  }),\n  priority: z.enum([\"low\", \"medium\", \"high\", \"urgent\"]).default(\"medium\"),\n  status: z.enum([\"open\", \"in_progress\", \"resolved\", \"closed\"]).default(\"open\"),\n  assignedTo: z.coerce.number().optional(),\n  resolution: z.string().optional(),\n});\n\ntype SupportTicketFormData = z.infer<typeof supportTicketFormSchema>;\n\ninterface SupportTicketFormProps {\n  ticket?: SupportTicket;\n  onSuccess: () => void;\n}\n\nexport default function SupportTicketForm({ ticket, onSuccess }: SupportTicketFormProps) {\n  const { toast } = useToast();\n  const isEditing = !!ticket;\n\n  const { data: customers = [] } = useQuery<Customer[]>({\n    queryKey: [\"/api/customers\"],\n  });\n\n  const { data: users = [] } = useQuery<User[]>({\n    queryKey: [\"/api/users\"],\n  });\n\n  const supportUsers = users.filter(user => [\"admin\", \"support\"].includes(user.role));\n  const activeCustomers = customers.filter(customer => customer.status === \"active\");\n\n  const form = useForm<SupportTicketFormData>({\n    resolver: zodResolver(supportTicketFormSchema),\n    defaultValues: {\n      customerId: ticket?.customerId || undefined,\n      subject: ticket?.subject || \"\",\n      description: ticket?.description || \"\",\n      category: (ticket?.category as any) || \"general\",\n      priority: (ticket?.priority as any) || \"medium\",\n      status: (ticket?.status as any) || \"open\",\n      assignedTo: ticket?.assignedTo || undefined,\n      resolution: ticket?.resolution || \"\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: (data: SupportTicketFormData) => api.post(\"/support-tickets\", data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support-tickets\"] });\n      toast({\n        title: \"Success\",\n        description: \"Support ticket created successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to create support ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: (data: SupportTicketFormData) => api.put(`/support-tickets/${ticket!.id}`, data),\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/support-tickets\"] });\n      toast({\n        title: \"Success\",\n        description: \"Support ticket updated successfully\",\n      });\n      onSuccess();\n    },\n    onError: (error: any) => {\n      toast({\n        title: \"Error\",\n        description: error.response?.data?.message || \"Failed to update support ticket\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: SupportTicketFormData) => {\n    if (isEditing) {\n      updateMutation.mutate(data);\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const isLoading = createMutation.isPending || updateMutation.isPending;\n  const currentStatus = form.watch(\"status\");\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n        <FormField\n          control={form.control}\n          name=\"customerId\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Customer (Optional)</FormLabel>\n              <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)} value={field.value?.toString()}>\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select customer (if applicable)\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {activeCustomers.map((customer) => (\n                    <SelectItem key={customer.id} value={customer.id.toString()}>\n                      {customer.name} - {customer.email}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"subject\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Subject *</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Enter ticket subject\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <FormField\n          control={form.control}\n          name=\"description\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description *</FormLabel>\n              <FormControl>\n                <Textarea \n                  placeholder=\"Describe the issue or request in detail\"\n                  rows={4}\n                  {...field} \n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"category\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Category *</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select category\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"technical\">Technical</SelectItem>\n                    <SelectItem value=\"trading\">Trading</SelectItem>\n                    <SelectItem value=\"kyc\">KYC</SelectItem>\n                    <SelectItem value=\"general\">General</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"priority\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Priority</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select priority\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"low\">Low</SelectItem>\n                    <SelectItem value=\"medium\">Medium</SelectItem>\n                    <SelectItem value=\"high\">High</SelectItem>\n                    <SelectItem value=\"urgent\">Urgent</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n          <FormField\n            control={form.control}\n            name=\"status\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Status</FormLabel>\n                <Select onValueChange={field.onChange} defaultValue={field.value}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select status\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    <SelectItem value=\"open\">Open</SelectItem>\n                    <SelectItem value=\"in_progress\">In Progress</SelectItem>\n                    <SelectItem value=\"resolved\">Resolved</SelectItem>\n                    <SelectItem value=\"closed\">Closed</SelectItem>\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n\n          <FormField\n            control={form.control}\n            name=\"assignedTo\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Assign To</FormLabel>\n                <Select onValueChange={(value) => field.onChange(value ? parseInt(value) : undefined)} value={field.value?.toString()}>\n                  <FormControl>\n                    <SelectTrigger>\n                      <SelectValue placeholder=\"Select support agent\" />\n                    </SelectTrigger>\n                  </FormControl>\n                  <SelectContent>\n                    {supportUsers.map((user) => (\n                      <SelectItem key={user.id} value={user.id.toString()}>\n                        {user.name} ({user.role})\n                      </SelectItem>\n                    ))}\n                  </SelectContent>\n                </Select>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        </div>\n\n        {(currentStatus === \"resolved\" || currentStatus === \"closed\") && (\n          <FormField\n            control={form.control}\n            name=\"resolution\"\n            render={({ field }) => (\n              <FormItem>\n                <FormLabel>Resolution</FormLabel>\n                <FormControl>\n                  <Textarea \n                    placeholder=\"Describe how the issue was resolved\"\n                    rows={3}\n                    {...field} \n                  />\n                </FormControl>\n                <FormMessage />\n              </FormItem>\n            )}\n          />\n        )}\n\n        <div className=\"flex gap-3 pt-4\">\n          <Button type=\"submit\" className=\"gradient-bg flex-1\" disabled={isLoading}>\n            {isLoading ? \"Saving...\" : isEditing ? \"Update Ticket\" : \"Create Ticket\"}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}\n","size_bytes":10748},"client/src/components/layout/AppLayout.tsx":{"content":"import { useState } from \"react\";\nimport { useIsMobile } from \"@/hooks/use-mobile\";\nimport Header from \"./Header\";\nimport Sidebar from \"./Sidebar\";\n\ninterface AppLayoutProps {\n  children: React.ReactNode;\n}\n\nexport default function AppLayout({ children }: AppLayoutProps) {\n  const [sidebarOpen, setSidebarOpen] = useState(false);\n  const isMobile = useIsMobile();\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      <Header onMenuClick={() => setSidebarOpen(!sidebarOpen)} />\n      \n      <div className=\"flex pt-16\">\n        <Sidebar \n          isOpen={sidebarOpen} \n          onClose={() => setSidebarOpen(false)} \n          isMobile={isMobile}\n        />\n        \n        <main className={`flex-1 transition-all duration-300 ${isMobile ? '' : 'lg:ml-64'}`}>\n          <div className=\"p-6\">\n            {children}\n          </div>\n        </main>\n      </div>\n      \n      {/* Mobile overlay */}\n      {isMobile && sidebarOpen && (\n        <div \n          className=\"fixed inset-0 bg-black bg-opacity-50 z-20\"\n          onClick={() => setSidebarOpen(false)}\n        />\n      )}\n    </div>\n  );\n}\n","size_bytes":1114},"client/src/components/layout/Header.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useTheme } from \"@/contexts/ThemeContext\";\nimport { usePageTracking } from \"@/contexts/PageTrackingContext\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback } from \"@/components/ui/avatar\";\nimport { \n  DropdownMenu, \n  DropdownMenuContent, \n  DropdownMenuItem, \n  DropdownMenuSeparator, \n  DropdownMenuTrigger \n} from \"@/components/ui/dropdown-menu\";\nimport { Menu, Bell, Sun, Moon, LogOut, User, TrendingUp } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\ninterface HeaderProps {\n  onMenuClick: () => void;\n}\n\nexport default function Header({ onMenuClick }: HeaderProps) {\n  const { user, logout } = useAuth();\n  const { theme, toggleTheme } = useTheme();\n  const { trackLogoutAction } = usePageTracking();\n\n  const handleLogout = async () => {\n    await trackLogoutAction();\n    logout();\n  };\n\n  return (\n    <header className=\"bg-card border-b border-border fixed w-full top-0 z-40 shadow-sm\">\n      <div className=\"flex items-center justify-between px-6 py-4\">\n        <div className=\"flex items-center gap-4\">\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"lg:hidden\"\n            onClick={onMenuClick}\n          >\n            <Menu className=\"h-5 w-5\" />\n          </Button>\n          \n          <div className=\"flex items-center gap-3\">\n            <div className=\"gradient-bg w-10 h-10 rounded-lg flex items-center justify-center\">\n              <TrendingUp className=\"w-5 h-5 text-white\" />\n            </div>\n            <div>\n              <h1 className=\"text-xl font-bold text-foreground\">MeraDhan CRM</h1>\n              <p className=\"text-xs text-muted-foreground\">SEBI Registered OBPP</p>\n            </div>\n          </div>\n        </div>\n        \n        <div className=\"flex items-center gap-4\">\n          {/* Notifications */}\n          <Button variant=\"ghost\" size=\"sm\" className=\"relative\">\n            <Bell className=\"h-5 w-5\" />\n            <Badge className=\"absolute -top-1 -right-1 h-5 w-5 rounded-full p-0 text-xs\">\n              3\n            </Badge>\n          </Button>\n          \n          {/* Theme toggle */}\n          <Button variant=\"ghost\" size=\"sm\" onClick={toggleTheme}>\n            {theme === \"light\" ? <Moon className=\"h-5 w-5\" /> : <Sun className=\"h-5 w-5\" />}\n          </Button>\n          \n          {/* User menu */}\n          <DropdownMenu>\n            <DropdownMenuTrigger asChild>\n              <div className=\"flex items-center gap-3 cursor-pointer hover:bg-accent hover:text-accent-foreground rounded-md p-2 transition-colors\">\n                <div className=\"text-right hidden sm:block\">\n                  <p className=\"text-sm font-medium\">{user?.name}</p>\n                  <p className=\"text-xs text-muted-foreground capitalize\">{user?.role}</p>\n                </div>\n                <Avatar className=\"h-8 w-8\">\n                  <AvatarFallback>\n                    {user?.name?.charAt(0).toUpperCase()}\n                  </AvatarFallback>\n                </Avatar>\n              </div>\n            </DropdownMenuTrigger>\n            <DropdownMenuContent align=\"end\" className=\"w-56\">\n              <DropdownMenuItem>\n                <User className=\"mr-2 h-4 w-4\" />\n                <span>Profile</span>\n              </DropdownMenuItem>\n              <DropdownMenuSeparator />\n              <DropdownMenuItem onClick={handleLogout}>\n                <LogOut className=\"mr-2 h-4 w-4\" />\n                <span>Log out</span>\n              </DropdownMenuItem>\n            </DropdownMenuContent>\n          </DropdownMenu>\n        </div>\n      </div>\n    </header>\n  );\n}\n","size_bytes":3675},"client/src/components/layout/Sidebar.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { useLocation } from \"wouter\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\nimport { Separator } from \"@/components/ui/separator\";\nimport {\n  BarChart3,\n  Users,\n  UserCheck,\n  TrendingUp,\n  FileText,\n  Headphones,\n  Mail,\n  PieChart,\n  Settings,\n  History,\n  Activity,\n  Timer,\n  X,\n} from \"lucide-react\";\n\ninterface SidebarProps {\n  isOpen: boolean;\n  onClose: () => void;\n  isMobile: boolean;\n}\n\nconst mainNavItems = [\n  { name: \"Dashboard\", href: \"/dashboard\", icon: BarChart3 },\n  { name: \"Leads Management\", href: \"/leads\", icon: Users },\n  { name: \"Customers\", href: \"/customers\", icon: UserCheck },\n  { name: \"Sales Pipeline\", href: \"/sales-pipeline\", icon: TrendingUp },\n  { name: \"RFQ Management\", href: \"/rfq-management\", icon: FileText },\n  { name: \"Support Tickets\", href: \"/support-tickets\", icon: Headphones },\n  { name: \"Email Templates\", href: \"/email-templates\", icon: Mail },\n  { name: \"Reports\", href: \"/reports\", icon: PieChart },\n];\n\nconst adminNavItems = [\n  { name: \"User Management\", href: \"/user-management\", icon: Settings },\n  { name: \"Audit Logs\", href: \"/audit-logs\", icon: History },\n  { name: \"Session Analytics\", href: \"/session-analytics\", icon: Activity },\n  { name: \"Session Test\", href: \"/session-test\", icon: Timer },\n];\n\nexport default function Sidebar({ isOpen, onClose, isMobile }: SidebarProps) {\n  const { user, hasRole } = useAuth();\n  const [location, setLocation] = useLocation();\n\n  const handleNavigate = (href: string) => {\n    setLocation(href);\n    if (isMobile) {\n      onClose();\n    }\n  };\n\n  return (\n    <aside\n      className={cn(\n        \"fixed left-0 top-16 z-30 h-[calc(100vh-4rem)] w-64 transform bg-sidebar-background border-r border-sidebar-border transition-transform duration-300 ease-in-out\",\n        isOpen || !isMobile ? \"translate-x-0\" : \"-translate-x-full\",\n        !isMobile && \"lg:translate-x-0\"\n      )}\n    >\n      <div className=\"flex h-full flex-col\">\n        {/* Mobile close button */}\n        {isMobile && (\n          <div className=\"flex items-center justify-between p-4\">\n            <h2 className=\"text-lg font-semibold\">Navigation</h2>\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose}>\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n        )}\n\n        <ScrollArea className=\"flex-1 px-3 py-4\">\n          <nav className=\"space-y-2\">\n            {mainNavItems.map((item) => {\n              const isActive = location === item.href;\n              return (\n                <Button\n                  key={item.href}\n                  variant={isActive ? \"secondary\" : \"ghost\"}\n                  className={cn(\n                    \"w-full justify-start\",\n                    isActive && \"sidebar-active\"\n                  )}\n                  onClick={() => handleNavigate(item.href)}\n                >\n                  <item.icon className=\"mr-3 h-4 w-4\" />\n                  {item.name}\n                </Button>\n              );\n            })}\n          </nav>\n\n          {/* Admin section */}\n          {hasRole(['admin']) && (\n            <>\n              <Separator className=\"my-4\" />\n              <div className=\"px-3 py-2\">\n                <h3 className=\"mb-2 px-4 text-xs font-semibold text-muted-foreground uppercase tracking-wider\">\n                  Administration\n                </h3>\n                <nav className=\"space-y-2\">\n                  {adminNavItems.map((item) => {\n                    const isActive = location === item.href;\n                    return (\n                      <Button\n                        key={item.href}\n                        variant={isActive ? \"secondary\" : \"ghost\"}\n                        className={cn(\n                          \"w-full justify-start\",\n                          isActive && \"sidebar-active\"\n                        )}\n                        onClick={() => handleNavigate(item.href)}\n                      >\n                        <item.icon className=\"mr-3 h-4 w-4\" />\n                        {item.name}\n                      </Button>\n                    );\n                  })}\n                </nav>\n              </div>\n            </>\n          )}\n        </ScrollArea>\n      </div>\n    </aside>\n  );\n}\n","size_bytes":4359},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209}},"version":1}